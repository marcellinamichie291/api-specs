{
	"info": {
		"_postman_id": "993e3b18-d277-4189-8ce5-af45df38e336",
		"name": "Slack",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21447502"
	},
	"item": [
		{
			"name": "Admin API",
			"item": [
				{
					"name": "admin users set Owner",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The ID (`T1234`) of the workspace."
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "Id of the user to promote to owner."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.users.setOwner",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.setOwner"
							]
						},
						"description": "Set an existing guest, regular user, or admin user to be a workspace owner."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "Id of the user to promote to owner."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.setOwner",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.setOwner"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "Id of the user to promote to owner."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.setOwner",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.setOwner"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin users session reset",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_id",
									"value": "<string>",
									"description": "The ID of the user to wipe sessions for"
								},
								{
									"key": "mobile_only",
									"value": "<boolean>",
									"description": "Only expire mobile sessions (default: false)"
								},
								{
									"key": "web_only",
									"value": "<boolean>",
									"description": "Only expire web sessions (default: false)"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.users.session.reset",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.session.reset"
							]
						},
						"description": "Wipes all valid sessions on all devices for a given user"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to wipe sessions for"
										},
										{
											"key": "mobile_only",
											"value": "<boolean>",
											"description": "Only expire mobile sessions (default: false)"
										},
										{
											"key": "web_only",
											"value": "<boolean>",
											"description": "Only expire web sessions (default: false)"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.session.reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.session.reset"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to wipe sessions for"
										},
										{
											"key": "mobile_only",
											"value": "<boolean>",
											"description": "Only expire mobile sessions (default: false)"
										},
										{
											"key": "web_only",
											"value": "<boolean>",
											"description": "Only expire web sessions (default: false)"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.session.reset",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.session.reset"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin apps approve",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.apps:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "app_id",
									"value": "<string>",
									"description": "The id of the app to approve."
								},
								{
									"key": "request_id",
									"value": "<string>",
									"description": "The id of the request to approve."
								},
								{
									"key": "team_id",
									"value": "<string>"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.apps.approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.apps.approve"
							]
						},
						"description": "Approve an app for installation on a workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.apps:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "app_id",
											"value": "<string>",
											"description": "The id of the app to approve."
										},
										{
											"key": "request_id",
											"value": "<string>",
											"description": "The id of the request to approve."
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.apps.approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.approve"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.apps:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "app_id",
											"value": "<string>",
											"description": "The id of the app to approve."
										},
										{
											"key": "request_id",
											"value": "<string>",
											"description": "The id of the request to approve."
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.apps.approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.approve"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin apps approved list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin.apps.approved.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>&enterprise_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.apps.approved.list"
							],
							"query": [
								{
									"key": "token",
									"value": "<string>",
									"description": "(Required) Authentication token. Requires scope: `admin.apps:read`"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
								},
								{
									"key": "team_id",
									"value": "<string>"
								},
								{
									"key": "enterprise_id",
									"value": "<string>"
								}
							]
						},
						"description": "List approved apps for an org or workspace."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.apps.approved.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>&enterprise_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.approved.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "enterprise_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.apps.approved.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>&enterprise_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.approved.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "enterprise_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin apps requests list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin.apps.requests.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.apps.requests.list"
							],
							"query": [
								{
									"key": "token",
									"value": "<string>",
									"description": "(Required) Authentication token. Requires scope: `admin.apps:read`"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
								},
								{
									"key": "team_id",
									"value": "<string>"
								}
							]
						},
						"description": "List app requests for a team/workspace."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.apps.requests.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.requests.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.apps.requests.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.requests.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin apps restricted list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin.apps.restricted.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>&enterprise_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.apps.restricted.list"
							],
							"query": [
								{
									"key": "token",
									"value": "<string>",
									"description": "(Required) Authentication token. Requires scope: `admin.apps:read`"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
								},
								{
									"key": "team_id",
									"value": "<string>"
								},
								{
									"key": "enterprise_id",
									"value": "<string>"
								}
							]
						},
						"description": "List restricted apps for an org or workspace."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.apps.restricted.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>&enterprise_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.restricted.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "enterprise_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.apps.restricted.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>&enterprise_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.restricted.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "enterprise_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations archive",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel to archive."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.archive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.archive"
							]
						},
						"description": "Archive a public or private channel."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to archive."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.archive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.archive"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to archive."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.archive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.archive"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "admin apps restrict",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.apps:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "app_id",
									"value": "<string>",
									"description": "The id of the app to restrict."
								},
								{
									"key": "request_id",
									"value": "<string>",
									"description": "The id of the request to restrict."
								},
								{
									"key": "team_id",
									"value": "<string>"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.apps.restrict",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.apps.restrict"
							]
						},
						"description": "Restrict an app for installation on a workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.apps:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "app_id",
											"value": "<string>",
											"description": "The id of the app to restrict."
										},
										{
											"key": "request_id",
											"value": "<string>",
											"description": "The id of the request to restrict."
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.apps.restrict",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.restrict"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.apps:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "app_id",
											"value": "<string>",
											"description": "The id of the app to restrict."
										},
										{
											"key": "request_id",
											"value": "<string>",
											"description": "The id of the request to restrict."
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.apps.restrict",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.apps.restrict"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations convert To Private",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel to convert to private."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.convertToPrivate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.convertToPrivate"
							]
						},
						"description": "Convert a public channel to a private channel."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to convert to private."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.convertToPrivate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.convertToPrivate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to convert to private."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.convertToPrivate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.convertToPrivate"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations create",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "<string>",
									"description": "Name of the public or private channel to create."
								},
								{
									"key": "is_private",
									"value": "<boolean>",
									"description": "When `true`, creates a private channel instead of a public channel"
								},
								{
									"key": "description",
									"value": "<string>",
									"description": "Description of the public or private channel to create."
								},
								{
									"key": "org_wide",
									"value": "<boolean>",
									"description": "When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel"
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.create"
							]
						},
						"description": "Create a public or private channel-based conversation."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "Name of the public or private channel to create."
										},
										{
											"key": "is_private",
											"value": "<boolean>",
											"description": "When `true`, creates a private channel instead of a public channel"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "Description of the public or private channel to create."
										},
										{
											"key": "org_wide",
											"value": "<boolean>",
											"description": "When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel"
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "Name of the public or private channel to create."
										},
										{
											"key": "is_private",
											"value": "<boolean>",
											"description": "When `true`, creates a private channel instead of a public channel"
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "Description of the public or private channel to create."
										},
										{
											"key": "org_wide",
											"value": "<boolean>",
											"description": "When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel"
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel_id\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations delete",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel to delete."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.delete"
							]
						},
						"description": "Delete a public or private channel."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to delete."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.delete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to delete."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.delete"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations disconnect Shared",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel to be disconnected from some workspaces."
								},
								{
									"key": "leaving_team_ids",
									"value": "<string>",
									"description": "The team to be removed from the channel. Currently only a single team id can be specified."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.disconnectShared",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.disconnectShared"
							]
						},
						"description": "Disconnect a connected channel from one or more workspaces."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to be disconnected from some workspaces."
										},
										{
											"key": "leaving_team_ids",
											"value": "<string>",
											"description": "The team to be removed from the channel. Currently only a single team id can be specified."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.disconnectShared",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.disconnectShared"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to be disconnected from some workspaces."
										},
										{
											"key": "leaving_team_ids",
											"value": "<string>",
											"description": "The team to be removed from the channel. Currently only a single team id can be specified."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.disconnectShared",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.disconnectShared"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations ekm list Original Connected Channel Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.ekm.listOriginalConnectedChannelInfo?token=<string>&channel_ids=<string>&team_ids=<string>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.ekm.listOriginalConnectedChannelInfo"
							],
							"query": [
								{
									"key": "token",
									"value": "<string>",
									"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`"
								},
								{
									"key": "channel_ids",
									"value": "<string>",
									"description": "A comma-separated list of channels to filter to."
								},
								{
									"key": "team_ids",
									"value": "<string>",
									"description": "A comma-separated list of the workspaces to which the channels you would like returned belong."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page."
								}
							]
						},
						"description": "List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.ekm.listOriginalConnectedChannelInfo?token=<string>&channel_ids=<string>&team_ids=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.ekm.listOriginalConnectedChannelInfo"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel_ids",
											"value": "<string>"
										},
										{
											"key": "team_ids",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.ekm.listOriginalConnectedChannelInfo?token=<string>&channel_ids=<string>&team_ids=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.ekm.listOriginalConnectedChannelInfo"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel_ids",
											"value": "<string>"
										},
										{
											"key": "team_ids",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations get Teams",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.getTeams?channel_id=<string>&cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.getTeams"
							],
							"query": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "(Required) The channel to determine connected workspaces within the organization for."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive."
								}
							]
						},
						"description": "Get all the workspaces a given public or private channel is connected to within this Enterprise org."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.getTeams?channel_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.getTeams"
									],
									"query": [
										{
											"key": "channel_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"team_ids\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"response_metadata\": {\n  \"next_cursor\": \"<string>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.getTeams?channel_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.getTeams"
									],
									"query": [
										{
											"key": "channel_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations get Conversation Prefs",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.getConversationPrefs?channel_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.getConversationPrefs"
							],
							"query": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "(Required) The channel to get preferences for."
								}
							]
						},
						"description": "Get conversation preferences for a public or private channel."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.getConversationPrefs?channel_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.getConversationPrefs"
									],
									"query": [
										{
											"key": "channel_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"prefs\": {\n  \"can_thread\": {\n   \"type\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"user\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"who_can_post\": {\n   \"type\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"user\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  }\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.getConversationPrefs?channel_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.getConversationPrefs"
									],
									"query": [
										{
											"key": "channel_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations rename",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel to rename."
								},
								{
									"key": "name",
									"value": "<string>"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.rename",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.rename"
							]
						},
						"description": "Rename a public or private channel."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to rename."
										},
										{
											"key": "name",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.rename",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.rename"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to rename."
										},
										{
											"key": "name",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.rename",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.rename"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations invite",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "user_ids",
									"value": "<string>",
									"description": "The users to invite."
								},
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel that the users will be invited to."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.invite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.invite"
							]
						},
						"description": "Invite a user to a public or private channel."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "user_ids",
											"value": "<string>",
											"description": "The users to invite."
										},
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel that the users will be invited to."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.invite",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.invite"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "user_ids",
											"value": "<string>",
											"description": "The users to invite."
										},
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel that the users will be invited to."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.invite",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.invite"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations restrict Access remove Group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `admin.conversations:write`"
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."
								},
								{
									"key": "group_id",
									"value": "<string>",
									"description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel."
								},
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel to remove the linked group from."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.restrictAccess.removeGroup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.restrictAccess.removeGroup"
							]
						},
						"description": "Remove a linked IDP group linked from a private channel"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.conversations:write`"
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."
										},
										{
											"key": "group_id",
											"value": "<string>",
											"description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel."
										},
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to remove the linked group from."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.restrictAccess.removeGroup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.restrictAccess.removeGroup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.conversations:write`"
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."
										},
										{
											"key": "group_id",
											"value": "<string>",
											"description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel."
										},
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to remove the linked group from."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.restrictAccess.removeGroup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.restrictAccess.removeGroup"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations restrict Access list Groups",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.restrictAccess.listGroups?token=<string>&channel_id=<string>&team_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.restrictAccess.listGroups"
							],
							"query": [
								{
									"key": "token",
									"value": "<string>",
									"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`"
								},
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."
								}
							]
						},
						"description": "List all IDP Groups linked to a channel"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.restrictAccess.listGroups?token=<string>&channel_id=<string>&team_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.restrictAccess.listGroups"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel_id",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.restrictAccess.listGroups?token=<string>&channel_id=<string>&team_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.restrictAccess.listGroups"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel_id",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations restrict Access add Group",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `admin.conversations:write`"
								},
								{
									"key": "group_id",
									"value": "<string>",
									"description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel."
								},
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel to link this group to."
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.restrictAccess.addGroup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.restrictAccess.addGroup"
							]
						},
						"description": "Add an allowlist of IDP groups for accessing a channel"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.conversations:write`"
										},
										{
											"key": "group_id",
											"value": "<string>",
											"description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel."
										},
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to link this group to."
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.restrictAccess.addGroup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.restrictAccess.addGroup"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.conversations:write`"
										},
										{
											"key": "group_id",
											"value": "<string>",
											"description": "The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel."
										},
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to link this group to."
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.restrictAccess.addGroup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.restrictAccess.addGroup"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations search",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.search?team_ids=<string>&query=<string>&limit=<integer>&cursor=<string>&search_channel_types=<string>&sort=<string>&sort_dir=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.search"
							],
							"query": [
								{
									"key": "team_ids",
									"value": "<string>",
									"description": "Comma separated string of team IDs, signifying the workspaces to search through."
								},
								{
									"key": "query",
									"value": "<string>",
									"description": "Name of the the channel to query by."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page."
								},
								{
									"key": "search_channel_types",
									"value": "<string>",
									"description": "The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types)."
								},
								{
									"key": "sort",
									"value": "<string>",
									"description": "Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted "
								},
								{
									"key": "sort_dir",
									"value": "<string>",
									"description": "Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)"
								}
							]
						},
						"description": "Search for public or private channels in an Enterprise organization."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.search?team_ids=<string>&query=<string>&limit=<integer>&cursor=<string>&search_channel_types=<string>&sort=<string>&sort_dir=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.search"
									],
									"query": [
										{
											"key": "team_ids",
											"value": "<string>"
										},
										{
											"key": "query",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "search_channel_types",
											"value": "<string>"
										},
										{
											"key": "sort",
											"value": "<string>"
										},
										{
											"key": "sort_dir",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.search?team_ids=<string>&query=<string>&limit=<integer>&cursor=<string>&search_channel_types=<string>&sort=<string>&sort_dir=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.search"
									],
									"query": [
										{
											"key": "team_ids",
											"value": "<string>"
										},
										{
											"key": "query",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "search_channel_types",
											"value": "<string>"
										},
										{
											"key": "sort",
											"value": "<string>"
										},
										{
											"key": "sort_dir",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"channels\": [\n  {\n   \"id\": \"<string>\",\n   \"name\": \"<string>\",\n   \"created\": \"<integer>\",\n   \"creator\": \"<string>\",\n   \"is_channel\": \"<boolean>\",\n   \"is_org_shared\": \"<boolean>\",\n   \"is_private\": \"<boolean>\",\n   \"is_mpim\": \"<boolean>\",\n   \"is_shared\": \"<boolean>\",\n   \"name_normalized\": \"<string>\",\n   \"members\": [\n    \"<string>\"\n   ],\n   \"topic\": {\n    \"value\": \"<string>\",\n    \"creator\": \"<string>\",\n    \"last_set\": \"<integer>\"\n   },\n   \"purpose\": {\n    \"value\": \"<string>\",\n    \"creator\": \"<string>\",\n    \"last_set\": \"<integer>\"\n   },\n   \"accepted_user\": \"<string>\",\n   \"is_archived\": \"<boolean>\",\n   \"is_frozen\": \"<boolean>\",\n   \"is_general\": \"<boolean>\",\n   \"is_member\": \"<boolean>\",\n   \"is_moved\": \"<integer>\",\n   \"is_non_threadable\": \"<boolean>\",\n   \"is_pending_ext_shared\": \"<boolean>\",\n   \"is_read_only\": \"<boolean>\",\n   \"is_thread_only\": \"<boolean>\",\n   \"last_read\": \"<string>\",\n   \"latest\": {},\n   \"num_members\": \"<integer>\",\n   \"pending_shared\": [\n    \"<string>\"\n   ],\n   \"previous_names\": [\n    \"<string>\"\n   ],\n   \"priority\": \"<number>\",\n   \"unlinked\": \"<integer>\",\n   \"unread_count\": \"<integer>\",\n   \"unread_count_display\": \"<integer>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"name\": \"<string>\",\n   \"created\": \"<integer>\",\n   \"creator\": \"<string>\",\n   \"is_channel\": \"<boolean>\",\n   \"is_org_shared\": \"<boolean>\",\n   \"is_private\": \"<boolean>\",\n   \"is_mpim\": \"<boolean>\",\n   \"is_shared\": \"<boolean>\",\n   \"name_normalized\": \"<string>\",\n   \"members\": [\n    \"<string>\"\n   ],\n   \"topic\": {\n    \"value\": \"<string>\",\n    \"creator\": \"<string>\",\n    \"last_set\": \"<integer>\"\n   },\n   \"purpose\": {\n    \"value\": \"<string>\",\n    \"creator\": \"<string>\",\n    \"last_set\": \"<integer>\"\n   },\n   \"accepted_user\": \"<string>\",\n   \"is_archived\": \"<boolean>\",\n   \"is_frozen\": \"<boolean>\",\n   \"is_general\": \"<boolean>\",\n   \"is_member\": \"<boolean>\",\n   \"is_moved\": \"<integer>\",\n   \"is_non_threadable\": \"<boolean>\",\n   \"is_pending_ext_shared\": \"<boolean>\",\n   \"is_read_only\": \"<boolean>\",\n   \"is_thread_only\": \"<boolean>\",\n   \"last_read\": \"<string>\",\n   \"latest\": {},\n   \"num_members\": \"<integer>\",\n   \"pending_shared\": [\n    \"<string>\"\n   ],\n   \"previous_names\": [\n    \"<string>\"\n   ],\n   \"priority\": \"<number>\",\n   \"unlinked\": \"<integer>\",\n   \"unread_count\": \"<integer>\",\n   \"unread_count_display\": \"<integer>\"\n  }\n ],\n \"next_cursor\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations set Conversation Prefs",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel to set the prefs for"
								},
								{
									"key": "prefs",
									"value": "<string>",
									"description": "The prefs for this channel in a stringified JSON format."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.setConversationPrefs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.setConversationPrefs"
							]
						},
						"description": "Set the posting permissions for a public or private channel."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to set the prefs for"
										},
										{
											"key": "prefs",
											"value": "<string>",
											"description": "The prefs for this channel in a stringified JSON format."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.setConversationPrefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.setConversationPrefs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to set the prefs for"
										},
										{
											"key": "prefs",
											"value": "<string>",
											"description": "The prefs for this channel in a stringified JSON format."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.setConversationPrefs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.setConversationPrefs"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations set Teams",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The encoded `channel_id` to add or remove to workspaces."
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel."
								},
								{
									"key": "target_team_ids",
									"value": "<string>",
									"description": "A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide."
								},
								{
									"key": "org_channel",
									"value": "<boolean>",
									"description": "True if channel has to be converted to an org channel"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.setTeams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.setTeams"
							]
						},
						"description": "Set the workspaces in an Enterprise grid org that connect to a public or private channel."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The encoded `channel_id` to add or remove to workspaces."
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel."
										},
										{
											"key": "target_team_ids",
											"value": "<string>",
											"description": "A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide."
										},
										{
											"key": "org_channel",
											"value": "<boolean>",
											"description": "True if channel has to be converted to an org channel"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.setTeams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.setTeams"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The encoded `channel_id` to add or remove to workspaces."
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel."
										},
										{
											"key": "target_team_ids",
											"value": "<string>",
											"description": "A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide."
										},
										{
											"key": "org_channel",
											"value": "<boolean>",
											"description": "True if channel has to be converted to an org channel"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.setTeams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.setTeams"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin emoji add",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `admin.teams:write`"
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included."
								},
								{
									"key": "url",
									"value": "<string>",
									"description": "The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.emoji.add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.emoji.add"
							]
						},
						"description": "Add an emoji."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included."
										},
										{
											"key": "url",
											"value": "<string>",
											"description": "The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.add"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included."
										},
										{
											"key": "url",
											"value": "<string>",
											"description": "The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.add"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin emoji add Alias",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `admin.teams:write`"
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included."
								},
								{
									"key": "alias_for",
									"value": "<string>",
									"description": "The alias of the emoji."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.emoji.addAlias",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.emoji.addAlias"
							]
						},
						"description": "Add an emoji alias."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included."
										},
										{
											"key": "alias_for",
											"value": "<string>",
											"description": "The alias of the emoji."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.addAlias",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.addAlias"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included."
										},
										{
											"key": "alias_for",
											"value": "<string>",
											"description": "The alias of the emoji."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.addAlias",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.addAlias"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin emoji list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin.emoji.list?token=<string>&cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.emoji.list"
							],
							"query": [
								{
									"key": "token",
									"value": "<string>",
									"description": "(Required) Authentication token. Requires scope: `admin.teams:read`"
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive."
								}
							]
						},
						"description": "List emoji for an Enterprise Grid organization."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.list?token=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.list?token=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin conversations unarchive",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel_id",
									"value": "<string>",
									"description": "The channel to unarchive."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.conversations.unarchive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.conversations.unarchive"
							]
						},
						"description": "Unarchive a public or private channel."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to unarchive."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.unarchive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.unarchive"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel_id",
											"value": "<string>",
											"description": "The channel to unarchive."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.conversations.unarchive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.conversations.unarchive"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin emoji rename",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `admin.teams:write`"
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included."
								},
								{
									"key": "new_name",
									"value": "<string>",
									"description": "The new name of the emoji."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.emoji.rename",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.emoji.rename"
							]
						},
						"description": "Rename an emoji."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included."
										},
										{
											"key": "new_name",
											"value": "<string>",
											"description": "The new name of the emoji."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.rename",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.rename"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included."
										},
										{
											"key": "new_name",
											"value": "<string>",
											"description": "The new name of the emoji."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.rename",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.rename"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin emoji remove",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `admin.teams:write`"
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.emoji.remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.emoji.remove"
							]
						},
						"description": "Remove an emoji across an Enterprise Grid organization"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.remove"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.emoji.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.emoji.remove"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin invite Requests approve",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.invites:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "invite_request_id",
									"value": "<string>",
									"description": "ID of the request to invite."
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID for the workspace where the invite request was made."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.inviteRequests.approve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.inviteRequests.approve"
							]
						},
						"description": "Approve a workspace invite request."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.approve"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.approve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.approve"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin invite Requests approved list",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.invites:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.inviteRequests.approved.list?team_id=<string>&cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.inviteRequests.approved.list"
							],
							"query": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID for the workspace where the invite requests were made."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Value of the `next_cursor` field sent as part of the previous API response"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive"
								}
							]
						},
						"description": "List all approved workspace invite requests."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.approved.list?team_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.approved.list"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.approved.list?team_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.approved.list"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin invite Requests deny",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.invites:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "invite_request_id",
									"value": "<string>",
									"description": "ID of the request to invite."
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID for the workspace where the invite request was made."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.inviteRequests.deny",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.inviteRequests.deny"
							]
						},
						"description": "Deny a workspace invite request."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.deny",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.deny"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.deny",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.deny"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin invite Requests denied list",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.invites:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.inviteRequests.denied.list?team_id=<string>&cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.inviteRequests.denied.list"
							],
							"query": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID for the workspace where the invite requests were made."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Value of the `next_cursor` field sent as part of the previous api response"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive"
								}
							]
						},
						"description": "List all denied workspace invite requests."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.denied.list?team_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.denied.list"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.denied.list?team_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.denied.list"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin invite Requests list",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.invites:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.inviteRequests.list?team_id=<string>&cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.inviteRequests.list"
							],
							"query": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID for the workspace where the invite requests were made."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Value of the `next_cursor` field sent as part of the previous API response"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive"
								}
							]
						},
						"description": "List all pending workspace invite requests."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.list?team_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.list"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.invites:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.inviteRequests.list?team_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.inviteRequests.list"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams admins list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin.teams.admins.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.admins.list"
							],
							"query": [
								{
									"key": "token",
									"value": "<string>",
									"description": "(Required) Authentication token. Requires scope: `admin.teams:read`"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page."
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "List all of the admins on a given workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.teams.admins.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.admins.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.teams.admins.list?token=<string>&limit=<integer>&cursor=<string>&team_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.admins.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams create",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_domain",
									"value": "<string>",
									"description": "Team domain (for example, slacksoftballteam)."
								},
								{
									"key": "team_name",
									"value": "<string>",
									"description": "Team name (for example, Slack Softball Team)."
								},
								{
									"key": "team_description",
									"value": "<string>",
									"description": "Description for the team."
								},
								{
									"key": "team_discoverability",
									"value": "<string>",
									"description": "Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.teams.create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.create"
							]
						},
						"description": "Create an Enterprise team."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_domain",
											"value": "<string>",
											"description": "Team domain (for example, slacksoftballteam)."
										},
										{
											"key": "team_name",
											"value": "<string>",
											"description": "Team name (for example, Slack Softball Team)."
										},
										{
											"key": "team_description",
											"value": "<string>",
											"description": "Description for the team."
										},
										{
											"key": "team_discoverability",
											"value": "<string>",
											"description": "Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_domain",
											"value": "<string>",
											"description": "Team domain (for example, slacksoftballteam)."
										},
										{
											"key": "team_name",
											"value": "<string>",
											"description": "Team name (for example, Slack Softball Team)."
										},
										{
											"key": "team_description",
											"value": "<string>",
											"description": "Description for the team."
										},
										{
											"key": "team_discoverability",
											"value": "<string>",
											"description": "Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams list",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.teams:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.teams.list?limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.list"
							],
							"query": [
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Must be between 1 - 100 both inclusive."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page."
								}
							]
						},
						"description": "List all teams on an Enterprise organization"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.teams.list?limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.list"
									],
									"query": [
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.teams.list?limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.list"
									],
									"query": [
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams owners list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin.teams.owners.list?token=<string>&team_id=<string>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.owners.list"
							],
							"query": [
								{
									"key": "token",
									"value": "<string>",
									"description": "(Required) Authentication token. Requires scope: `admin.teams:read`"
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Must be between 1 - 1000 both inclusive."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page."
								}
							]
						},
						"description": "List all of the owners on a given workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.teams.owners.list?token=<string>&team_id=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.owners.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.teams.owners.list?token=<string>&team_id=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.owners.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams settings info",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.teams:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.teams.settings.info?team_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.settings.info"
							],
							"query": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "Fetch information about settings in a workspace"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.info?team_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.info"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.info?team_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.info"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams settings set Description",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID for the workspace to set the description for."
								},
								{
									"key": "description",
									"value": "<string>",
									"description": "The new description for the workspace."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.teams.settings.setDescription",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.settings.setDescription"
							]
						},
						"description": "Set the description of a given workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID for the workspace to set the description for."
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "The new description for the workspace."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setDescription",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setDescription"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID for the workspace to set the description for."
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "The new description for the workspace."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setDescription",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setDescription"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams settings set Discoverability",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The ID of the workspace to set discoverability on."
								},
								{
									"key": "discoverability",
									"value": "<string>",
									"description": "This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.teams.settings.setDiscoverability",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.settings.setDiscoverability"
							]
						},
						"description": "An API method that allows admins to set the discoverability of a given workspace"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID of the workspace to set discoverability on."
										},
										{
											"key": "discoverability",
											"value": "<string>",
											"description": "This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setDiscoverability",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setDiscoverability"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID of the workspace to set discoverability on."
										},
										{
											"key": "discoverability",
											"value": "<string>",
											"description": "This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setDiscoverability",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setDiscoverability"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams settings set Icon",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `admin.teams:write`"
								},
								{
									"key": "image_url",
									"value": "<string>",
									"description": "Image URL for the icon"
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID for the workspace to set the icon for."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.teams.settings.setIcon",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.settings.setIcon"
							]
						},
						"description": "Sets the icon of a workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "image_url",
											"value": "<string>",
											"description": "Image URL for the icon"
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID for the workspace to set the icon for."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setIcon",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setIcon"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "image_url",
											"value": "<string>",
											"description": "Image URL for the icon"
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID for the workspace to set the icon for."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setIcon",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setIcon"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams settings set Name",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID for the workspace to set the name for."
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "The new name of the workspace."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.teams.settings.setName",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.settings.setName"
							]
						},
						"description": "Set the name of a given workspace."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID for the workspace to set the name for."
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The new name of the workspace."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setName",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setName"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID for the workspace to set the name for."
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "The new name of the workspace."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setName",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setName"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin teams settings set Default Channels",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `admin.teams:write`"
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID for the workspace to set the default channel for."
								},
								{
									"key": "channel_ids",
									"value": "<string>",
									"description": "An array of channel IDs."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.teams.settings.setDefaultChannels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.teams.settings.setDefaultChannels"
							]
						},
						"description": "Set the default channels of a workspace."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID for the workspace to set the default channel for."
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "An array of channel IDs."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setDefaultChannels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setDefaultChannels"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `admin.teams:write`"
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID for the workspace to set the default channel for."
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "An array of channel IDs."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.teams.settings.setDefaultChannels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.teams.settings.setDefaultChannels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin usergroups add Channels",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.usergroups:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "usergroup_id",
									"value": "<string>",
									"description": "ID of the IDP group to add default channels for."
								},
								{
									"key": "channel_ids",
									"value": "<string>",
									"description": "Comma separated string of channel IDs."
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The workspace to add default channels in."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.usergroups.addChannels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.usergroups.addChannels"
							]
						},
						"description": "Add one or more default channels to an IDP group."
					},
					"response": [
						{
							"name": "Typical error response if the token provided is not associated with an Org Admin or Owner",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup_id",
											"value": "<string>",
											"description": "ID of the IDP group to add default channels for."
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "Comma separated string of channel IDs."
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace to add default channels in."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.usergroups.addChannels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.usergroups.addChannels"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup_id",
											"value": "<string>",
											"description": "ID of the IDP group to add default channels for."
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "Comma separated string of channel IDs."
										},
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The workspace to add default channels in."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.usergroups.addChannels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.usergroups.addChannels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin usergroups list Channels",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.usergroups:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.usergroups.listChannels?usergroup_id=<string>&team_id=<string>&include_num_members=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.usergroups.listChannels"
							],
							"query": [
								{
									"key": "usergroup_id",
									"value": "<string>",
									"description": "(Required) ID of the IDP group to list default channels for."
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID of the the workspace."
								},
								{
									"key": "include_num_members",
									"value": "<boolean>",
									"description": "Flag to include or exclude the count of members per channel."
								}
							]
						},
						"description": "List the channels linked to an org-level IDP group (user group)."
					},
					"response": [
						{
							"name": "Typical error response if the token provided is not associated with an Org Admin or Owner",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.usergroups:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.usergroups.listChannels?usergroup_id=<string>&team_id=<string>&include_num_members=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.usergroups.listChannels"
									],
									"query": [
										{
											"key": "usergroup_id",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "include_num_members",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.usergroups:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.usergroups.listChannels?usergroup_id=<string>&team_id=<string>&include_num_members=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.usergroups.listChannels"
									],
									"query": [
										{
											"key": "usergroup_id",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "include_num_members",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin usergroups add Teams",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "usergroup_id",
									"value": "<string>",
									"description": "An encoded usergroup (IDP Group) ID."
								},
								{
									"key": "team_ids",
									"value": "<string>",
									"description": "A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token."
								},
								{
									"key": "auto_provision",
									"value": "<boolean>",
									"description": "When `true`, this method automatically creates new workspace accounts for the IDP group members."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.usergroups.addTeams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.usergroups.addTeams"
							]
						},
						"description": "Associate one or more default workspaces with an organization-wide IDP group."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup_id",
											"value": "<string>",
											"description": "An encoded usergroup (IDP Group) ID."
										},
										{
											"key": "team_ids",
											"value": "<string>",
											"description": "A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token."
										},
										{
											"key": "auto_provision",
											"value": "<boolean>",
											"description": "When `true`, this method automatically creates new workspace accounts for the IDP group members."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.usergroups.addTeams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.usergroups.addTeams"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.teams:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup_id",
											"value": "<string>",
											"description": "An encoded usergroup (IDP Group) ID."
										},
										{
											"key": "team_ids",
											"value": "<string>",
											"description": "A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token."
										},
										{
											"key": "auto_provision",
											"value": "<boolean>",
											"description": "When `true`, this method automatically creates new workspace accounts for the IDP group members."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.usergroups.addTeams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.usergroups.addTeams"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin users invite",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The ID (`T1234`) of the workspace."
								},
								{
									"key": "email",
									"value": "<string>",
									"description": "The email address of the person to invite."
								},
								{
									"key": "channel_ids",
									"value": "<string>",
									"description": "A comma-separated list of `channel_id`s for this user to join. At least one channel is required."
								},
								{
									"key": "custom_message",
									"value": "<string>",
									"description": "An optional message to send to the user in the invite email."
								},
								{
									"key": "real_name",
									"value": "<string>",
									"description": "Full name of the user."
								},
								{
									"key": "resend",
									"value": "<boolean>",
									"description": "Allow this invite to be resent in the future if a user has not signed up yet. (default: false)"
								},
								{
									"key": "is_restricted",
									"value": "<boolean>",
									"description": "Is this user a multi-channel guest user? (default: false)"
								},
								{
									"key": "is_ultra_restricted",
									"value": "<boolean>",
									"description": "Is this user a single channel guest user? (default: false)"
								},
								{
									"key": "guest_expiration_ts",
									"value": "<string>",
									"description": "Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.users.invite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.invite"
							]
						},
						"description": "Invite a user to a workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "email",
											"value": "<string>",
											"description": "The email address of the person to invite."
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "A comma-separated list of `channel_id`s for this user to join. At least one channel is required."
										},
										{
											"key": "custom_message",
											"value": "<string>",
											"description": "An optional message to send to the user in the invite email."
										},
										{
											"key": "real_name",
											"value": "<string>",
											"description": "Full name of the user."
										},
										{
											"key": "resend",
											"value": "<boolean>",
											"description": "Allow this invite to be resent in the future if a user has not signed up yet. (default: false)"
										},
										{
											"key": "is_restricted",
											"value": "<boolean>",
											"description": "Is this user a multi-channel guest user? (default: false)"
										},
										{
											"key": "is_ultra_restricted",
											"value": "<boolean>",
											"description": "Is this user a single channel guest user? (default: false)"
										},
										{
											"key": "guest_expiration_ts",
											"value": "<string>",
											"description": "Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.invite",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.invite"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "email",
											"value": "<string>",
											"description": "The email address of the person to invite."
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "A comma-separated list of `channel_id`s for this user to join. At least one channel is required."
										},
										{
											"key": "custom_message",
											"value": "<string>",
											"description": "An optional message to send to the user in the invite email."
										},
										{
											"key": "real_name",
											"value": "<string>",
											"description": "Full name of the user."
										},
										{
											"key": "resend",
											"value": "<boolean>",
											"description": "Allow this invite to be resent in the future if a user has not signed up yet. (default: false)"
										},
										{
											"key": "is_restricted",
											"value": "<boolean>",
											"description": "Is this user a multi-channel guest user? (default: false)"
										},
										{
											"key": "is_ultra_restricted",
											"value": "<boolean>",
											"description": "Is this user a single channel guest user? (default: false)"
										},
										{
											"key": "guest_expiration_ts",
											"value": "<string>",
											"description": "Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.invite",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.invite"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin usergroups remove Channels",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.usergroups:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "usergroup_id",
									"value": "<string>",
									"description": "ID of the IDP Group"
								},
								{
									"key": "channel_ids",
									"value": "<string>",
									"description": "Comma-separated string of channel IDs"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.usergroups.removeChannels",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.usergroups.removeChannels"
							]
						},
						"description": "Remove one or more default channels from an org-level IDP group (user group)."
					},
					"response": [
						{
							"name": "Typical error response if the token provided is not associated with an Org Admin or Owner",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup_id",
											"value": "<string>",
											"description": "ID of the IDP Group"
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "Comma-separated string of channel IDs"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.usergroups.removeChannels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.usergroups.removeChannels"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup_id",
											"value": "<string>",
											"description": "ID of the IDP Group"
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "Comma-separated string of channel IDs"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.usergroups.removeChannels",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.usergroups.removeChannels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin users list",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin.users.list?team_id=<string>&cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.list"
							],
							"query": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "(Required) The ID (`T1234`) of the workspace."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Set `cursor` to `next_cursor` returned by the previous call to list items in the next page."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "Limit for how many users to be retrieved per page"
								}
							]
						},
						"description": "List users on a workspace"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.users.list?team_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.list"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin.users.list?team_id=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.list"
									],
									"query": [
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin users session invalidate",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "ID of the team that the session belongs to"
								},
								{
									"key": "session_id",
									"value": "<integer>"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.users.session.invalidate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.session.invalidate"
							]
						},
						"description": "Invalidate a single session for a user by session_id"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID of the team that the session belongs to"
										},
										{
											"key": "session_id",
											"value": "<integer>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.session.invalidate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.session.invalidate"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "ID of the team that the session belongs to"
										},
										{
											"key": "session_id",
											"value": "<integer>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.session.invalidate",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.session.invalidate"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin users assign",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The ID (`T1234`) of the workspace."
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "The ID of the user to add to the workspace."
								},
								{
									"key": "is_restricted",
									"value": "<boolean>",
									"description": "True if user should be added to the workspace as a guest."
								},
								{
									"key": "is_ultra_restricted",
									"value": "<boolean>",
									"description": "True if user should be added to the workspace as a single-channel guest."
								},
								{
									"key": "channel_ids",
									"value": "<string>",
									"description": "Comma separated values of channel IDs to add user in the new workspace."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.users.assign",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.assign"
							]
						},
						"description": "Add an Enterprise user to a workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to add to the workspace."
										},
										{
											"key": "is_restricted",
											"value": "<boolean>",
											"description": "True if user should be added to the workspace as a guest."
										},
										{
											"key": "is_ultra_restricted",
											"value": "<boolean>",
											"description": "True if user should be added to the workspace as a single-channel guest."
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "Comma separated values of channel IDs to add user in the new workspace."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.assign",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.assign"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to add to the workspace."
										},
										{
											"key": "is_restricted",
											"value": "<boolean>",
											"description": "True if user should be added to the workspace as a guest."
										},
										{
											"key": "is_ultra_restricted",
											"value": "<boolean>",
											"description": "True if user should be added to the workspace as a single-channel guest."
										},
										{
											"key": "channel_ids",
											"value": "<string>",
											"description": "Comma separated values of channel IDs to add user in the new workspace."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.assign",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.assign"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin users remove",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The ID (`T1234`) of the workspace."
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "The ID of the user to remove."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.users.remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.remove"
							]
						},
						"description": "Remove a user from a workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to remove."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.remove"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to remove."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.remove"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin users set Regular",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The ID (`T1234`) of the workspace."
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "The ID of the user to designate as a regular user."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.users.setRegular",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.setRegular"
							]
						},
						"description": "Set an existing guest user, admin user, or owner to be a regular user."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to designate as a regular user."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.setRegular",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.setRegular"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to designate as a regular user."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.setRegular",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.setRegular"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin users set Admin",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The ID (`T1234`) of the workspace."
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "The ID of the user to designate as an admin."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.users.setAdmin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.setAdmin"
							]
						},
						"description": "Set an existing guest, regular user, or owner to be an admin user."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to designate as an admin."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.setAdmin",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.setAdmin"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to designate as an admin."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.setAdmin",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.setAdmin"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "admin users set Expiration",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "team_id",
									"value": "<string>",
									"description": "The ID (`T1234`) of the workspace."
								},
								{
									"key": "user_id",
									"value": "<string>",
									"description": "The ID of the user to set an expiration for."
								},
								{
									"key": "expiration_ts",
									"value": "<integer>",
									"description": "Timestamp when guest account should be disabled."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/admin.users.setExpiration",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin.users.setExpiration"
							]
						},
						"description": "Set an expiration for a guest user"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to set an expiration for."
										},
										{
											"key": "expiration_ts",
											"value": "<integer>",
											"description": "Timestamp when guest account should be disabled."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.setExpiration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.setExpiration"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `admin.users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "team_id",
											"value": "<string>",
											"description": "The ID (`T1234`) of the workspace."
										},
										{
											"key": "user_id",
											"value": "<string>",
											"description": "The ID of the user to set an expiration for."
										},
										{
											"key": "expiration_ts",
											"value": "<integer>",
											"description": "Timestamp when guest account should be disabled."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/admin.users.setExpiration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin.users.setExpiration"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				}
			],
			"description": "Use approval and provisioning APIs to help Slack Admins work more effectively.\n\nSecure your organization with auditing and session management APIs.\n\nThe following list of features and APIs are available in Enterprise Grid workspaces only.\n\nThese endpoints require a *User Token* with resource-specific `admin`  [scopes](https://api.slack.com/scopes/).\n\nFor more information, see [Apps for Slack Admins](https://api.slack.com/admins)"
		},
		{
			"name": "Web API",
			"item": [
				{
					"name": "api test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api.test",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api.test"
							],
							"query": [
								{
									"key": "error",
									"value": "<string>",
									"description": "Error response to return",
									"disabled": true
								},
								{
									"key": "foo",
									"value": "<string>",
									"description": "example property to return",
									"disabled": true
								}
							]
						},
						"description": "Checks API calling code."
					},
					"response": [
						{
							"name": "Standard success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api.test?error=<string>&foo=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api.test"
									],
									"query": [
										{
											"key": "error",
											"value": "<string>"
										},
										{
											"key": "foo",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Artificial error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api.test?error=<string>&foo=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api.test"
									],
									"query": [
										{
											"key": "error",
											"value": "<string>"
										},
										{
											"key": "foo",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "apps permissions info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apps.permissions.info",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apps.permissions.info"
							]
						},
						"description": "Returns list of permissions this app has on a team."
					},
					"response": [
						{
							"name": "Standard failure response when used with an invalid token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.info?token=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Standard success response when used with a user token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.info?token=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"info\": {\n  \"team\": {\n   \"scopes\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"resources\": {\n    \"wildcard\": \"<boolean>\"\n   }\n  },\n  \"channel\": {\n   \"resources\": {\n    \"ids\": [],\n    \"wildcard\": \"<boolean>\"\n   },\n   \"scopes\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"group\": {\n   \"resources\": {\n    \"ids\": [],\n    \"wildcard\": \"<boolean>\"\n   },\n   \"scopes\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"mpim\": {\n   \"resources\": {\n    \"ids\": [],\n    \"wildcard\": \"<boolean>\"\n   },\n   \"scopes\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"im\": {\n   \"resources\": {\n    \"ids\": [],\n    \"wildcard\": \"<boolean>\"\n   },\n   \"scopes\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"app_home\": {\n   \"resources\": {\n    \"ids\": [],\n    \"wildcard\": \"<boolean>\"\n   },\n   \"scopes\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  }\n }\n}"
						}
					]
				},
				{
					"name": "apps event authorizations list",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `authorizations:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/apps.event.authorizations.list?event_context=<string>&cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apps.event.authorizations.list"
							],
							"query": [
								{
									"key": "event_context",
									"value": "<string>",
									"description": "(Required) "
								},
								{
									"key": "cursor",
									"value": "<string>"
								},
								{
									"key": "limit",
									"value": "<integer>"
								}
							]
						},
						"description": "Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `authorizations:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.event.authorizations.list?event_context=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.event.authorizations.list"
									],
									"query": [
										{
											"key": "event_context",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `authorizations:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.event.authorizations.list?event_context=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.event.authorizations.list"
									],
									"query": [
										{
											"key": "event_context",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "apps permissions request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apps.permissions.request?scopes=<string>&trigger_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apps.permissions.request"
							],
							"query": [
								{
									"key": "scopes",
									"value": "<string>",
									"description": "(Required) A comma separated list of scopes to request for"
								},
								{
									"key": "trigger_id",
									"value": "<string>",
									"description": "(Required) Token used to trigger the permissions API"
								}
							]
						},
						"description": "Allows an app to request additional scopes"
					},
					"response": [
						{
							"name": "Standard failure response when trigger_id is invalid",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.request?token=<string>&scopes=<string>&trigger_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.request"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "scopes",
											"value": "<string>"
										},
										{
											"key": "trigger_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Standard success response when used with a user token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.request?token=<string>&scopes=<string>&trigger_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.request"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "scopes",
											"value": "<string>"
										},
										{
											"key": "trigger_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "apps permissions resources list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apps.permissions.resources.list?cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apps.permissions.resources.list"
							],
							"query": [
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return."
								}
							]
						},
						"description": "Returns list of resource grants this app has on a team."
					},
					"response": [
						{
							"name": "Typical successful paginated response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.resources.list?token=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.resources.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"resources\": [\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"type\": \"<string>\"\n  }\n ],\n \"response_metadata\": {\n  \"next_cursor\": \"<string>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.resources.list?token=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.resources.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "apps permissions scopes list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apps.permissions.scopes.list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apps.permissions.scopes.list"
							]
						},
						"description": "Returns list of scopes this app has on a team."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.scopes.list?token=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.scopes.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical successful paginated response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.scopes.list?token=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.scopes.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"scopes\": {\n  \"app_home\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"channel\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"group\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"im\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"mpim\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"team\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"user\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n}"
						}
					]
				},
				{
					"name": "apps uninstall",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apps.uninstall?client_id=<string>&client_secret=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apps.uninstall"
							],
							"query": [
								{
									"key": "client_id",
									"value": "<string>",
									"description": "Issued when you created your application."
								},
								{
									"key": "client_secret",
									"value": "<string>",
									"description": "Issued when you created your application."
								}
							]
						},
						"description": "Uninstalls your app from a workspace."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.uninstall?token=<string>&client_id=<string>&client_secret=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.uninstall"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "client_id",
											"value": "<string>"
										},
										{
											"key": "client_secret",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.uninstall?token=<string>&client_id=<string>&client_secret=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.uninstall"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "client_id",
											"value": "<string>"
										},
										{
											"key": "client_secret",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "apps permissions users list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apps.permissions.users.list?cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apps.permissions.users.list"
							],
							"query": [
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return."
								}
							]
						},
						"description": "Returns list of user grants and corresponding scopes this app has on a team."
					},
					"response": [
						{
							"name": "Typical successful paginated response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.users.list?token=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.users.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.users.list?token=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.users.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "apps permissions users request",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/apps.permissions.users.request?scopes=<string>&trigger_id=<string>&user=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"apps.permissions.users.request"
							],
							"query": [
								{
									"key": "scopes",
									"value": "<string>",
									"description": "(Required) A comma separated list of user scopes to request for"
								},
								{
									"key": "trigger_id",
									"value": "<string>",
									"description": "(Required) Token used to trigger the request"
								},
								{
									"key": "user",
									"value": "<string>",
									"description": "(Required) The user this scope is being requested for"
								}
							]
						},
						"description": "Enables an app to trigger a permissions modal to grant an app access to a user access scope."
					},
					"response": [
						{
							"name": "Standard failure response when trigger_id is invalid",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.users.request?token=<string>&scopes=<string>&trigger_id=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.users.request"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "scopes",
											"value": "<string>"
										},
										{
											"key": "trigger_id",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Standard success response when used with a user token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/apps.permissions.users.request?token=<string>&scopes=<string>&trigger_id=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"apps.permissions.users.request"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "scopes",
											"value": "<string>"
										},
										{
											"key": "trigger_id",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "bots info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/bots.info?bot=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"bots.info"
							],
							"query": [
								{
									"key": "bot",
									"value": "<string>",
									"description": "Bot user to get info on"
								}
							]
						},
						"description": "Gets information about a bot user."
					},
					"response": [
						{
							"name": "When no bot can be found, it returns an error.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bots.info?token=<string>&bot=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bots.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "bot",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "When successful, returns bot info by bot ID.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/bots.info?token=<string>&bot=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bots.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "bot",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"bot\": {\n  \"id\": \"<string>\",\n  \"deleted\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"updated\": \"<integer>\",\n  \"app_id\": \"<string>\",\n  \"icons\": {\n   \"image_36\": \"<uri>\",\n   \"image_48\": \"<uri>\",\n   \"image_72\": \"<uri>\"\n  },\n  \"user_id\": \"<string>\"\n }\n}"
						}
					]
				},
				{
					"name": "auth revoke",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth.revoke?test=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth.revoke"
							],
							"query": [
								{
									"key": "test",
									"value": "<boolean>",
									"description": "Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked."
								}
							]
						},
						"description": "Revokes a token."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth.revoke?token=<string>&test=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth.revoke"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "test",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth.revoke?token=<string>&test=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth.revoke"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "test",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"revoked\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "auth test",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `none`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth.test",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth.test"
							]
						},
						"description": "Checks authentication & identity."
					},
					"response": [
						{
							"name": "Standard failure response when used with an invalid token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth.test",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth.test"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Standard success response when used with a user token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth.test",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth.test"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"url\": \"<string>\",\n \"team\": \"<string>\",\n \"user\": \"<string>\",\n \"team_id\": \"<string>\",\n \"user_id\": \"<string>\",\n \"bot_id\": \"<string>\",\n \"is_enterprise_install\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "calls add",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `calls:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "external_unique_id",
									"value": "<string>",
									"description": "An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service."
								},
								{
									"key": "join_url",
									"value": "<string>",
									"description": "The URL required for a client to join the Call."
								},
								{
									"key": "external_display_id",
									"value": "<string>",
									"description": "An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object."
								},
								{
									"key": "desktop_app_join_url",
									"value": "<string>",
									"description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
								},
								{
									"key": "date_start",
									"value": "<integer>",
									"description": "Call start time in UTC UNIX timestamp format"
								},
								{
									"key": "title",
									"value": "<string>",
									"description": "The name of the Call."
								},
								{
									"key": "created_by",
									"value": "<string>",
									"description": "The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required."
								},
								{
									"key": "users",
									"value": "<string>",
									"description": "The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/calls.add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calls.add"
							]
						},
						"description": "Registers a new Call."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "external_unique_id",
											"value": "<string>",
											"description": "An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service."
										},
										{
											"key": "join_url",
											"value": "<string>",
											"description": "The URL required for a client to join the Call."
										},
										{
											"key": "external_display_id",
											"value": "<string>",
											"description": "An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object."
										},
										{
											"key": "desktop_app_join_url",
											"value": "<string>",
											"description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
										},
										{
											"key": "date_start",
											"value": "<integer>",
											"description": "Call start time in UTC UNIX timestamp format"
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "The name of the Call."
										},
										{
											"key": "created_by",
											"value": "<string>",
											"description": "The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.add"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "external_unique_id",
											"value": "<string>",
											"description": "An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service."
										},
										{
											"key": "join_url",
											"value": "<string>",
											"description": "The URL required for a client to join the Call."
										},
										{
											"key": "external_display_id",
											"value": "<string>",
											"description": "An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object."
										},
										{
											"key": "desktop_app_join_url",
											"value": "<string>",
											"description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
										},
										{
											"key": "date_start",
											"value": "<integer>",
											"description": "Call start time in UTC UNIX timestamp format"
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "The name of the Call."
										},
										{
											"key": "created_by",
											"value": "<string>",
											"description": "The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.add"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "calls end",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `calls:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "<string>",
									"description": "`id` returned when registering the call using the [`calls.add`](/methods/calls.add) method."
								},
								{
									"key": "duration",
									"value": "<integer>",
									"description": "Call duration in seconds"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/calls.end",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calls.end"
							]
						},
						"description": "Ends a Call."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "<string>",
											"description": "`id` returned when registering the call using the [`calls.add`](/methods/calls.add) method."
										},
										{
											"key": "duration",
											"value": "<integer>",
											"description": "Call duration in seconds"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.end",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.end"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "<string>",
											"description": "`id` returned when registering the call using the [`calls.add`](/methods/calls.add) method."
										},
										{
											"key": "duration",
											"value": "<integer>",
											"description": "Call duration in seconds"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.end",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.end"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "calls participants add",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `calls:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "<string>",
									"description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
								},
								{
									"key": "users",
									"value": "<string>",
									"description": "The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/calls.participants.add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calls.participants.add"
							]
						},
						"description": "Registers new participants added to a Call."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "<string>",
											"description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.participants.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.participants.add"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "<string>",
											"description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.participants.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.participants.add"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "calls participants remove",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `calls:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "<string>",
									"description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
								},
								{
									"key": "users",
									"value": "<string>",
									"description": "The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/calls.participants.remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calls.participants.remove"
							]
						},
						"description": "Registers participants removed from a Call."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "<string>",
											"description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.participants.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.participants.remove"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "<string>",
											"description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users)."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.participants.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.participants.remove"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "calls info",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `calls:read`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/calls.info?id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calls.info"
							],
							"query": [
								{
									"key": "id",
									"value": "<string>",
									"description": "(Required) `id` of the Call returned by the [`calls.add`](/methods/calls.add) method."
								}
							]
						},
						"description": "Returns information about a Call."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/calls.info?id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.info"
									],
									"query": [
										{
											"key": "id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:read`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/calls.info?id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.info"
									],
									"query": [
										{
											"key": "id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "calls update",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `calls:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id",
									"value": "<string>",
									"description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
								},
								{
									"key": "title",
									"value": "<string>",
									"description": "The name of the Call."
								},
								{
									"key": "join_url",
									"value": "<string>",
									"description": "The URL required for a client to join the Call."
								},
								{
									"key": "desktop_app_join_url",
									"value": "<string>",
									"description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/calls.update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"calls.update"
							]
						},
						"description": "Updates information about a Call."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "<string>",
											"description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "The name of the Call."
										},
										{
											"key": "join_url",
											"value": "<string>",
											"description": "The URL required for a client to join the Call."
										},
										{
											"key": "desktop_app_join_url",
											"value": "<string>",
											"description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.update"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `calls:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "<string>",
											"description": "`id` returned by the [`calls.add`](/methods/calls.add) method."
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "The name of the Call."
										},
										{
											"key": "join_url",
											"value": "<string>",
											"description": "The URL required for a client to join the Call."
										},
										{
											"key": "desktop_app_join_url",
											"value": "<string>",
											"description": "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/calls.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"calls.update"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "chat delete",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `chat:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "ts",
									"value": "<number>",
									"description": "Timestamp of the message to be deleted."
								},
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel containing the message to be deleted."
								},
								{
									"key": "as_user",
									"value": "<boolean>",
									"description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/chat.delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.delete"
							]
						},
						"description": "Deletes a message."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "ts",
											"value": "<number>",
											"description": "Timestamp of the message to be deleted."
										},
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel containing the message to be deleted."
										},
										{
											"key": "as_user",
											"value": "<boolean>",
											"description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.delete"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "ts",
											"value": "<number>",
											"description": "Timestamp of the message to be deleted."
										},
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel containing the message to be deleted."
										},
										{
											"key": "as_user",
											"value": "<boolean>",
											"description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.delete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": \"<string>\",\n \"ts\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "chat delete Scheduled Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `chat:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "The channel the scheduled_message is posting to"
								},
								{
									"key": "scheduled_message_id",
									"value": "<string>",
									"description": "`scheduled_message_id` returned from call to chat.scheduleMessage"
								},
								{
									"key": "as_user",
									"value": "<boolean>",
									"description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/chat.deleteScheduledMessage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.deleteScheduledMessage"
							]
						},
						"description": "Deletes a pending scheduled message from the queue."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "The channel the scheduled_message is posting to"
										},
										{
											"key": "scheduled_message_id",
											"value": "<string>",
											"description": "`scheduled_message_id` returned from call to chat.scheduleMessage"
										},
										{
											"key": "as_user",
											"value": "<boolean>",
											"description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.deleteScheduledMessage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.deleteScheduledMessage"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response if no message is found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "The channel the scheduled_message is posting to"
										},
										{
											"key": "scheduled_message_id",
											"value": "<string>",
											"description": "`scheduled_message_id` returned from call to chat.scheduleMessage"
										},
										{
											"key": "as_user",
											"value": "<boolean>",
											"description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.deleteScheduledMessage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.deleteScheduledMessage"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "chat get Permalink",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/chat.getPermalink?channel=C2U86NC6M&message_ts=1612288689.000200",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.getPermalink"
							],
							"query": [
								{
									"key": "channel",
									"value": "C2U86NC6M",
									"description": "(Required) The ID of the conversation or channel containing the message"
								},
								{
									"key": "message_ts",
									"value": "1612288689.000200",
									"description": "(Required) A message's `ts` value, uniquely identifying it within a channel"
								}
							]
						},
						"description": "Retrieve a permalink URL for a specific extant message"
					},
					"response": [
						{
							"name": "Error response when channel cannot be found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/chat.getPermalink?token=<string>&channel=<string>&message_ts=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.getPermalink"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "message_ts",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Standard success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/chat.getPermalink?token=<string>&channel=<string>&message_ts=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.getPermalink"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "message_ts",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": \"<string>\",\n \"permalink\": \"<uri>\"\n}"
						}
					]
				},
				{
					"name": "chat post Ephemeral",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `chat:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name."
								},
								{
									"key": "user",
									"value": "<string>",
									"description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument."
								},
								{
									"key": "as_user",
									"value": "<boolean>",
									"description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false."
								},
								{
									"key": "attachments",
									"value": "<string>",
									"description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
								},
								{
									"key": "blocks",
									"value": "<string>",
									"description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
								},
								{
									"key": "icon_emoji",
									"value": "<string>",
									"description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
								},
								{
									"key": "icon_url",
									"value": "<string>",
									"description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
								},
								{
									"key": "link_names",
									"value": "<boolean>",
									"description": "Find and link channel names and usernames."
								},
								{
									"key": "parse",
									"value": "<string>",
									"description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
								},
								{
									"key": "text",
									"value": "<string>",
									"description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
								},
								{
									"key": "thread_ts",
									"value": "<string>",
									"description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread."
								},
								{
									"key": "username",
									"value": "<string>",
									"description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/chat.postEphemeral",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.postEphemeral"
							]
						},
						"description": "Sends an ephemeral message to a user in a channel."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name."
										},
										{
											"key": "user",
											"value": "<string>",
											"description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument."
										},
										{
											"key": "as_user",
											"value": "<boolean>",
											"description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false."
										},
										{
											"key": "attachments",
											"value": "<string>",
											"description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
										},
										{
											"key": "blocks",
											"value": "<string>",
											"description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
										},
										{
											"key": "icon_emoji",
											"value": "<string>",
											"description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
										},
										{
											"key": "icon_url",
											"value": "<string>",
											"description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
										},
										{
											"key": "link_names",
											"value": "<boolean>",
											"description": "Find and link channel names and usernames."
										},
										{
											"key": "parse",
											"value": "<string>",
											"description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
										},
										{
											"key": "thread_ts",
											"value": "<string>",
											"description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread."
										},
										{
											"key": "username",
											"value": "<string>",
											"description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.postEphemeral",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.postEphemeral"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"message_ts\": \"<string>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name."
										},
										{
											"key": "user",
											"value": "<string>",
											"description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument."
										},
										{
											"key": "as_user",
											"value": "<boolean>",
											"description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false."
										},
										{
											"key": "attachments",
											"value": "<string>",
											"description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
										},
										{
											"key": "blocks",
											"value": "<string>",
											"description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
										},
										{
											"key": "icon_emoji",
											"value": "<string>",
											"description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
										},
										{
											"key": "icon_url",
											"value": "<string>",
											"description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
										},
										{
											"key": "link_names",
											"value": "<boolean>",
											"description": "Find and link channel names and usernames."
										},
										{
											"key": "parse",
											"value": "<string>",
											"description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
										},
										{
											"key": "thread_ts",
											"value": "<string>",
											"description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread."
										},
										{
											"key": "username",
											"value": "<string>",
											"description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.postEphemeral",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.postEphemeral"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "chat post Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `chat:write`",
								"key": "token",
								"value": "{{bot_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
								},
								{
									"key": "as_user",
									"value": "<string>",
									"description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.",
									"disabled": true
								},
								{
									"key": "attachments",
									"value": "<string>",
									"description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
									"disabled": true
								},
								{
									"key": "blocks",
									"value": "<string>",
									"description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
									"disabled": true
								},
								{
									"key": "icon_emoji",
									"value": "<string>",
									"description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.",
									"disabled": true
								},
								{
									"key": "icon_url",
									"value": "<string>",
									"description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
									"disabled": true
								},
								{
									"key": "link_names",
									"value": "<boolean>",
									"description": "Find and link channel names and usernames.",
									"disabled": true
								},
								{
									"key": "mrkdwn",
									"value": "<boolean>",
									"description": "Disable Slack markup parsing by setting to `false`. Enabled by default.",
									"disabled": true
								},
								{
									"key": "parse",
									"value": "<string>",
									"description": "Change how messages are treated. Defaults to `none`. See [below](#formatting).",
									"disabled": true
								},
								{
									"key": "reply_broadcast",
									"value": "<boolean>",
									"description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.",
									"disabled": true
								},
								{
									"key": "text",
									"value": "test",
									"description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
								},
								{
									"key": "thread_ts",
									"value": "<string>",
									"description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.",
									"disabled": true
								},
								{
									"key": "unfurl_links",
									"value": "<boolean>",
									"description": "Pass true to enable unfurling of primarily text-based content.",
									"disabled": true
								},
								{
									"key": "unfurl_media",
									"value": "<boolean>",
									"description": "Pass false to disable unfurling of media content.",
									"disabled": true
								},
								{
									"key": "username",
									"value": "<string>",
									"description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/chat.postMessage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.postMessage"
							]
						},
						"description": "Sends a message to a channel."
					},
					"response": [
						{
							"name": "Typical error response if too many attachments are included",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
										},
										{
											"key": "as_user",
											"value": "<string>",
											"description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below."
										},
										{
											"key": "attachments",
											"value": "<string>",
											"description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
										},
										{
											"key": "blocks",
											"value": "<string>",
											"description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
										},
										{
											"key": "icon_emoji",
											"value": "<string>",
											"description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
										},
										{
											"key": "icon_url",
											"value": "<string>",
											"description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
										},
										{
											"key": "link_names",
											"value": "<boolean>",
											"description": "Find and link channel names and usernames."
										},
										{
											"key": "mrkdwn",
											"value": "<boolean>",
											"description": "Disable Slack markup parsing by setting to `false`. Enabled by default."
										},
										{
											"key": "parse",
											"value": "<string>",
											"description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
										},
										{
											"key": "reply_broadcast",
											"value": "<boolean>",
											"description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
										},
										{
											"key": "thread_ts",
											"value": "<string>",
											"description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
										},
										{
											"key": "unfurl_links",
											"value": "<boolean>",
											"description": "Pass true to enable unfurling of primarily text-based content."
										},
										{
											"key": "unfurl_media",
											"value": "<boolean>",
											"description": "Pass false to disable unfurling of media content."
										},
										{
											"key": "username",
											"value": "<string>",
											"description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.postMessage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.postMessage"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
										},
										{
											"key": "as_user",
											"value": "<string>",
											"description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below."
										},
										{
											"key": "attachments",
											"value": "<string>",
											"description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
										},
										{
											"key": "blocks",
											"value": "<string>",
											"description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
										},
										{
											"key": "icon_emoji",
											"value": "<string>",
											"description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."
										},
										{
											"key": "icon_url",
											"value": "<string>",
											"description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
										},
										{
											"key": "link_names",
											"value": "<boolean>",
											"description": "Find and link channel names and usernames."
										},
										{
											"key": "mrkdwn",
											"value": "<boolean>",
											"description": "Disable Slack markup parsing by setting to `false`. Enabled by default."
										},
										{
											"key": "parse",
											"value": "<string>",
											"description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."
										},
										{
											"key": "reply_broadcast",
											"value": "<boolean>",
											"description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
										},
										{
											"key": "thread_ts",
											"value": "<string>",
											"description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
										},
										{
											"key": "unfurl_links",
											"value": "<boolean>",
											"description": "Pass true to enable unfurling of primarily text-based content."
										},
										{
											"key": "unfurl_media",
											"value": "<boolean>",
											"description": "Pass false to disable unfurling of media content."
										},
										{
											"key": "username",
											"value": "<string>",
											"description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.postMessage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.postMessage"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": \"<string>\",\n \"ts\": \"<string>\",\n \"message\": {\n  \"text\": \"<string>\",\n  \"type\": \"<string>\",\n  \"ts\": \"<string>\",\n  \"attachments\": [\n   {\n    \"id\": \"<integer>\",\n    \"fallback\": \"<string>\",\n    \"image_bytes\": \"<integer>\",\n    \"image_height\": \"<integer>\",\n    \"image_url\": \"<string>\",\n    \"image_width\": \"<integer>\"\n   }\n  ],\n  \"blocks\": [\n   {\n    \"type\": \"<string>\"\n   },\n   {\n    \"type\": \"<string>\"\n   }\n  ],\n  \"bot_id\": {},\n  \"bot_profile\": {\n   \"id\": \"<string>\",\n   \"deleted\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"updated\": \"<integer>\",\n   \"app_id\": \"<string>\",\n   \"icons\": {\n    \"image_36\": \"<uri>\",\n    \"image_48\": \"<uri>\",\n    \"image_72\": \"<uri>\"\n   },\n   \"team_id\": \"<string>\"\n  },\n  \"client_msg_id\": \"<string>\",\n  \"comment\": {\n   \"id\": \"<string>\",\n   \"created\": \"<integer>\",\n   \"timestamp\": \"<integer>\",\n   \"user\": \"<string>\",\n   \"is_intro\": \"<boolean>\",\n   \"comment\": \"<string>\",\n   \"is_starred\": \"<boolean>\",\n   \"num_stars\": \"<integer>\",\n   \"pinned_info\": \"<object>\",\n   \"pinned_to\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"reactions\": [\n    {\n     \"name\": \"<string>\",\n     \"users\": [\n      \"<string>\",\n      \"<string>\"\n     ],\n     \"count\": \"<integer>\"\n    },\n    {\n     \"name\": \"<string>\",\n     \"users\": [\n      \"<string>\",\n      \"<string>\"\n     ],\n     \"count\": \"<integer>\"\n    }\n   ]\n  },\n  \"display_as_bot\": \"<boolean>\",\n  \"file\": {\n   \"channels\": [\n    \"<string>\"\n   ],\n   \"comments_count\": \"<integer>\",\n   \"created\": \"<integer>\",\n   \"date_delete\": \"<integer>\",\n   \"display_as_bot\": \"<boolean>\",\n   \"editable\": \"<boolean>\",\n   \"editor\": \"<string>\",\n   \"external_id\": \"<string>\",\n   \"external_type\": \"<string>\",\n   \"external_url\": \"<uri>\",\n   \"filetype\": \"<string>\",\n   \"groups\": [\n    \"<string>\"\n   ],\n   \"has_rich_preview\": \"<boolean>\",\n   \"id\": \"<string>\",\n   \"image_exif_rotation\": \"<integer>\",\n   \"ims\": [\n    \"<string>\"\n   ],\n   \"is_external\": \"<boolean>\",\n   \"is_public\": \"<boolean>\",\n   \"is_starred\": \"<boolean>\",\n   \"is_tombstoned\": \"<boolean>\",\n   \"last_editor\": \"<string>\",\n   \"mimetype\": \"<string>\",\n   \"mode\": \"<string>\",\n   \"name\": \"<string>\",\n   \"non_owner_editable\": \"<boolean>\",\n   \"num_stars\": \"<integer>\",\n   \"original_h\": \"<integer>\",\n   \"original_w\": \"<integer>\",\n   \"permalink\": \"<uri>\",\n   \"permalink_public\": \"<uri>\",\n   \"pinned_info\": \"<object>\",\n   \"pinned_to\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"pretty_type\": \"<string>\",\n   \"preview\": \"<string>\",\n   \"public_url_shared\": \"<boolean>\",\n   \"reactions\": [\n    {\n     \"name\": \"<string>\",\n     \"users\": [\n      \"<string>\",\n      \"<string>\"\n     ],\n     \"count\": \"<integer>\"\n    },\n    {\n     \"name\": \"<string>\",\n     \"users\": [\n      \"<string>\",\n      \"<string>\"\n     ],\n     \"count\": \"<integer>\"\n    }\n   ],\n   \"shares\": {\n    \"private\": {},\n    \"public\": {}\n   },\n   \"size\": \"<integer>\",\n   \"source_team\": \"<string>\",\n   \"state\": \"<string>\",\n   \"thumb_1024\": \"<uri>\",\n   \"thumb_1024_h\": \"<integer>\",\n   \"thumb_1024_w\": \"<integer>\",\n   \"thumb_160\": \"<uri>\",\n   \"thumb_360\": \"<uri>\",\n   \"thumb_360_h\": \"<integer>\",\n   \"thumb_360_w\": \"<integer>\",\n   \"thumb_480\": \"<uri>\",\n   \"thumb_480_h\": \"<integer>\",\n   \"thumb_480_w\": \"<integer>\",\n   \"thumb_64\": \"<uri>\",\n   \"thumb_720\": \"<uri>\",\n   \"thumb_720_h\": \"<integer>\",\n   \"thumb_720_w\": \"<integer>\",\n   \"thumb_80\": \"<uri>\",\n   \"thumb_800\": \"<uri>\",\n   \"thumb_800_h\": \"<integer>\",\n   \"thumb_800_w\": \"<integer>\",\n   \"thumb_960\": \"<uri>\",\n   \"thumb_960_h\": \"<integer>\",\n   \"thumb_960_w\": \"<integer>\",\n   \"thumb_tiny\": \"<string>\",\n   \"timestamp\": \"<integer>\",\n   \"title\": \"<string>\",\n   \"updated\": \"<integer>\",\n   \"url_private\": \"<uri>\",\n   \"url_private_download\": \"<uri>\",\n   \"user\": \"<string>\",\n   \"user_team\": \"<string>\",\n   \"username\": \"<string>\"\n  },\n  \"files\": [\n   {\n    \"channels\": [\n     \"<string>\"\n    ],\n    \"comments_count\": \"<integer>\",\n    \"created\": \"<integer>\",\n    \"date_delete\": \"<integer>\",\n    \"display_as_bot\": \"<boolean>\",\n    \"editable\": \"<boolean>\",\n    \"editor\": \"<string>\",\n    \"external_id\": \"<string>\",\n    \"external_type\": \"<string>\",\n    \"external_url\": \"<uri>\",\n    \"filetype\": \"<string>\",\n    \"groups\": [\n     \"<string>\"\n    ],\n    \"has_rich_preview\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"image_exif_rotation\": \"<integer>\",\n    \"ims\": [\n     \"<string>\"\n    ],\n    \"is_external\": \"<boolean>\",\n    \"is_public\": \"<boolean>\",\n    \"is_starred\": \"<boolean>\",\n    \"is_tombstoned\": \"<boolean>\",\n    \"last_editor\": \"<string>\",\n    \"mimetype\": \"<string>\",\n    \"mode\": \"<string>\",\n    \"name\": \"<string>\",\n    \"non_owner_editable\": \"<boolean>\",\n    \"num_stars\": \"<integer>\",\n    \"original_h\": \"<integer>\",\n    \"original_w\": \"<integer>\",\n    \"permalink\": \"<uri>\",\n    \"permalink_public\": \"<uri>\",\n    \"pinned_info\": \"<object>\",\n    \"pinned_to\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"pretty_type\": \"<string>\",\n    \"preview\": \"<string>\",\n    \"public_url_shared\": \"<boolean>\",\n    \"reactions\": [\n     {\n      \"name\": \"<string>\",\n      \"users\": [\n       \"<string>\",\n       \"<string>\"\n      ],\n      \"count\": \"<integer>\"\n     },\n     {\n      \"name\": \"<string>\",\n      \"users\": [\n       \"<string>\",\n       \"<string>\"\n      ],\n      \"count\": \"<integer>\"\n     }\n    ],\n    \"shares\": {\n     \"private\": {},\n     \"public\": {}\n    },\n    \"size\": \"<integer>\",\n    \"source_team\": \"<string>\",\n    \"state\": \"<string>\",\n    \"thumb_1024\": \"<uri>\",\n    \"thumb_1024_h\": \"<integer>\",\n    \"thumb_1024_w\": \"<integer>\",\n    \"thumb_160\": \"<uri>\",\n    \"thumb_360\": \"<uri>\",\n    \"thumb_360_h\": \"<integer>\",\n    \"thumb_360_w\": \"<integer>\",\n    \"thumb_480\": \"<uri>\",\n    \"thumb_480_h\": \"<integer>\",\n    \"thumb_480_w\": \"<integer>\",\n    \"thumb_64\": \"<uri>\",\n    \"thumb_720\": \"<uri>\",\n    \"thumb_720_h\": \"<integer>\",\n    \"thumb_720_w\": \"<integer>\",\n    \"thumb_80\": \"<uri>\",\n    \"thumb_800\": \"<uri>\",\n    \"thumb_800_h\": \"<integer>\",\n    \"thumb_800_w\": \"<integer>\",\n    \"thumb_960\": \"<uri>\",\n    \"thumb_960_h\": \"<integer>\",\n    \"thumb_960_w\": \"<integer>\",\n    \"thumb_tiny\": \"<string>\",\n    \"timestamp\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"updated\": \"<integer>\",\n    \"url_private\": \"<uri>\",\n    \"url_private_download\": \"<uri>\",\n    \"user\": \"<string>\",\n    \"user_team\": \"<string>\",\n    \"username\": \"<string>\"\n   }\n  ],\n  \"icons\": {\n   \"emoji\": \"<string>\",\n   \"image_64\": \"<uri>\"\n  },\n  \"inviter\": \"<string>\",\n  \"is_delayed_message\": \"<boolean>\",\n  \"is_intro\": \"<boolean>\",\n  \"is_starred\": \"<boolean>\",\n  \"last_read\": \"<string>\",\n  \"latest_reply\": \"<string>\",\n  \"name\": \"<string>\",\n  \"old_name\": \"<string>\",\n  \"parent_user_id\": \"<string>\",\n  \"permalink\": \"<uri>\",\n  \"pinned_to\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"purpose\": \"<string>\",\n  \"reactions\": [\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   }\n  ],\n  \"reply_count\": \"<integer>\",\n  \"reply_users\": [\n   \"<string>\"\n  ],\n  \"reply_users_count\": \"<integer>\",\n  \"source_team\": \"<string>\",\n  \"subscribed\": \"<boolean>\",\n  \"subtype\": \"<string>\",\n  \"team\": \"<string>\",\n  \"thread_ts\": \"<string>\",\n  \"topic\": \"<string>\",\n  \"unread_count\": \"<integer>\",\n  \"upload\": \"<boolean>\",\n  \"user\": \"<string>\",\n  \"user_profile\": {\n   \"avatar_hash\": \"<string>\",\n   \"image_72\": \"<uri>\",\n   \"first_name\": \"<string>\",\n   \"real_name\": \"<string>\",\n   \"display_name\": \"<string>\",\n   \"team\": \"<string>\",\n   \"name\": \"<string>\",\n   \"is_restricted\": \"<boolean>\",\n   \"is_ultra_restricted\": \"<boolean>\",\n   \"display_name_normalized\": \"<string>\",\n   \"real_name_normalized\": \"<string>\"\n  },\n  \"user_team\": \"<string>\",\n  \"username\": \"<string>\"\n }\n}"
						}
					]
				},
				{
					"name": "chat me Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `chat:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name."
								},
								{
									"key": "text",
									"value": "<string>",
									"description": "Text of the message to send."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/chat.meMessage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.meMessage"
							]
						},
						"description": "Share a me message into a channel."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "Text of the message to send."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.meMessage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.meMessage"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": \"<string>\",\n \"ts\": \"<string>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "Text of the message to send."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.meMessage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.meMessage"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "chat schedule Message",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `chat:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
								},
								{
									"key": "text",
									"value": "<string>",
									"description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
								},
								{
									"key": "post_at",
									"value": "<string>",
									"description": "Unix EPOCH timestamp of time in future to send the message."
								},
								{
									"key": "parse",
									"value": "<string>",
									"description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)."
								},
								{
									"key": "as_user",
									"value": "<boolean>",
									"description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)."
								},
								{
									"key": "link_names",
									"value": "<boolean>",
									"description": "Find and link channel names and usernames."
								},
								{
									"key": "attachments",
									"value": "<string>",
									"description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
								},
								{
									"key": "blocks",
									"value": "<string>",
									"description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
								},
								{
									"key": "unfurl_links",
									"value": "<boolean>",
									"description": "Pass true to enable unfurling of primarily text-based content."
								},
								{
									"key": "unfurl_media",
									"value": "<boolean>",
									"description": "Pass false to disable unfurling of media content."
								},
								{
									"key": "thread_ts",
									"value": "<number>",
									"description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
								},
								{
									"key": "reply_broadcast",
									"value": "<boolean>",
									"description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/chat.scheduleMessage",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.scheduleMessage"
							]
						},
						"description": "Schedules a message to be sent to a channel."
					},
					"response": [
						{
							"name": "Typical error response if the `post_at` is invalid (ex. in the past or too far into the future)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
										},
										{
											"key": "post_at",
											"value": "<string>",
											"description": "Unix EPOCH timestamp of time in future to send the message."
										},
										{
											"key": "parse",
											"value": "<string>",
											"description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)."
										},
										{
											"key": "as_user",
											"value": "<boolean>",
											"description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)."
										},
										{
											"key": "link_names",
											"value": "<boolean>",
											"description": "Find and link channel names and usernames."
										},
										{
											"key": "attachments",
											"value": "<string>",
											"description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
										},
										{
											"key": "blocks",
											"value": "<string>",
											"description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
										},
										{
											"key": "unfurl_links",
											"value": "<boolean>",
											"description": "Pass true to enable unfurling of primarily text-based content."
										},
										{
											"key": "unfurl_media",
											"value": "<boolean>",
											"description": "Pass false to disable unfurling of media content."
										},
										{
											"key": "thread_ts",
											"value": "<number>",
											"description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
										},
										{
											"key": "reply_broadcast",
											"value": "<boolean>",
											"description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.scheduleMessage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.scheduleMessage"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."
										},
										{
											"key": "post_at",
											"value": "<string>",
											"description": "Unix EPOCH timestamp of time in future to send the message."
										},
										{
											"key": "parse",
											"value": "<string>",
											"description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)."
										},
										{
											"key": "as_user",
											"value": "<boolean>",
											"description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)."
										},
										{
											"key": "link_names",
											"value": "<boolean>",
											"description": "Find and link channel names and usernames."
										},
										{
											"key": "attachments",
											"value": "<string>",
											"description": "A JSON-based array of structured attachments, presented as a URL-encoded string."
										},
										{
											"key": "blocks",
											"value": "<string>",
											"description": "A JSON-based array of structured blocks, presented as a URL-encoded string."
										},
										{
											"key": "unfurl_links",
											"value": "<boolean>",
											"description": "Pass true to enable unfurling of primarily text-based content."
										},
										{
											"key": "unfurl_media",
											"value": "<boolean>",
											"description": "Pass false to disable unfurling of media content."
										},
										{
											"key": "thread_ts",
											"value": "<number>",
											"description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."
										},
										{
											"key": "reply_broadcast",
											"value": "<boolean>",
											"description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.scheduleMessage",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.scheduleMessage"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": \"<string>\",\n \"post_at\": \"<integer>\",\n \"scheduled_message_id\": \"<string>\",\n \"message\": {\n  \"type\": \"<string>\",\n  \"text\": \"<string>\",\n  \"bot_id\": \"<string>\",\n  \"user\": \"<string>\",\n  \"team\": \"<string>\",\n  \"bot_profile\": {\n   \"id\": \"<string>\",\n   \"deleted\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"updated\": \"<integer>\",\n   \"app_id\": \"<string>\",\n   \"icons\": {\n    \"image_36\": \"<uri>\",\n    \"image_48\": \"<uri>\",\n    \"image_72\": \"<uri>\"\n   },\n   \"team_id\": \"<string>\"\n  },\n  \"username\": \"<string>\"\n }\n}"
						}
					]
				},
				{
					"name": "chat scheduled Messages list",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "Authentication token. Requires scope: `none`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/chat.scheduledMessages.list?channel=<string>&latest=<number>&oldest=<number>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.scheduledMessages.list"
							],
							"query": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "The channel of the scheduled messages"
								},
								{
									"key": "latest",
									"value": "<number>",
									"description": "A UNIX timestamp of the latest value in the time range"
								},
								{
									"key": "oldest",
									"value": "<number>",
									"description": "A UNIX timestamp of the oldest value in the time range"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "Maximum number of original entries to return."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from."
								}
							]
						},
						"description": "Returns a list of scheduled messages."
					},
					"response": [
						{
							"name": "Typical error response if the channel passed is invalid",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/chat.scheduledMessages.list?channel=<string>&latest=<number>&oldest=<number>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.scheduledMessages.list"
									],
									"query": [
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "latest",
											"value": "<number>"
										},
										{
											"key": "oldest",
											"value": "<number>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/chat.scheduledMessages.list?channel=<string>&latest=<number>&oldest=<number>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.scheduledMessages.list"
									],
									"query": [
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "latest",
											"value": "<number>"
										},
										{
											"key": "oldest",
											"value": "<number>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"scheduled_messages\": [\n  {\n   \"id\": \"<string>\",\n   \"channel_id\": \"<string>\",\n   \"post_at\": \"<integer>\",\n   \"date_created\": \"<integer>\",\n   \"text\": \"<string>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"channel_id\": \"<string>\",\n   \"post_at\": \"<integer>\",\n   \"date_created\": \"<integer>\",\n   \"text\": \"<string>\"\n  }\n ],\n \"response_metadata\": {\n  \"next_cursor\": \"<string>\"\n }\n}"
						}
					]
				},
				{
					"name": "chat unfurl",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `links:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel ID of the message"
								},
								{
									"key": "ts",
									"value": "<string>",
									"description": "Timestamp of the message to add unfurl behavior to."
								},
								{
									"key": "unfurls",
									"value": "<string>",
									"description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments."
								},
								{
									"key": "user_auth_message",
									"value": "<string>",
									"description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior"
								},
								{
									"key": "user_auth_required",
									"value": "<boolean>",
									"description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain"
								},
								{
									"key": "user_auth_url",
									"value": "<string>",
									"description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/chat.unfurl",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.unfurl"
							]
						},
						"description": "Provide custom unfurl behavior for user-posted URLs"
					},
					"response": [
						{
							"name": "Typical, minimal success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `links:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel ID of the message"
										},
										{
											"key": "ts",
											"value": "<string>",
											"description": "Timestamp of the message to add unfurl behavior to."
										},
										{
											"key": "unfurls",
											"value": "<string>",
											"description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments."
										},
										{
											"key": "user_auth_message",
											"value": "<string>",
											"description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior"
										},
										{
											"key": "user_auth_required",
											"value": "<boolean>",
											"description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain"
										},
										{
											"key": "user_auth_url",
											"value": "<string>",
											"description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.unfurl",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.unfurl"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `links:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel ID of the message"
										},
										{
											"key": "ts",
											"value": "<string>",
											"description": "Timestamp of the message to add unfurl behavior to."
										},
										{
											"key": "unfurls",
											"value": "<string>",
											"description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments."
										},
										{
											"key": "user_auth_message",
											"value": "<string>",
											"description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior"
										},
										{
											"key": "user_auth_required",
											"value": "<boolean>",
											"description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain"
										},
										{
											"key": "user_auth_url",
											"value": "<string>",
											"description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.unfurl",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.unfurl"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "chat update",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `chat:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel containing the message to be updated."
								},
								{
									"key": "ts",
									"value": "<string>",
									"description": "Timestamp of the message to be updated."
								},
								{
									"key": "as_user",
									"value": "<string>",
									"description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users."
								},
								{
									"key": "attachments",
									"value": "<string>",
									"description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field."
								},
								{
									"key": "blocks",
									"value": "<string>",
									"description": "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field."
								},
								{
									"key": "link_names",
									"value": "<string>",
									"description": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`."
								},
								{
									"key": "parse",
									"value": "<string>",
									"description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`."
								},
								{
									"key": "text",
									"value": "<string>",
									"description": "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/chat.update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"chat.update"
							]
						},
						"description": "Updates a message."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel containing the message to be updated."
										},
										{
											"key": "ts",
											"value": "<string>",
											"description": "Timestamp of the message to be updated."
										},
										{
											"key": "as_user",
											"value": "<string>",
											"description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users."
										},
										{
											"key": "attachments",
											"value": "<string>",
											"description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field."
										},
										{
											"key": "blocks",
											"value": "<string>",
											"description": "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field."
										},
										{
											"key": "link_names",
											"value": "<string>",
											"description": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`."
										},
										{
											"key": "parse",
											"value": "<string>",
											"description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.update"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": \"<string>\",\n \"ts\": \"<string>\",\n \"text\": \"<string>\",\n \"message\": {\n  \"text\": \"<string>\",\n  \"attachments\": [\n   \"<object>\",\n   \"<object>\"\n  ],\n  \"blocks\": \"<object>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `chat:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel containing the message to be updated."
										},
										{
											"key": "ts",
											"value": "<string>",
											"description": "Timestamp of the message to be updated."
										},
										{
											"key": "as_user",
											"value": "<string>",
											"description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users."
										},
										{
											"key": "attachments",
											"value": "<string>",
											"description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field."
										},
										{
											"key": "blocks",
											"value": "<string>",
											"description": "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field."
										},
										{
											"key": "link_names",
											"value": "<string>",
											"description": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`."
										},
										{
											"key": "parse",
											"value": "<string>",
											"description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`."
										},
										{
											"key": "text",
											"value": "<string>",
											"description": "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/chat.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"chat.update"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/conversations.info?channel=<string>&include_locale=<boolean>&include_num_members=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.info"
							],
							"query": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Conversation ID to learn more about"
								},
								{
									"key": "include_locale",
									"value": "<boolean>",
									"description": "Set this to `true` to receive the locale for this conversation. Defaults to `false`"
								},
								{
									"key": "include_num_members",
									"value": "<boolean>",
									"description": "Set to `true` to include the member count for the specified conversation. Defaults to `false`"
								}
							]
						},
						"description": "Retrieve information about a conversation."
					},
					"response": [
						{
							"name": "Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.info?token=<string>&channel=<string>&include_locale=<boolean>&include_num_members=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "include_locale",
											"value": "<boolean>"
										},
										{
											"key": "include_num_members",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": {}\n}"
						},
						{
							"name": "Typical error response when a channel cannot be found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.info?token=<string>&channel=<string>&include_locale=<boolean>&include_num_members=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "include_locale",
											"value": "<boolean>"
										},
										{
											"key": "include_num_members",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations archive",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "ID of conversation to archive"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.archive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.archive"
							]
						},
						"description": "Archives a conversation."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to archive"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.archive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.archive"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to archive"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.archive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.archive"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "conversations close",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Conversation to close."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.close",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.close"
							]
						},
						"description": "Closes a direct message or multi-person direct message."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Conversation to close."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.close",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.close"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Conversation to close."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.close",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.close"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"already_closed\": \"<boolean>\",\n \"no_op\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "conversations create",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "<string>",
									"description": "Name of the public or private channel to create"
								},
								{
									"key": "is_private",
									"value": "<boolean>",
									"description": "Create a private channel instead of a public one"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.create"
							]
						},
						"description": "Initiates a public or private channel-based conversation"
					},
					"response": [
						{
							"name": "Typical error response when name already in use",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "Name of the public or private channel to create"
										},
										{
											"key": "is_private",
											"value": "<boolean>",
											"description": "Create a private channel instead of a public one"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"detail\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						},
						{
							"name": "If successful, the command returns a rather stark [conversation object](/types/conversation)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "Name of the public or private channel to create"
										},
										{
											"key": "is_private",
											"value": "<boolean>",
											"description": "Create a private channel instead of a public one"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": {}\n}"
						}
					]
				},
				{
					"name": "conversations invite",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "The ID of the public or private channel to invite user(s) to."
								},
								{
									"key": "users",
									"value": "<string>",
									"description": "A comma separated list of user IDs. Up to 1000 users may be listed."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.invite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.invite"
							]
						},
						"description": "Invites users to a channel."
					},
					"response": [
						{
							"name": "Typical success response when an invitation is extended",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "The ID of the public or private channel to invite user(s) to."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "A comma separated list of user IDs. Up to 1000 users may be listed."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.invite",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.invite"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": {}\n}"
						},
						{
							"name": "Typical error response when an invite is attempted on a conversation type that does not support it",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "The ID of the public or private channel to invite user(s) to."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "A comma separated list of user IDs. Up to 1000 users may be listed."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.invite",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.invite"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"callstack\": \"<string>\",\n \"error\": \"<string>\",\n \"errors\": [\n  {\n   \"ok\": \"<boolean>\",\n   \"error\": \"<string>\",\n   \"user\": \"<string>\"\n  }\n ],\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations join",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `channels:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "ID of conversation to join"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.join",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.join"
							]
						},
						"description": "Joins an existing conversation."
					},
					"response": [
						{
							"name": "Typical error response if the conversation is archived and cannot be joined",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `channels:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to join"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.join",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.join"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `channels:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to join"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.join",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.join"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": {},\n \"response_metadata\": {\n  \"warnings\": [\n   \"<string>\"\n  ]\n },\n \"warning\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations history",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/conversations.history?channel=<string>&latest=<number>&oldest=<number>&inclusive=<boolean>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.history"
							],
							"query": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Conversation ID to fetch history for."
								},
								{
									"key": "latest",
									"value": "<number>",
									"description": "End of time range of messages to include in results."
								},
								{
									"key": "oldest",
									"value": "<number>",
									"description": "Start of time range of messages to include in results."
								},
								{
									"key": "inclusive",
									"value": "<boolean>",
									"description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
								}
							]
						},
						"description": "Fetches a conversation's history of messages and events."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.history?token=<string>&channel=<string>&latest=<number>&oldest=<number>&inclusive=<boolean>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.history"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "latest",
											"value": "<number>"
										},
										{
											"key": "oldest",
											"value": "<number>"
										},
										{
											"key": "inclusive",
											"value": "<boolean>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response containing a channel's messages",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.history?token=<string>&channel=<string>&latest=<number>&oldest=<number>&inclusive=<boolean>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.history"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "latest",
											"value": "<number>"
										},
										{
											"key": "oldest",
											"value": "<number>"
										},
										{
											"key": "inclusive",
											"value": "<boolean>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"messages\": [\n  {\n   \"text\": \"<string>\",\n   \"type\": \"<string>\",\n   \"ts\": \"<string>\",\n   \"attachments\": [\n    {\n     \"id\": \"<integer>\",\n     \"fallback\": \"<string>\",\n     \"image_bytes\": \"<integer>\",\n     \"image_height\": \"<integer>\",\n     \"image_url\": \"<string>\",\n     \"image_width\": \"<integer>\"\n    }\n   ],\n   \"blocks\": [\n    {\n     \"type\": \"<string>\"\n    },\n    {\n     \"type\": \"<string>\"\n    }\n   ],\n   \"bot_id\": {},\n   \"bot_profile\": {\n    \"id\": \"<string>\",\n    \"deleted\": \"<boolean>\",\n    \"name\": \"<string>\",\n    \"updated\": \"<integer>\",\n    \"app_id\": \"<string>\",\n    \"icons\": {\n     \"image_36\": \"<uri>\",\n     \"image_48\": \"<uri>\",\n     \"image_72\": \"<uri>\"\n    },\n    \"team_id\": \"<string>\"\n   },\n   \"client_msg_id\": \"<string>\",\n   \"comment\": {\n    \"id\": \"<string>\",\n    \"created\": \"<integer>\",\n    \"timestamp\": \"<integer>\",\n    \"user\": \"<string>\",\n    \"is_intro\": \"<boolean>\",\n    \"comment\": \"<string>\",\n    \"is_starred\": \"<boolean>\",\n    \"num_stars\": \"<integer>\",\n    \"pinned_info\": \"<object>\",\n    \"pinned_to\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"reactions\": [\n     {\n      \"name\": \"<string>\",\n      \"users\": [\n       \"<string>\",\n       \"<string>\"\n      ],\n      \"count\": \"<integer>\"\n     },\n     {\n      \"name\": \"<string>\",\n      \"users\": [\n       \"<string>\",\n       \"<string>\"\n      ],\n      \"count\": \"<integer>\"\n     }\n    ]\n   },\n   \"display_as_bot\": \"<boolean>\",\n   \"file\": {\n    \"channels\": [\n     \"<string>\"\n    ],\n    \"comments_count\": \"<integer>\",\n    \"created\": \"<integer>\",\n    \"date_delete\": \"<integer>\",\n    \"display_as_bot\": \"<boolean>\",\n    \"editable\": \"<boolean>\",\n    \"editor\": \"<string>\",\n    \"external_id\": \"<string>\",\n    \"external_type\": \"<string>\",\n    \"external_url\": \"<uri>\",\n    \"filetype\": \"<string>\",\n    \"groups\": [\n     \"<string>\"\n    ],\n    \"has_rich_preview\": \"<boolean>\",\n    \"id\": \"<string>\",\n    \"image_exif_rotation\": \"<integer>\",\n    \"ims\": [\n     \"<string>\"\n    ],\n    \"is_external\": \"<boolean>\",\n    \"is_public\": \"<boolean>\",\n    \"is_starred\": \"<boolean>\",\n    \"is_tombstoned\": \"<boolean>\",\n    \"last_editor\": \"<string>\",\n    \"mimetype\": \"<string>\",\n    \"mode\": \"<string>\",\n    \"name\": \"<string>\",\n    \"non_owner_editable\": \"<boolean>\",\n    \"num_stars\": \"<integer>\",\n    \"original_h\": \"<integer>\",\n    \"original_w\": \"<integer>\",\n    \"permalink\": \"<uri>\",\n    \"permalink_public\": \"<uri>\",\n    \"pinned_info\": \"<object>\",\n    \"pinned_to\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"pretty_type\": \"<string>\",\n    \"preview\": \"<string>\",\n    \"public_url_shared\": \"<boolean>\",\n    \"reactions\": [\n     {\n      \"name\": \"<string>\",\n      \"users\": [\n       \"<string>\",\n       \"<string>\"\n      ],\n      \"count\": \"<integer>\"\n     },\n     {\n      \"name\": \"<string>\",\n      \"users\": [\n       \"<string>\",\n       \"<string>\"\n      ],\n      \"count\": \"<integer>\"\n     }\n    ],\n    \"shares\": {\n     \"private\": {},\n     \"public\": {}\n    },\n    \"size\": \"<integer>\",\n    \"source_team\": \"<string>\",\n    \"state\": \"<string>\",\n    \"thumb_1024\": \"<uri>\",\n    \"thumb_1024_h\": \"<integer>\",\n    \"thumb_1024_w\": \"<integer>\",\n    \"thumb_160\": \"<uri>\",\n    \"thumb_360\": \"<uri>\",\n    \"thumb_360_h\": \"<integer>\",\n    \"thumb_360_w\": \"<integer>\",\n    \"thumb_480\": \"<uri>\",\n    \"thumb_480_h\": \"<integer>\",\n    \"thumb_480_w\": \"<integer>\",\n    \"thumb_64\": \"<uri>\",\n    \"thumb_720\": \"<uri>\",\n    \"thumb_720_h\": \"<integer>\",\n    \"thumb_720_w\": \"<integer>\",\n    \"thumb_80\": \"<uri>\",\n    \"thumb_800\": \"<uri>\",\n    \"thumb_800_h\": \"<integer>\",\n    \"thumb_800_w\": \"<integer>\",\n    \"thumb_960\": \"<uri>\",\n    \"thumb_960_h\": \"<integer>\",\n    \"thumb_960_w\": \"<integer>\",\n    \"thumb_tiny\": \"<string>\",\n    \"timestamp\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"updated\": \"<integer>\",\n    \"url_private\": \"<uri>\",\n    \"url_private_download\": \"<uri>\",\n    \"user\": \"<string>\",\n    \"user_team\": \"<string>\",\n    \"username\": \"<string>\"\n   },\n   \"files\": [\n    {\n     \"channels\": [\n      \"<string>\"\n     ],\n     \"comments_count\": \"<integer>\",\n     \"created\": \"<integer>\",\n     \"date_delete\": \"<integer>\",\n     \"display_as_bot\": \"<boolean>\",\n     \"editable\": \"<boolean>\",\n     \"editor\": \"<string>\",\n     \"external_id\": \"<string>\",\n     \"external_type\": \"<string>\",\n     \"external_url\": \"<uri>\",\n     \"filetype\": \"<string>\",\n     \"groups\": [\n      \"<string>\"\n     ],\n     \"has_rich_preview\": \"<boolean>\",\n     \"id\": \"<string>\",\n     \"image_exif_rotation\": \"<integer>\",\n     \"ims\": [\n      \"<string>\"\n     ],\n     \"is_external\": \"<boolean>\",\n     \"is_public\": \"<boolean>\",\n     \"is_starred\": \"<boolean>\",\n     \"is_tombstoned\": \"<boolean>\",\n     \"last_editor\": \"<string>\",\n     \"mimetype\": \"<string>\",\n     \"mode\": \"<string>\",\n     \"name\": \"<string>\",\n     \"non_owner_editable\": \"<boolean>\",\n     \"num_stars\": \"<integer>\",\n     \"original_h\": \"<integer>\",\n     \"original_w\": \"<integer>\",\n     \"permalink\": \"<uri>\",\n     \"permalink_public\": \"<uri>\",\n     \"pinned_info\": \"<object>\",\n     \"pinned_to\": [\n      \"<string>\",\n      \"<string>\"\n     ],\n     \"pretty_type\": \"<string>\",\n     \"preview\": \"<string>\",\n     \"public_url_shared\": \"<boolean>\",\n     \"reactions\": [\n      {\n       \"name\": \"<string>\",\n       \"users\": [\n        \"<string>\",\n        \"<string>\"\n       ],\n       \"count\": \"<integer>\"\n      },\n      {\n       \"name\": \"<string>\",\n       \"users\": [\n        \"<string>\",\n        \"<string>\"\n       ],\n       \"count\": \"<integer>\"\n      }\n     ],\n     \"shares\": {\n      \"private\": {},\n      \"public\": {}\n     },\n     \"size\": \"<integer>\",\n     \"source_team\": \"<string>\",\n     \"state\": \"<string>\",\n     \"thumb_1024\": \"<uri>\",\n     \"thumb_1024_h\": \"<integer>\",\n     \"thumb_1024_w\": \"<integer>\",\n     \"thumb_160\": \"<uri>\",\n     \"thumb_360\": \"<uri>\",\n     \"thumb_360_h\": \"<integer>\",\n     \"thumb_360_w\": \"<integer>\",\n     \"thumb_480\": \"<uri>\",\n     \"thumb_480_h\": \"<integer>\",\n     \"thumb_480_w\": \"<integer>\",\n     \"thumb_64\": \"<uri>\",\n     \"thumb_720\": \"<uri>\",\n     \"thumb_720_h\": \"<integer>\",\n     \"thumb_720_w\": \"<integer>\",\n     \"thumb_80\": \"<uri>\",\n     \"thumb_800\": \"<uri>\",\n     \"thumb_800_h\": \"<integer>\",\n     \"thumb_800_w\": \"<integer>\",\n     \"thumb_960\": \"<uri>\",\n     \"thumb_960_h\": \"<integer>\",\n     \"thumb_960_w\": \"<integer>\",\n     \"thumb_tiny\": \"<string>\",\n     \"timestamp\": \"<integer>\",\n     \"title\": \"<string>\",\n     \"updated\": \"<integer>\",\n     \"url_private\": \"<uri>\",\n     \"url_private_download\": \"<uri>\",\n     \"user\": \"<string>\",\n     \"user_team\": \"<string>\",\n     \"username\": \"<string>\"\n    }\n   ],\n   \"icons\": {\n    \"emoji\": \"<string>\",\n    \"image_64\": \"<uri>\"\n   },\n   \"inviter\": \"<string>\",\n   \"is_delayed_message\": \"<boolean>\",\n   \"is_intro\": \"<boolean>\",\n   \"is_starred\": \"<boolean>\",\n   \"last_read\": \"<string>\",\n   \"latest_reply\": \"<string>\",\n   \"name\": \"<string>\",\n   \"old_name\": \"<string>\",\n   \"parent_user_id\": \"<string>\",\n   \"permalink\": \"<uri>\",\n   \"pinned_to\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"purpose\": \"<string>\",\n   \"reactions\": [\n    {\n     \"name\": \"<string>\",\n     \"users\": [\n      \"<string>\",\n      \"<string>\"\n     ],\n     \"count\": \"<integer>\"\n    },\n    {\n     \"name\": \"<string>\",\n     \"users\": [\n      \"<string>\",\n      \"<string>\"\n     ],\n     \"count\": \"<integer>\"\n    }\n   ],\n   \"reply_count\": \"<integer>\",\n   \"reply_users\": [\n    \"<string>\"\n   ],\n   \"reply_users_count\": \"<integer>\",\n   \"source_team\": \"<string>\",\n   \"subscribed\": \"<boolean>\",\n   \"subtype\": \"<string>\",\n   \"team\": \"<string>\",\n   \"thread_ts\": \"<string>\",\n   \"topic\": \"<string>\",\n   \"unread_count\": \"<integer>\",\n   \"upload\": \"<boolean>\",\n   \"user\": \"<string>\",\n   \"user_profile\": {\n    \"avatar_hash\": \"<string>\",\n    \"image_72\": \"<uri>\",\n    \"first_name\": \"<string>\",\n    \"real_name\": \"<string>\",\n    \"display_name\": \"<string>\",\n    \"team\": \"<string>\",\n    \"name\": \"<string>\",\n    \"is_restricted\": \"<boolean>\",\n    \"is_ultra_restricted\": \"<boolean>\",\n    \"display_name_normalized\": \"<string>\",\n    \"real_name_normalized\": \"<string>\"\n   },\n   \"user_team\": \"<string>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"has_more\": \"<boolean>\",\n \"pin_count\": \"<integer>\",\n \"channel_actions_ts\": {},\n \"channel_actions_count\": \"<integer>\"\n}"
						}
					]
				},
				{
					"name": "conversations open",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead."
								},
								{
									"key": "users",
									"value": "<string>",
									"description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`."
								},
								{
									"key": "return_im",
									"value": "<boolean>",
									"description": "Boolean, indicates you want the full IM channel definition in the response."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.open",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.open"
							]
						},
						"description": "Opens or resumes a direct message or multi-person direct message."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`."
										},
										{
											"key": "return_im",
											"value": "<boolean>",
											"description": "Boolean, indicates you want the full IM channel definition in the response."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.open",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.open"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`."
										},
										{
											"key": "return_im",
											"value": "<boolean>",
											"description": "Boolean, indicates you want the full IM channel definition in the response."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.open",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.open"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": {},\n \"already_open\": \"<boolean>\",\n \"no_op\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "conversations kick",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "ID of conversation to remove user from."
								},
								{
									"key": "user",
									"value": "<string>",
									"description": "User ID to be removed."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.kick",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.kick"
							]
						},
						"description": "Removes a user from a conversation."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to remove user from."
										},
										{
											"key": "user",
											"value": "<string>",
											"description": "User ID to be removed."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.kick",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.kick"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response when you attempt to kick yourself from a channel",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to remove user from."
										},
										{
											"key": "user",
											"value": "<string>",
											"description": "User ID to be removed."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.kick",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.kick"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations leave",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Conversation to leave"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.leave",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.leave"
							]
						},
						"description": "Leaves a conversation."
					},
					"response": [
						{
							"name": "Typical error response when attempting to leave a workspace's \"general\" channel",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Conversation to leave"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.leave",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.leave"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Conversation to leave"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.leave",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.leave"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"not_in_channel\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "conversations list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/conversations.list?exclude_archived=<boolean>&types=<string>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.list"
							],
							"query": [
								{
									"key": "exclude_archived",
									"value": "<boolean>",
									"description": "Set to `true` to exclude archived channels from the list"
								},
								{
									"key": "types",
									"value": "<string>",
									"description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
								}
							]
						},
						"description": "Lists all channels in a Slack team."
					},
					"response": [
						{
							"name": "Typical success response with only public channels",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.list?token=<string>&exclude_archived=<boolean>&types=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "exclude_archived",
											"value": "<boolean>"
										},
										{
											"key": "types",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channels\": [],\n \"response_metadata\": {\n  \"next_cursor\": \"<string>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.list?token=<string>&exclude_archived=<boolean>&types=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "exclude_archived",
											"value": "<boolean>"
										},
										{
											"key": "types",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations mark",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel or conversation to set the read cursor for."
								},
								{
									"key": "ts",
									"value": "<number>",
									"description": "Unique identifier of message you want marked as most recently seen in this conversation."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.mark",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.mark"
							]
						},
						"description": "Sets the read cursor in a channel."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel or conversation to set the read cursor for."
										},
										{
											"key": "ts",
											"value": "<number>",
											"description": "Unique identifier of message you want marked as most recently seen in this conversation."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.mark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.mark"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel or conversation to set the read cursor for."
										},
										{
											"key": "ts",
											"value": "<number>",
											"description": "Unique identifier of message you want marked as most recently seen in this conversation."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.mark",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.mark"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "conversations set Topic",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Conversation to set the topic of"
								},
								{
									"key": "topic",
									"value": "<string>",
									"description": "The new topic string. Does not support formatting or linkification."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.setTopic",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.setTopic"
							]
						},
						"description": "Sets the topic for a conversation."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Conversation to set the topic of"
										},
										{
											"key": "topic",
											"value": "<string>",
											"description": "The new topic string. Does not support formatting or linkification."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.setTopic",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.setTopic"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Conversation to set the topic of"
										},
										{
											"key": "topic",
											"value": "<string>",
											"description": "The new topic string. Does not support formatting or linkification."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.setTopic",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.setTopic"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": {}\n}"
						}
					]
				},
				{
					"name": "conversations unarchive",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "ID of conversation to unarchive"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.unarchive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.unarchive"
							]
						},
						"description": "Reverses conversation archival."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to unarchive"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.unarchive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.unarchive"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to unarchive"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.unarchive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.unarchive"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "dialog open",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `none`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dialog.open?dialog=<string>&trigger_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dialog.open"
							],
							"query": [
								{
									"key": "dialog",
									"value": "<string>",
									"description": "(Required) The dialog definition. This must be a JSON-encoded string."
								},
								{
									"key": "trigger_id",
									"value": "<string>",
									"description": "(Required) Exchange a trigger to post to the user."
								}
							]
						},
						"description": "Open a dialog with a user"
					},
					"response": [
						{
							"name": "Typical success response is quite minimal.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dialog.open?dialog=<string>&trigger_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dialog.open"
									],
									"query": [
										{
											"key": "dialog",
											"value": "<string>"
										},
										{
											"key": "trigger_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response, before getting to any possible validation errors.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dialog.open?dialog=<string>&trigger_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dialog.open"
									],
									"query": [
										{
											"key": "dialog",
											"value": "<string>"
										},
										{
											"key": "trigger_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations members",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/conversations.members?channel=<string>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.members"
							],
							"query": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "ID of the conversation to retrieve members for"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
								}
							]
						},
						"description": "Retrieve members of a conversation."
					},
					"response": [
						{
							"name": "Typical paginated success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.members?token=<string>&channel=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.members"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"members\": [\n  \"<string>\"\n ],\n \"response_metadata\": {\n  \"next_cursor\": \"<string>\"\n }\n}"
						},
						{
							"name": "Typical error response when an invalid cursor is provided",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.members?token=<string>&channel=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.members"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations rename",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "ID of conversation to rename"
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "New name for conversation."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.rename",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.rename"
							]
						},
						"description": "Renames a conversation."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to rename"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "New name for conversation."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.rename",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.rename"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": {}\n}"
						},
						{
							"name": "Typical error response when the calling user is not a member of the conversation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "ID of conversation to rename"
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "New name for conversation."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.rename",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.rename"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations replies",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/conversations.replies?channel=<string>&ts=<number>&latest=<number>&oldest=<number>&inclusive=<boolean>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.replies"
							],
							"query": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Conversation ID to fetch thread from."
								},
								{
									"key": "ts",
									"value": "<number>",
									"description": "Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message."
								},
								{
									"key": "latest",
									"value": "<number>",
									"description": "End of time range of messages to include in results."
								},
								{
									"key": "oldest",
									"value": "<number>",
									"description": "Start of time range of messages to include in results."
								},
								{
									"key": "inclusive",
									"value": "<boolean>",
									"description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
								}
							]
						},
						"description": "Retrieve a thread of messages posted to a conversation"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.replies?token=<string>&channel=<string>&ts=<number>&latest=<number>&oldest=<number>&inclusive=<boolean>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.replies"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "ts",
											"value": "<number>"
										},
										{
											"key": "latest",
											"value": "<number>"
										},
										{
											"key": "oldest",
											"value": "<number>"
										},
										{
											"key": "inclusive",
											"value": "<boolean>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"messages\": [],\n \"has_more\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/conversations.replies?token=<string>&channel=<string>&ts=<number>&latest=<number>&oldest=<number>&inclusive=<boolean>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.replies"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "ts",
											"value": "<number>"
										},
										{
											"key": "latest",
											"value": "<number>"
										},
										{
											"key": "oldest",
											"value": "<number>"
										},
										{
											"key": "inclusive",
											"value": "<boolean>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "conversations set Purpose",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `conversations:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Conversation to set the purpose of"
								},
								{
									"key": "purpose",
									"value": "<string>",
									"description": "A new, specialer purpose"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/conversations.setPurpose",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"conversations.setPurpose"
							]
						},
						"description": "Sets the purpose for a conversation."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Conversation to set the purpose of"
										},
										{
											"key": "purpose",
											"value": "<string>",
											"description": "A new, specialer purpose"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.setPurpose",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.setPurpose"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channel\": {}\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `conversations:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Conversation to set the purpose of"
										},
										{
											"key": "purpose",
											"value": "<string>",
											"description": "A new, specialer purpose"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/conversations.setPurpose",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"conversations.setPurpose"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"needed\": \"<string>\",\n \"provided\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "dnd end Dnd",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `dnd:write`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dnd.endDnd",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dnd.endDnd"
							]
						},
						"description": "Ends the current user's Do Not Disturb session immediately."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `dnd:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dnd.endDnd",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.endDnd"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `dnd:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dnd.endDnd",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.endDnd"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "dnd end Snooze",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `dnd:write`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dnd.endSnooze",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dnd.endSnooze"
							]
						},
						"description": "Ends the current user's snooze mode immediately."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `dnd:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dnd.endSnooze",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.endSnooze"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `dnd:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dnd.endSnooze",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.endSnooze"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"dnd_enabled\": \"<boolean>\",\n \"next_dnd_start_ts\": \"<integer>\",\n \"next_dnd_end_ts\": \"<integer>\",\n \"snooze_enabled\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "dnd info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dnd.info?user=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dnd.info"
							],
							"query": [
								{
									"key": "user",
									"value": "<string>",
									"description": "User to fetch status for (defaults to current user)"
								}
							]
						},
						"description": "Retrieves a user's current Do Not Disturb status."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dnd.info?token=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dnd.info?token=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"dnd_enabled\": \"<boolean>\",\n \"next_dnd_start_ts\": \"<integer>\",\n \"next_dnd_end_ts\": \"<integer>\",\n \"snooze_enabled\": \"<boolean>\",\n \"snooze_endtime\": \"<integer>\",\n \"snooze_remaining\": \"<integer>\"\n}"
						}
					]
				},
				{
					"name": "dnd set Snooze",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `dnd:write`"
								},
								{
									"key": "num_minutes",
									"value": "<string>",
									"description": "Number of minutes, from now, to snooze until."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/dnd.setSnooze",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dnd.setSnooze"
							]
						},
						"description": "Turns on Do Not Disturb mode for the current user, or changes its duration."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `dnd:write`"
										},
										{
											"key": "num_minutes",
											"value": "<string>",
											"description": "Number of minutes, from now, to snooze until."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/dnd.setSnooze",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.setSnooze"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"snooze_enabled\": \"<boolean>\",\n \"snooze_endtime\": \"<integer>\",\n \"snooze_remaining\": \"<integer>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `dnd:write`"
										},
										{
											"key": "num_minutes",
											"value": "<string>",
											"description": "Number of minutes, from now, to snooze until."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/dnd.setSnooze",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.setSnooze"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "dnd team Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dnd.teamInfo?users=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dnd.teamInfo"
							],
							"query": [
								{
									"key": "users",
									"value": "<string>",
									"description": "Comma-separated list of users to fetch Do Not Disturb status for"
								}
							]
						},
						"description": "Retrieves the Do Not Disturb status for up to 50 users on a team."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dnd.teamInfo?token=<string>&users=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.teamInfo"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "users",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dnd.teamInfo?token=<string>&users=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dnd.teamInfo"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "users",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "emoji list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/emoji.list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"emoji.list"
							]
						},
						"description": "Lists custom emoji for a team."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/emoji.list?token=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"emoji.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/emoji.list?token=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"emoji.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "files delete",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `files:write:user`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "file",
									"value": "<string>",
									"description": "ID of file to delete."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/files.delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.delete"
							]
						},
						"description": "Deletes a file."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `files:write:user`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "file",
											"value": "<string>",
											"description": "ID of file to delete."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.delete"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `files:write:user`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "file",
											"value": "<string>",
											"description": "ID of file to delete."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.delete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "files comments delete",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `files:write:user`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "file",
									"value": "<string>",
									"description": "File to delete a comment from."
								},
								{
									"key": "id",
									"value": "<string>",
									"description": "The comment to delete."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/files.comments.delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.comments.delete"
							]
						},
						"description": "Deletes an existing comment on a file."
					},
					"response": [
						{
							"name": "Standard success response is very simple",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `files:write:user`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "file",
											"value": "<string>",
											"description": "File to delete a comment from."
										},
										{
											"key": "id",
											"value": "<string>",
											"description": "The comment to delete."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.comments.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.comments.delete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Standard failure response when used with an invalid token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `files:write:user`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "file",
											"value": "<string>",
											"description": "File to delete a comment from."
										},
										{
											"key": "id",
											"value": "<string>",
											"description": "The comment to delete."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.comments.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.comments.delete"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "files list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/files.list?user=<string>&channel=<string>&ts_from=<number>&ts_to=<number>&types=<string>&count=<string>&page=<string>&show_files_hidden_by_limit=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.list"
							],
							"query": [
								{
									"key": "user",
									"value": "<string>",
									"description": "Filter files created by a single user."
								},
								{
									"key": "channel",
									"value": "<string>",
									"description": "Filter files appearing in a specific channel, indicated by its ID."
								},
								{
									"key": "ts_from",
									"value": "<number>",
									"description": "Filter files created after this timestamp (inclusive)."
								},
								{
									"key": "ts_to",
									"value": "<number>",
									"description": "Filter files created before this timestamp (inclusive)."
								},
								{
									"key": "types",
									"value": "<string>",
									"description": "Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list."
								},
								{
									"key": "count",
									"value": "<string>"
								},
								{
									"key": "page",
									"value": "<string>"
								},
								{
									"key": "show_files_hidden_by_limit",
									"value": "<boolean>",
									"description": "Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit."
								}
							]
						},
						"description": "List for a team, in a channel, or from a user with applied filters."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.list?token=<string>&user=<string>&channel=<string>&ts_from=<number>&ts_to=<number>&types=<string>&count=<string>&page=<string>&show_files_hidden_by_limit=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "ts_from",
											"value": "<number>"
										},
										{
											"key": "ts_to",
											"value": "<number>"
										},
										{
											"key": "types",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										},
										{
											"key": "show_files_hidden_by_limit",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"files\": [\n  {\n   \"channels\": [\n    \"<string>\"\n   ],\n   \"comments_count\": \"<integer>\",\n   \"created\": \"<integer>\",\n   \"date_delete\": \"<integer>\",\n   \"display_as_bot\": \"<boolean>\",\n   \"editable\": \"<boolean>\",\n   \"editor\": \"<string>\",\n   \"external_id\": \"<string>\",\n   \"external_type\": \"<string>\",\n   \"external_url\": \"<uri>\",\n   \"filetype\": \"<string>\",\n   \"groups\": [\n    \"<string>\"\n   ],\n   \"has_rich_preview\": \"<boolean>\",\n   \"id\": \"<string>\",\n   \"image_exif_rotation\": \"<integer>\",\n   \"ims\": [\n    \"<string>\"\n   ],\n   \"is_external\": \"<boolean>\",\n   \"is_public\": \"<boolean>\",\n   \"is_starred\": \"<boolean>\",\n   \"is_tombstoned\": \"<boolean>\",\n   \"last_editor\": \"<string>\",\n   \"mimetype\": \"<string>\",\n   \"mode\": \"<string>\",\n   \"name\": \"<string>\",\n   \"non_owner_editable\": \"<boolean>\",\n   \"num_stars\": \"<integer>\",\n   \"original_h\": \"<integer>\",\n   \"original_w\": \"<integer>\",\n   \"permalink\": \"<uri>\",\n   \"permalink_public\": \"<uri>\",\n   \"pinned_info\": \"<object>\",\n   \"pinned_to\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"pretty_type\": \"<string>\",\n   \"preview\": \"<string>\",\n   \"public_url_shared\": \"<boolean>\",\n   \"reactions\": [\n    {\n     \"name\": \"<string>\",\n     \"users\": [\n      \"<string>\",\n      \"<string>\"\n     ],\n     \"count\": \"<integer>\"\n    },\n    {\n     \"name\": \"<string>\",\n     \"users\": [\n      \"<string>\",\n      \"<string>\"\n     ],\n     \"count\": \"<integer>\"\n    }\n   ],\n   \"shares\": {\n    \"private\": {},\n    \"public\": {}\n   },\n   \"size\": \"<integer>\",\n   \"source_team\": \"<string>\",\n   \"state\": \"<string>\",\n   \"thumb_1024\": \"<uri>\",\n   \"thumb_1024_h\": \"<integer>\",\n   \"thumb_1024_w\": \"<integer>\",\n   \"thumb_160\": \"<uri>\",\n   \"thumb_360\": \"<uri>\",\n   \"thumb_360_h\": \"<integer>\",\n   \"thumb_360_w\": \"<integer>\",\n   \"thumb_480\": \"<uri>\",\n   \"thumb_480_h\": \"<integer>\",\n   \"thumb_480_w\": \"<integer>\",\n   \"thumb_64\": \"<uri>\",\n   \"thumb_720\": \"<uri>\",\n   \"thumb_720_h\": \"<integer>\",\n   \"thumb_720_w\": \"<integer>\",\n   \"thumb_80\": \"<uri>\",\n   \"thumb_800\": \"<uri>\",\n   \"thumb_800_h\": \"<integer>\",\n   \"thumb_800_w\": \"<integer>\",\n   \"thumb_960\": \"<uri>\",\n   \"thumb_960_h\": \"<integer>\",\n   \"thumb_960_w\": \"<integer>\",\n   \"thumb_tiny\": \"<string>\",\n   \"timestamp\": \"<integer>\",\n   \"title\": \"<string>\",\n   \"updated\": \"<integer>\",\n   \"url_private\": \"<uri>\",\n   \"url_private_download\": \"<uri>\",\n   \"user\": \"<string>\",\n   \"user_team\": \"<string>\",\n   \"username\": \"<string>\"\n  }\n ],\n \"paging\": {\n  \"page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"count\": \"<integer>\",\n  \"pages\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"spill\": \"<integer>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.list?token=<string>&user=<string>&channel=<string>&ts_from=<number>&ts_to=<number>&types=<string>&count=<string>&page=<string>&show_files_hidden_by_limit=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "ts_from",
											"value": "<number>"
										},
										{
											"key": "ts_to",
											"value": "<number>"
										},
										{
											"key": "types",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										},
										{
											"key": "show_files_hidden_by_limit",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "files remote update",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `remote_files:write`"
								},
								{
									"key": "file",
									"value": "<string>",
									"description": "Specify a file by providing its ID."
								},
								{
									"key": "external_id",
									"value": "<string>",
									"description": "Creator defined GUID for the file."
								},
								{
									"key": "title",
									"value": "<string>",
									"description": "Title of the file being shared."
								},
								{
									"key": "filetype",
									"value": "<string>",
									"description": "type of file"
								},
								{
									"key": "external_url",
									"value": "<string>",
									"description": "URL of the remote file."
								},
								{
									"key": "preview_image",
									"value": "<string>",
									"description": "Preview of the document via `multipart/form-data`."
								},
								{
									"key": "indexable_file_contents",
									"value": "<string>",
									"description": "File containing contents that can be used to improve searchability for the remote file."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/files.remote.update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.remote.update"
							]
						},
						"description": "Updates an existing remote file."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `remote_files:write`"
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "Specify a file by providing its ID."
										},
										{
											"key": "external_id",
											"value": "<string>",
											"description": "Creator defined GUID for the file."
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "Title of the file being shared."
										},
										{
											"key": "filetype",
											"value": "<string>",
											"description": "type of file"
										},
										{
											"key": "external_url",
											"value": "<string>",
											"description": "URL of the remote file."
										},
										{
											"key": "preview_image",
											"value": "<string>",
											"description": "Preview of the document via `multipart/form-data`."
										},
										{
											"key": "indexable_file_contents",
											"value": "<string>",
											"description": "File containing contents that can be used to improve searchability for the remote file."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.remote.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.update"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `remote_files:write`"
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "Specify a file by providing its ID."
										},
										{
											"key": "external_id",
											"value": "<string>",
											"description": "Creator defined GUID for the file."
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "Title of the file being shared."
										},
										{
											"key": "filetype",
											"value": "<string>",
											"description": "type of file"
										},
										{
											"key": "external_url",
											"value": "<string>",
											"description": "URL of the remote file."
										},
										{
											"key": "preview_image",
											"value": "<string>",
											"description": "Preview of the document via `multipart/form-data`."
										},
										{
											"key": "indexable_file_contents",
											"value": "<string>",
											"description": "File containing contents that can be used to improve searchability for the remote file."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.remote.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.update"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "files info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/files.info?file=<string>&count=<string>&page=<string>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.info"
							],
							"query": [
								{
									"key": "file",
									"value": "<string>",
									"description": "Specify a file by providing its ID."
								},
								{
									"key": "count",
									"value": "<string>"
								},
								{
									"key": "page",
									"value": "<string>"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](/docs/pagination) for more details."
								}
							]
						},
						"description": "Gets information about a file."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.info?token=<string>&file=<string>&count=<string>&page=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "file",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.info?token=<string>&file=<string>&count=<string>&page=<string>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "file",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"file\": {\n  \"channels\": [\n   \"<string>\"\n  ],\n  \"comments_count\": \"<integer>\",\n  \"created\": \"<integer>\",\n  \"date_delete\": \"<integer>\",\n  \"display_as_bot\": \"<boolean>\",\n  \"editable\": \"<boolean>\",\n  \"editor\": \"<string>\",\n  \"external_id\": \"<string>\",\n  \"external_type\": \"<string>\",\n  \"external_url\": \"<uri>\",\n  \"filetype\": \"<string>\",\n  \"groups\": [\n   \"<string>\"\n  ],\n  \"has_rich_preview\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"image_exif_rotation\": \"<integer>\",\n  \"ims\": [\n   \"<string>\"\n  ],\n  \"is_external\": \"<boolean>\",\n  \"is_public\": \"<boolean>\",\n  \"is_starred\": \"<boolean>\",\n  \"is_tombstoned\": \"<boolean>\",\n  \"last_editor\": \"<string>\",\n  \"mimetype\": \"<string>\",\n  \"mode\": \"<string>\",\n  \"name\": \"<string>\",\n  \"non_owner_editable\": \"<boolean>\",\n  \"num_stars\": \"<integer>\",\n  \"original_h\": \"<integer>\",\n  \"original_w\": \"<integer>\",\n  \"permalink\": \"<uri>\",\n  \"permalink_public\": \"<uri>\",\n  \"pinned_info\": \"<object>\",\n  \"pinned_to\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"pretty_type\": \"<string>\",\n  \"preview\": \"<string>\",\n  \"public_url_shared\": \"<boolean>\",\n  \"reactions\": [\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   }\n  ],\n  \"shares\": {\n   \"private\": {},\n   \"public\": {}\n  },\n  \"size\": \"<integer>\",\n  \"source_team\": \"<string>\",\n  \"state\": \"<string>\",\n  \"thumb_1024\": \"<uri>\",\n  \"thumb_1024_h\": \"<integer>\",\n  \"thumb_1024_w\": \"<integer>\",\n  \"thumb_160\": \"<uri>\",\n  \"thumb_360\": \"<uri>\",\n  \"thumb_360_h\": \"<integer>\",\n  \"thumb_360_w\": \"<integer>\",\n  \"thumb_480\": \"<uri>\",\n  \"thumb_480_h\": \"<integer>\",\n  \"thumb_480_w\": \"<integer>\",\n  \"thumb_64\": \"<uri>\",\n  \"thumb_720\": \"<uri>\",\n  \"thumb_720_h\": \"<integer>\",\n  \"thumb_720_w\": \"<integer>\",\n  \"thumb_80\": \"<uri>\",\n  \"thumb_800\": \"<uri>\",\n  \"thumb_800_h\": \"<integer>\",\n  \"thumb_800_w\": \"<integer>\",\n  \"thumb_960\": \"<uri>\",\n  \"thumb_960_h\": \"<integer>\",\n  \"thumb_960_w\": \"<integer>\",\n  \"thumb_tiny\": \"<string>\",\n  \"timestamp\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"updated\": \"<integer>\",\n  \"url_private\": \"<uri>\",\n  \"url_private_download\": \"<uri>\",\n  \"user\": \"<string>\",\n  \"user_team\": \"<string>\",\n  \"username\": \"<string>\"\n },\n \"comments\": [],\n \"content_html\": {},\n \"editor\": \"<string>\",\n \"paging\": {\n  \"page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"count\": \"<integer>\",\n  \"pages\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"spill\": \"<integer>\"\n },\n \"response_metadata\": {}\n}"
						}
					]
				},
				{
					"name": "files upload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `files:write:user`"
								},
								{
									"key": "file",
									"value": "<string>",
									"description": "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`."
								},
								{
									"key": "content",
									"value": "<string>",
									"description": "File contents via a POST variable. If omitting this parameter, you must provide a `file`."
								},
								{
									"key": "filetype",
									"value": "<string>",
									"description": "A [file type](/types/file#file_types) identifier."
								},
								{
									"key": "filename",
									"value": "<string>",
									"description": "Filename of file."
								},
								{
									"key": "title",
									"value": "<string>",
									"description": "Title of file."
								},
								{
									"key": "initial_comment",
									"value": "<string>",
									"description": "The message text introducing the file in specified `channels`."
								},
								{
									"key": "channels",
									"value": "<string>",
									"description": "Comma-separated list of channel names or IDs where the file will be shared."
								},
								{
									"key": "thread_ts",
									"value": "<number>",
									"description": "Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/files.upload",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.upload"
							]
						},
						"description": "Uploads or creates a file."
					},
					"response": [
						{
							"name": "Success response after uploading a file to a channel with an initial message",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `files:write:user`"
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`."
										},
										{
											"key": "content",
											"value": "<string>",
											"description": "File contents via a POST variable. If omitting this parameter, you must provide a `file`."
										},
										{
											"key": "filetype",
											"value": "<string>",
											"description": "A [file type](/types/file#file_types) identifier."
										},
										{
											"key": "filename",
											"value": "<string>",
											"description": "Filename of file."
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "Title of file."
										},
										{
											"key": "initial_comment",
											"value": "<string>",
											"description": "The message text introducing the file in specified `channels`."
										},
										{
											"key": "channels",
											"value": "<string>",
											"description": "Comma-separated list of channel names or IDs where the file will be shared."
										},
										{
											"key": "thread_ts",
											"value": "<number>",
											"description": "Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.upload",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.upload"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"file\": {\n  \"channels\": [\n   \"<string>\"\n  ],\n  \"comments_count\": \"<integer>\",\n  \"created\": \"<integer>\",\n  \"date_delete\": \"<integer>\",\n  \"display_as_bot\": \"<boolean>\",\n  \"editable\": \"<boolean>\",\n  \"editor\": \"<string>\",\n  \"external_id\": \"<string>\",\n  \"external_type\": \"<string>\",\n  \"external_url\": \"<uri>\",\n  \"filetype\": \"<string>\",\n  \"groups\": [\n   \"<string>\"\n  ],\n  \"has_rich_preview\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"image_exif_rotation\": \"<integer>\",\n  \"ims\": [\n   \"<string>\"\n  ],\n  \"is_external\": \"<boolean>\",\n  \"is_public\": \"<boolean>\",\n  \"is_starred\": \"<boolean>\",\n  \"is_tombstoned\": \"<boolean>\",\n  \"last_editor\": \"<string>\",\n  \"mimetype\": \"<string>\",\n  \"mode\": \"<string>\",\n  \"name\": \"<string>\",\n  \"non_owner_editable\": \"<boolean>\",\n  \"num_stars\": \"<integer>\",\n  \"original_h\": \"<integer>\",\n  \"original_w\": \"<integer>\",\n  \"permalink\": \"<uri>\",\n  \"permalink_public\": \"<uri>\",\n  \"pinned_info\": \"<object>\",\n  \"pinned_to\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"pretty_type\": \"<string>\",\n  \"preview\": \"<string>\",\n  \"public_url_shared\": \"<boolean>\",\n  \"reactions\": [\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   }\n  ],\n  \"shares\": {\n   \"private\": {},\n   \"public\": {}\n  },\n  \"size\": \"<integer>\",\n  \"source_team\": \"<string>\",\n  \"state\": \"<string>\",\n  \"thumb_1024\": \"<uri>\",\n  \"thumb_1024_h\": \"<integer>\",\n  \"thumb_1024_w\": \"<integer>\",\n  \"thumb_160\": \"<uri>\",\n  \"thumb_360\": \"<uri>\",\n  \"thumb_360_h\": \"<integer>\",\n  \"thumb_360_w\": \"<integer>\",\n  \"thumb_480\": \"<uri>\",\n  \"thumb_480_h\": \"<integer>\",\n  \"thumb_480_w\": \"<integer>\",\n  \"thumb_64\": \"<uri>\",\n  \"thumb_720\": \"<uri>\",\n  \"thumb_720_h\": \"<integer>\",\n  \"thumb_720_w\": \"<integer>\",\n  \"thumb_80\": \"<uri>\",\n  \"thumb_800\": \"<uri>\",\n  \"thumb_800_h\": \"<integer>\",\n  \"thumb_800_w\": \"<integer>\",\n  \"thumb_960\": \"<uri>\",\n  \"thumb_960_h\": \"<integer>\",\n  \"thumb_960_w\": \"<integer>\",\n  \"thumb_tiny\": \"<string>\",\n  \"timestamp\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"updated\": \"<integer>\",\n  \"url_private\": \"<uri>\",\n  \"url_private_download\": \"<uri>\",\n  \"user\": \"<string>\",\n  \"user_team\": \"<string>\",\n  \"username\": \"<string>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `files:write:user`"
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`."
										},
										{
											"key": "content",
											"value": "<string>",
											"description": "File contents via a POST variable. If omitting this parameter, you must provide a `file`."
										},
										{
											"key": "filetype",
											"value": "<string>",
											"description": "A [file type](/types/file#file_types) identifier."
										},
										{
											"key": "filename",
											"value": "<string>",
											"description": "Filename of file."
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "Title of file."
										},
										{
											"key": "initial_comment",
											"value": "<string>",
											"description": "The message text introducing the file in specified `channels`."
										},
										{
											"key": "channels",
											"value": "<string>",
											"description": "Comma-separated list of channel names or IDs where the file will be shared."
										},
										{
											"key": "thread_ts",
											"value": "<number>",
											"description": "Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.upload",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.upload"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "files remote add",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `remote_files:write`"
								},
								{
									"key": "external_id",
									"value": "<string>",
									"description": "Creator defined GUID for the file."
								},
								{
									"key": "title",
									"value": "<string>",
									"description": "Title of the file being shared."
								},
								{
									"key": "filetype",
									"value": "<string>",
									"description": "type of file"
								},
								{
									"key": "external_url",
									"value": "<string>",
									"description": "URL of the remote file."
								},
								{
									"key": "preview_image",
									"value": "<string>",
									"description": "Preview of the document via `multipart/form-data`."
								},
								{
									"key": "indexable_file_contents",
									"value": "<string>",
									"description": "A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/files.remote.add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.remote.add"
							]
						},
						"description": "Adds a file from a remote service"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `remote_files:write`"
										},
										{
											"key": "external_id",
											"value": "<string>",
											"description": "Creator defined GUID for the file."
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "Title of the file being shared."
										},
										{
											"key": "filetype",
											"value": "<string>",
											"description": "type of file"
										},
										{
											"key": "external_url",
											"value": "<string>",
											"description": "URL of the remote file."
										},
										{
											"key": "preview_image",
											"value": "<string>",
											"description": "Preview of the document via `multipart/form-data`."
										},
										{
											"key": "indexable_file_contents",
											"value": "<string>",
											"description": "A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.remote.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.add"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `remote_files:write`"
										},
										{
											"key": "external_id",
											"value": "<string>",
											"description": "Creator defined GUID for the file."
										},
										{
											"key": "title",
											"value": "<string>",
											"description": "Title of the file being shared."
										},
										{
											"key": "filetype",
											"value": "<string>",
											"description": "type of file"
										},
										{
											"key": "external_url",
											"value": "<string>",
											"description": "URL of the remote file."
										},
										{
											"key": "preview_image",
											"value": "<string>",
											"description": "Preview of the document via `multipart/form-data`."
										},
										{
											"key": "indexable_file_contents",
											"value": "<string>",
											"description": "A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.remote.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.add"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "files remote info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/files.remote.info?file=<string>&external_id=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.remote.info"
							],
							"query": [
								{
									"key": "file",
									"value": "<string>",
									"description": "Specify a file by providing its ID."
								},
								{
									"key": "external_id",
									"value": "<string>",
									"description": "Creator defined GUID for the file."
								}
							]
						},
						"description": "Retrieve information about a remote file added to Slack"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.remote.info?token=<string>&file=<string>&external_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "file",
											"value": "<string>"
										},
										{
											"key": "external_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.remote.info?token=<string>&file=<string>&external_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "file",
											"value": "<string>"
										},
										{
											"key": "external_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "migration exchange",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/migration.exchange?users=<string>&team_id=<string>&to_old=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"migration.exchange"
							],
							"query": [
								{
									"key": "users",
									"value": "<string>",
									"description": "(Required) A comma-separated list of user ids, up to 400 per request"
								},
								{
									"key": "team_id",
									"value": "<string>",
									"description": "Specify team_id starts with `T` in case of Org Token"
								},
								{
									"key": "to_old",
									"value": "<boolean>",
									"description": "Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`."
								}
							]
						},
						"description": "For Enterprise Grid workspaces, map local user IDs to global user IDs"
					},
					"response": [
						{
							"name": "Typical success response when mappings exist for the specified user IDs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/migration.exchange?token=<string>&users=<string>&team_id=<string>&to_old=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"migration.exchange"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "users",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "to_old",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"team_id\": \"<string>\",\n \"enterprise_id\": \"<string>\",\n \"invalid_user_ids\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"user_id_map\": \"<object>\"\n}"
						},
						{
							"name": "Typical error response when there are no mappings to provide",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/migration.exchange?token=<string>&users=<string>&team_id=<string>&to_old=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"migration.exchange"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "users",
											"value": "<string>"
										},
										{
											"key": "team_id",
											"value": "<string>"
										},
										{
											"key": "to_old",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "files remote list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/files.remote.list?channel=<string>&ts_from=<number>&ts_to=<number>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.remote.list"
							],
							"query": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Filter files appearing in a specific channel, indicated by its ID."
								},
								{
									"key": "ts_from",
									"value": "<number>",
									"description": "Filter files created after this timestamp (inclusive)."
								},
								{
									"key": "ts_to",
									"value": "<number>",
									"description": "Filter files created before this timestamp (inclusive)."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
								}
							]
						},
						"description": "Retrieve information about a remote file added to Slack"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.remote.list?token=<string>&channel=<string>&ts_from=<number>&ts_to=<number>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "ts_from",
											"value": "<number>"
										},
										{
											"key": "ts_to",
											"value": "<number>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.remote.list?token=<string>&channel=<string>&ts_from=<number>&ts_to=<number>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "ts_from",
											"value": "<number>"
										},
										{
											"key": "ts_to",
											"value": "<number>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "files remote remove",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `remote_files:write`"
								},
								{
									"key": "file",
									"value": "<string>",
									"description": "Specify a file by providing its ID."
								},
								{
									"key": "external_id",
									"value": "<string>",
									"description": "Creator defined GUID for the file."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/files.remote.remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.remote.remove"
							]
						},
						"description": "Remove a remote file."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `remote_files:write`"
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "Specify a file by providing its ID."
										},
										{
											"key": "external_id",
											"value": "<string>",
											"description": "Creator defined GUID for the file."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.remote.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.remove"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `remote_files:write`"
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "Specify a file by providing its ID."
										},
										{
											"key": "external_id",
											"value": "<string>",
											"description": "Creator defined GUID for the file."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.remote.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.remove"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "files remote share",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/files.remote.share?file=<string>&external_id=<string>&channels=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.remote.share"
							],
							"query": [
								{
									"key": "file",
									"value": "<string>",
									"description": "Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required."
								},
								{
									"key": "external_id",
									"value": "<string>",
									"description": "The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required."
								},
								{
									"key": "channels",
									"value": "<string>",
									"description": "Comma-separated list of channel IDs where the file will be shared."
								}
							]
						},
						"description": "Share a remote file into a channel."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.remote.share?token=<string>&file=<string>&external_id=<string>&channels=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.share"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "file",
											"value": "<string>"
										},
										{
											"key": "external_id",
											"value": "<string>"
										},
										{
											"key": "channels",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/files.remote.share?token=<string>&file=<string>&external_id=<string>&channels=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.remote.share"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "file",
											"value": "<string>"
										},
										{
											"key": "external_id",
											"value": "<string>"
										},
										{
											"key": "channels",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "files revoke Public URL",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `files:write:user`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "file",
									"value": "<string>",
									"description": "File to revoke"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/files.revokePublicURL",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.revokePublicURL"
							]
						},
						"description": "Revokes public/external sharing access for a file"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `files:write:user`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "file",
											"value": "<string>",
											"description": "File to revoke"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.revokePublicURL",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.revokePublicURL"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"file\": {\n  \"channels\": [\n   \"<string>\"\n  ],\n  \"comments_count\": \"<integer>\",\n  \"created\": \"<integer>\",\n  \"date_delete\": \"<integer>\",\n  \"display_as_bot\": \"<boolean>\",\n  \"editable\": \"<boolean>\",\n  \"editor\": \"<string>\",\n  \"external_id\": \"<string>\",\n  \"external_type\": \"<string>\",\n  \"external_url\": \"<uri>\",\n  \"filetype\": \"<string>\",\n  \"groups\": [\n   \"<string>\"\n  ],\n  \"has_rich_preview\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"image_exif_rotation\": \"<integer>\",\n  \"ims\": [\n   \"<string>\"\n  ],\n  \"is_external\": \"<boolean>\",\n  \"is_public\": \"<boolean>\",\n  \"is_starred\": \"<boolean>\",\n  \"is_tombstoned\": \"<boolean>\",\n  \"last_editor\": \"<string>\",\n  \"mimetype\": \"<string>\",\n  \"mode\": \"<string>\",\n  \"name\": \"<string>\",\n  \"non_owner_editable\": \"<boolean>\",\n  \"num_stars\": \"<integer>\",\n  \"original_h\": \"<integer>\",\n  \"original_w\": \"<integer>\",\n  \"permalink\": \"<uri>\",\n  \"permalink_public\": \"<uri>\",\n  \"pinned_info\": \"<object>\",\n  \"pinned_to\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"pretty_type\": \"<string>\",\n  \"preview\": \"<string>\",\n  \"public_url_shared\": \"<boolean>\",\n  \"reactions\": [\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   }\n  ],\n  \"shares\": {\n   \"private\": {},\n   \"public\": {}\n  },\n  \"size\": \"<integer>\",\n  \"source_team\": \"<string>\",\n  \"state\": \"<string>\",\n  \"thumb_1024\": \"<uri>\",\n  \"thumb_1024_h\": \"<integer>\",\n  \"thumb_1024_w\": \"<integer>\",\n  \"thumb_160\": \"<uri>\",\n  \"thumb_360\": \"<uri>\",\n  \"thumb_360_h\": \"<integer>\",\n  \"thumb_360_w\": \"<integer>\",\n  \"thumb_480\": \"<uri>\",\n  \"thumb_480_h\": \"<integer>\",\n  \"thumb_480_w\": \"<integer>\",\n  \"thumb_64\": \"<uri>\",\n  \"thumb_720\": \"<uri>\",\n  \"thumb_720_h\": \"<integer>\",\n  \"thumb_720_w\": \"<integer>\",\n  \"thumb_80\": \"<uri>\",\n  \"thumb_800\": \"<uri>\",\n  \"thumb_800_h\": \"<integer>\",\n  \"thumb_800_w\": \"<integer>\",\n  \"thumb_960\": \"<uri>\",\n  \"thumb_960_h\": \"<integer>\",\n  \"thumb_960_w\": \"<integer>\",\n  \"thumb_tiny\": \"<string>\",\n  \"timestamp\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"updated\": \"<integer>\",\n  \"url_private\": \"<uri>\",\n  \"url_private_download\": \"<uri>\",\n  \"user\": \"<string>\",\n  \"user_team\": \"<string>\",\n  \"username\": \"<string>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `files:write:user`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "file",
											"value": "<string>",
											"description": "File to revoke"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.revokePublicURL",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.revokePublicURL"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "files shared Public URL",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `files:write:user`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "file",
									"value": "<string>",
									"description": "File to share"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/files.sharedPublicURL",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"files.sharedPublicURL"
							]
						},
						"description": "Enables a file for public/external sharing."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `files:write:user`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "file",
											"value": "<string>",
											"description": "File to share"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.sharedPublicURL",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.sharedPublicURL"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"file\": {\n  \"channels\": [\n   \"<string>\"\n  ],\n  \"comments_count\": \"<integer>\",\n  \"created\": \"<integer>\",\n  \"date_delete\": \"<integer>\",\n  \"display_as_bot\": \"<boolean>\",\n  \"editable\": \"<boolean>\",\n  \"editor\": \"<string>\",\n  \"external_id\": \"<string>\",\n  \"external_type\": \"<string>\",\n  \"external_url\": \"<uri>\",\n  \"filetype\": \"<string>\",\n  \"groups\": [\n   \"<string>\"\n  ],\n  \"has_rich_preview\": \"<boolean>\",\n  \"id\": \"<string>\",\n  \"image_exif_rotation\": \"<integer>\",\n  \"ims\": [\n   \"<string>\"\n  ],\n  \"is_external\": \"<boolean>\",\n  \"is_public\": \"<boolean>\",\n  \"is_starred\": \"<boolean>\",\n  \"is_tombstoned\": \"<boolean>\",\n  \"last_editor\": \"<string>\",\n  \"mimetype\": \"<string>\",\n  \"mode\": \"<string>\",\n  \"name\": \"<string>\",\n  \"non_owner_editable\": \"<boolean>\",\n  \"num_stars\": \"<integer>\",\n  \"original_h\": \"<integer>\",\n  \"original_w\": \"<integer>\",\n  \"permalink\": \"<uri>\",\n  \"permalink_public\": \"<uri>\",\n  \"pinned_info\": \"<object>\",\n  \"pinned_to\": [\n   \"<string>\",\n   \"<string>\"\n  ],\n  \"pretty_type\": \"<string>\",\n  \"preview\": \"<string>\",\n  \"public_url_shared\": \"<boolean>\",\n  \"reactions\": [\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"users\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"count\": \"<integer>\"\n   }\n  ],\n  \"shares\": {\n   \"private\": {},\n   \"public\": {}\n  },\n  \"size\": \"<integer>\",\n  \"source_team\": \"<string>\",\n  \"state\": \"<string>\",\n  \"thumb_1024\": \"<uri>\",\n  \"thumb_1024_h\": \"<integer>\",\n  \"thumb_1024_w\": \"<integer>\",\n  \"thumb_160\": \"<uri>\",\n  \"thumb_360\": \"<uri>\",\n  \"thumb_360_h\": \"<integer>\",\n  \"thumb_360_w\": \"<integer>\",\n  \"thumb_480\": \"<uri>\",\n  \"thumb_480_h\": \"<integer>\",\n  \"thumb_480_w\": \"<integer>\",\n  \"thumb_64\": \"<uri>\",\n  \"thumb_720\": \"<uri>\",\n  \"thumb_720_h\": \"<integer>\",\n  \"thumb_720_w\": \"<integer>\",\n  \"thumb_80\": \"<uri>\",\n  \"thumb_800\": \"<uri>\",\n  \"thumb_800_h\": \"<integer>\",\n  \"thumb_800_w\": \"<integer>\",\n  \"thumb_960\": \"<uri>\",\n  \"thumb_960_h\": \"<integer>\",\n  \"thumb_960_w\": \"<integer>\",\n  \"thumb_tiny\": \"<string>\",\n  \"timestamp\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"updated\": \"<integer>\",\n  \"url_private\": \"<uri>\",\n  \"url_private_download\": \"<uri>\",\n  \"user\": \"<string>\",\n  \"user_team\": \"<string>\",\n  \"username\": \"<string>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `files:write:user`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "file",
											"value": "<string>",
											"description": "File to share"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/files.sharedPublicURL",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files.sharedPublicURL"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "pins list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pins.list?channel=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pins.list"
							],
							"query": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "(Required) Channel to get pinned items for."
								}
							]
						},
						"description": "Lists items pinned to a channel."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pins.list?token=<string>&channel=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pins.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pins.list?token=<string>&channel=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pins.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "reactions list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reactions.list?user=<string>&full=<boolean>&count=<integer>&page=<integer>&cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reactions.list"
							],
							"query": [
								{
									"key": "user",
									"value": "<string>",
									"description": "Show reactions made by this user. Defaults to the authed user."
								},
								{
									"key": "full",
									"value": "<boolean>",
									"description": "If true always return the complete reaction list."
								},
								{
									"key": "count",
									"value": "<integer>"
								},
								{
									"key": "page",
									"value": "<integer>"
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached."
								}
							]
						},
						"description": "Lists reactions made by a user."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reactions.list?token=<string>&user=<string>&full=<boolean>&count=<integer>&page=<integer>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										},
										{
											"key": "full",
											"value": "<boolean>"
										},
										{
											"key": "count",
											"value": "<integer>"
										},
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"items\": [],\n \"paging\": {\n  \"page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"count\": \"<integer>\",\n  \"pages\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"spill\": \"<integer>\"\n },\n \"response_metadata\": {}\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reactions.list?token=<string>&user=<string>&full=<boolean>&count=<integer>&page=<integer>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										},
										{
											"key": "full",
											"value": "<boolean>"
										},
										{
											"key": "count",
											"value": "<integer>"
										},
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "oauth token",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/oauth.token?client_id=<string>&client_secret=<string>&code=<string>&redirect_uri=<string>&single_channel=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth.token"
							],
							"query": [
								{
									"key": "client_id",
									"value": "<string>",
									"description": "Issued when you created your application."
								},
								{
									"key": "client_secret",
									"value": "<string>",
									"description": "Issued when you created your application."
								},
								{
									"key": "code",
									"value": "<string>",
									"description": "The `code` param returned via the OAuth callback."
								},
								{
									"key": "redirect_uri",
									"value": "<string>",
									"description": "This must match the originally submitted URI (if one was sent)."
								},
								{
									"key": "single_channel",
									"value": "<boolean>",
									"description": "Request the user to add your app only to a single channel."
								}
							]
						},
						"description": "Exchanges a temporary OAuth verifier code for a workspace token."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth.token?client_id=<string>&client_secret=<string>&code=<string>&redirect_uri=<string>&single_channel=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth.token"
									],
									"query": [
										{
											"key": "client_id",
											"value": "<string>"
										},
										{
											"key": "client_secret",
											"value": "<string>"
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										},
										{
											"key": "single_channel",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Success example using a workspace app produces a very different kind of response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth.token?client_id=<string>&client_secret=<string>&code=<string>&redirect_uri=<string>&single_channel=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth.token"
									],
									"query": [
										{
											"key": "client_id",
											"value": "<string>"
										},
										{
											"key": "client_secret",
											"value": "<string>"
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										},
										{
											"key": "single_channel",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "reactions add",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `reactions:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel where the message to add reaction to was posted."
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "Reaction (emoji) name."
								},
								{
									"key": "timestamp",
									"value": "<string>",
									"description": "Timestamp of the message to add reaction to."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/reactions.add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reactions.add"
							]
						},
						"description": "Adds a reaction to an item."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `reactions:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel where the message to add reaction to was posted."
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Reaction (emoji) name."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to add reaction to."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reactions.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions.add"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `reactions:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel where the message to add reaction to was posted."
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "Reaction (emoji) name."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to add reaction to."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reactions.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions.add"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "reactions remove",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `reactions:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "<string>",
									"description": "Reaction (emoji) name."
								},
								{
									"key": "file",
									"value": "<string>",
									"description": "File to remove reaction from."
								},
								{
									"key": "file_comment",
									"value": "<string>",
									"description": "File comment to remove reaction from."
								},
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel where the message to remove reaction from was posted."
								},
								{
									"key": "timestamp",
									"value": "<string>",
									"description": "Timestamp of the message to remove reaction from."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/reactions.remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reactions.remove"
							]
						},
						"description": "Removes a reaction from an item."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `reactions:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "Reaction (emoji) name."
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "File to remove reaction from."
										},
										{
											"key": "file_comment",
											"value": "<string>",
											"description": "File comment to remove reaction from."
										},
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel where the message to remove reaction from was posted."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to remove reaction from."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reactions.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions.remove"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `reactions:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "Reaction (emoji) name."
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "File to remove reaction from."
										},
										{
											"key": "file_comment",
											"value": "<string>",
											"description": "File comment to remove reaction from."
										},
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel where the message to remove reaction from was posted."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to remove reaction from."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reactions.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions.remove"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "oauth v2 access",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/oauth.v2.access?client_id=<string>&client_secret=<string>&code=<string>&redirect_uri=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth.v2.access"
							],
							"query": [
								{
									"key": "client_id",
									"value": "<string>",
									"description": "Issued when you created your application."
								},
								{
									"key": "client_secret",
									"value": "<string>",
									"description": "Issued when you created your application."
								},
								{
									"key": "code",
									"value": "<string>",
									"description": "(Required) The `code` param returned via the OAuth callback."
								},
								{
									"key": "redirect_uri",
									"value": "<string>",
									"description": "This must match the originally submitted URI (if one was sent)."
								}
							]
						},
						"description": "Exchanges a temporary OAuth verifier code for an access token."
					},
					"response": [
						{
							"name": "Successful token request with scopes for both a bot user and a user token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth.v2.access?client_id=<string>&client_secret=<string>&code=<string>&redirect_uri=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth.v2.access"
									],
									"query": [
										{
											"key": "client_id",
											"value": "<string>"
										},
										{
											"key": "client_secret",
											"value": "<string>"
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth.v2.access?client_id=<string>&client_secret=<string>&code=<string>&redirect_uri=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth.v2.access"
									],
									"query": [
										{
											"key": "client_id",
											"value": "<string>"
										},
										{
											"key": "client_secret",
											"value": "<string>"
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "pins add",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `pins:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel to pin the item in."
								},
								{
									"key": "timestamp",
									"value": "<string>",
									"description": "Timestamp of the message to pin."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pins.add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pins.add"
							]
						},
						"description": "Pins an item to a channel."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `pins:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel to pin the item in."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to pin."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pins.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pins.add"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `pins:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel to pin the item in."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to pin."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pins.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pins.add"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "oauth access",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/oauth.access?client_id=<string>&client_secret=<string>&code=<string>&redirect_uri=<string>&single_channel=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth.access"
							],
							"query": [
								{
									"key": "client_id",
									"value": "<string>",
									"description": "Issued when you created your application."
								},
								{
									"key": "client_secret",
									"value": "<string>",
									"description": "Issued when you created your application."
								},
								{
									"key": "code",
									"value": "<string>",
									"description": "The `code` param returned via the OAuth callback."
								},
								{
									"key": "redirect_uri",
									"value": "<string>",
									"description": "This must match the originally submitted URI (if one was sent)."
								},
								{
									"key": "single_channel",
									"value": "<boolean>",
									"description": "Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps)."
								}
							]
						},
						"description": "Exchanges a temporary OAuth verifier code for an access token."
					},
					"response": [
						{
							"name": "Successful user token negotiation for a single scope",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth.access?client_id=<string>&client_secret=<string>&code=<string>&redirect_uri=<string>&single_channel=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth.access"
									],
									"query": [
										{
											"key": "client_id",
											"value": "<string>"
										},
										{
											"key": "client_secret",
											"value": "<string>"
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										},
										{
											"key": "single_channel",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/oauth.access?client_id=<string>&client_secret=<string>&code=<string>&redirect_uri=<string>&single_channel=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth.access"
									],
									"query": [
										{
											"key": "client_id",
											"value": "<string>"
										},
										{
											"key": "client_secret",
											"value": "<string>"
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										},
										{
											"key": "single_channel",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "reactions get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reactions.get?channel=<string>&file=<string>&file_comment=<string>&full=<boolean>&timestamp=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reactions.get"
							],
							"query": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel where the message to get reactions for was posted."
								},
								{
									"key": "file",
									"value": "<string>",
									"description": "File to get reactions for."
								},
								{
									"key": "file_comment",
									"value": "<string>",
									"description": "File comment to get reactions for."
								},
								{
									"key": "full",
									"value": "<boolean>",
									"description": "If true always return the complete reaction list."
								},
								{
									"key": "timestamp",
									"value": "<string>",
									"description": "Timestamp of the message to get reactions for."
								}
							]
						},
						"description": "Gets reactions for an item."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reactions.get?token=<string>&channel=<string>&file=<string>&file_comment=<string>&full=<boolean>&timestamp=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions.get"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "file",
											"value": "<string>"
										},
										{
											"key": "file_comment",
											"value": "<string>"
										},
										{
											"key": "full",
											"value": "<boolean>"
										},
										{
											"key": "timestamp",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<object>\""
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reactions.get?token=<string>&channel=<string>&file=<string>&file_comment=<string>&full=<boolean>&timestamp=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reactions.get"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "channel",
											"value": "<string>"
										},
										{
											"key": "file",
											"value": "<string>"
										},
										{
											"key": "file_comment",
											"value": "<string>"
										},
										{
											"key": "full",
											"value": "<boolean>"
										},
										{
											"key": "timestamp",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "pins remove",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `pins:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel where the item is pinned to."
								},
								{
									"key": "timestamp",
									"value": "<string>",
									"description": "Timestamp of the message to un-pin."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/pins.remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pins.remove"
							]
						},
						"description": "Un-pins an item from a channel."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `pins:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel where the item is pinned to."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to un-pin."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pins.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pins.remove"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `pins:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel where the item is pinned to."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to un-pin."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/pins.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pins.remove"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "reminders complete",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `reminders:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "reminder",
									"value": "<string>",
									"description": "The ID of the reminder to be marked as complete"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/reminders.complete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reminders.complete"
							]
						},
						"description": "Marks a reminder as complete."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `reminders:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "reminder",
											"value": "<string>",
											"description": "The ID of the reminder to be marked as complete"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reminders.complete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.complete"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `reminders:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "reminder",
											"value": "<string>",
											"description": "The ID of the reminder to be marked as complete"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reminders.complete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.complete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "reminders add",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `reminders:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "text",
									"value": "<string>",
									"description": "The content of the reminder"
								},
								{
									"key": "time",
									"value": "<string>",
									"description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")"
								},
								{
									"key": "user",
									"value": "<string>",
									"description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/reminders.add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reminders.add"
							]
						},
						"description": "Creates a reminder."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `reminders:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "text",
											"value": "<string>",
											"description": "The content of the reminder"
										},
										{
											"key": "time",
											"value": "<string>",
											"description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")"
										},
										{
											"key": "user",
											"value": "<string>",
											"description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reminders.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.add"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `reminders:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "text",
											"value": "<string>",
											"description": "The content of the reminder"
										},
										{
											"key": "time",
											"value": "<string>",
											"description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")"
										},
										{
											"key": "user",
											"value": "<string>",
											"description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reminders.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.add"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"reminder\": {\n  \"id\": \"<string>\",\n  \"creator\": \"<string>\",\n  \"user\": \"<string>\",\n  \"text\": \"<string>\",\n  \"recurring\": \"<boolean>\",\n  \"complete_ts\": \"<integer>\",\n  \"time\": \"<integer>\"\n }\n}"
						}
					]
				},
				{
					"name": "reminders delete",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "Authentication token. Requires scope: `reminders:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "reminder",
									"value": "<string>",
									"description": "The ID of the reminder"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/reminders.delete",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reminders.delete"
							]
						},
						"description": "Deletes a reminder."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `reminders:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "reminder",
											"value": "<string>",
											"description": "The ID of the reminder"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reminders.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.delete"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "Authentication token. Requires scope: `reminders:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "reminder",
											"value": "<string>",
											"description": "The ID of the reminder"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/reminders.delete",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.delete"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "reminders info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reminders.info?reminder=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reminders.info"
							],
							"query": [
								{
									"key": "reminder",
									"value": "<string>",
									"description": "The ID of the reminder"
								}
							]
						},
						"description": "Gets information about a reminder."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reminders.info?token=<string>&reminder=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "reminder",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"reminder\": {\n  \"id\": \"<string>\",\n  \"creator\": \"<string>\",\n  \"user\": \"<string>\",\n  \"text\": \"<string>\",\n  \"recurring\": \"<boolean>\",\n  \"complete_ts\": \"<integer>\",\n  \"time\": \"<integer>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reminders.info?token=<string>&reminder=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "reminder",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "reminders list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/reminders.list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reminders.list"
							]
						},
						"description": "Lists all reminders created by or for a given user."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reminders.list?token=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reminders.list?token=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reminders.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"reminders\": [\n  {\n   \"id\": \"<string>\",\n   \"creator\": \"<string>\",\n   \"user\": \"<string>\",\n   \"text\": \"<string>\",\n   \"recurring\": \"<boolean>\",\n   \"complete_ts\": \"<integer>\",\n   \"time\": \"<integer>\"\n  },\n  {\n   \"id\": \"<string>\",\n   \"creator\": \"<string>\",\n   \"user\": \"<string>\",\n   \"text\": \"<string>\",\n   \"recurring\": \"<boolean>\",\n   \"complete_ts\": \"<integer>\",\n   \"time\": \"<integer>\"\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "rtm connect",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/rtm.connect?batch_presence_aware=<boolean>&presence_sub=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"rtm.connect"
							],
							"query": [
								{
									"key": "batch_presence_aware",
									"value": "<boolean>",
									"description": "Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching)."
								},
								{
									"key": "presence_sub",
									"value": "<boolean>",
									"description": "Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions)."
								}
							]
						},
						"description": "Starts a Real Time Messaging session."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rtm.connect?token=<string>&batch_presence_aware=<boolean>&presence_sub=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rtm.connect"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "batch_presence_aware",
											"value": "<boolean>"
										},
										{
											"key": "presence_sub",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/rtm.connect?token=<string>&batch_presence_aware=<boolean>&presence_sub=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"rtm.connect"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "batch_presence_aware",
											"value": "<boolean>"
										},
										{
											"key": "presence_sub",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"url\": \"<uri>\",\n \"team\": {\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"domain\": \"<string>\"\n },\n \"self\": {\n  \"id\": \"<string>\",\n  \"name\": \"<string>\"\n }\n}"
						}
					]
				},
				{
					"name": "search messages",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search.messages?count=<integer>&highlight=<boolean>&page=<integer>&query=<string>&sort=<string>&sort_dir=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search.messages"
							],
							"query": [
								{
									"key": "count",
									"value": "<integer>",
									"description": "Pass the number of results you want per \"page\". Maximum of `100`."
								},
								{
									"key": "highlight",
									"value": "<boolean>",
									"description": "Pass a value of `true` to enable query highlight markers (see below)."
								},
								{
									"key": "page",
									"value": "<integer>"
								},
								{
									"key": "query",
									"value": "<string>",
									"description": "(Required) Search query."
								},
								{
									"key": "sort",
									"value": "<string>",
									"description": "Return matches sorted by either `score` or `timestamp`."
								},
								{
									"key": "sort_dir",
									"value": "<string>",
									"description": "Change sort direction to ascending (`asc`) or descending (`desc`)."
								}
							]
						},
						"description": "Searches for messages matching a query."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/search.messages?token=<string>&count=<integer>&highlight=<boolean>&page=<integer>&query=<string>&sort=<string>&sort_dir=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"search.messages"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<integer>"
										},
										{
											"key": "highlight",
											"value": "<boolean>"
										},
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "query",
											"value": "<string>"
										},
										{
											"key": "sort",
											"value": "<string>"
										},
										{
											"key": "sort_dir",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/search.messages?token=<string>&count=<integer>&highlight=<boolean>&page=<integer>&query=<string>&sort=<string>&sort_dir=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"search.messages"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<integer>"
										},
										{
											"key": "highlight",
											"value": "<boolean>"
										},
										{
											"key": "page",
											"value": "<integer>"
										},
										{
											"key": "query",
											"value": "<string>"
										},
										{
											"key": "sort",
											"value": "<string>"
										},
										{
											"key": "sort_dir",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "stars add",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `stars:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)."
								},
								{
									"key": "file",
									"value": "<string>",
									"description": "File to add star to."
								},
								{
									"key": "file_comment",
									"value": "<string>",
									"description": "File comment to add star to."
								},
								{
									"key": "timestamp",
									"value": "<string>",
									"description": "Timestamp of the message to add star to."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/stars.add",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stars.add"
							]
						},
						"description": "Adds a star to an item."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `stars:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)."
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "File to add star to."
										},
										{
											"key": "file_comment",
											"value": "<string>",
											"description": "File comment to add star to."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to add star to."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stars.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stars.add"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `stars:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)."
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "File to add star to."
										},
										{
											"key": "file_comment",
											"value": "<string>",
											"description": "File comment to add star to."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to add star to."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stars.add",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stars.add"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "stars list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stars.list?count=<string>&page=<string>&cursor=<string>&limit=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stars.list"
							],
							"query": [
								{
									"key": "count",
									"value": "<string>"
								},
								{
									"key": "page",
									"value": "<string>"
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details."
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached."
								}
							]
						},
						"description": "Lists stars for a user."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stars.list?token=<string>&count=<string>&page=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stars.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"items\": [],\n \"paging\": {\n  \"page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"count\": \"<integer>\",\n  \"pages\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"spill\": \"<integer>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stars.list?token=<string>&count=<string>&page=<string>&cursor=<string>&limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stars.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "stars remove",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `stars:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "channel",
									"value": "<string>",
									"description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)."
								},
								{
									"key": "file",
									"value": "<string>",
									"description": "File to remove star from."
								},
								{
									"key": "file_comment",
									"value": "<string>",
									"description": "File comment to remove star from."
								},
								{
									"key": "timestamp",
									"value": "<string>",
									"description": "Timestamp of the message to remove star from."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/stars.remove",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stars.remove"
							]
						},
						"description": "Removes a star from an item."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `stars:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)."
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "File to remove star from."
										},
										{
											"key": "file_comment",
											"value": "<string>",
											"description": "File comment to remove star from."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to remove star from."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stars.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stars.remove"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `stars:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "channel",
											"value": "<string>",
											"description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)."
										},
										{
											"key": "file",
											"value": "<string>",
											"description": "File to remove star from."
										},
										{
											"key": "file_comment",
											"value": "<string>",
											"description": "File comment to remove star from."
										},
										{
											"key": "timestamp",
											"value": "<string>",
											"description": "Timestamp of the message to remove star from."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/stars.remove",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stars.remove"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "team access Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/team.accessLogs?before=<string>&count=<string>&page=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"team.accessLogs"
							],
							"query": [
								{
									"key": "before",
									"value": "<string>",
									"description": "End of time range of logs to include in results (inclusive)."
								},
								{
									"key": "count",
									"value": "<string>"
								},
								{
									"key": "page",
									"value": "<string>"
								}
							]
						},
						"description": "Gets the access logs for the current team."
					},
					"response": [
						{
							"name": "A workspace must be on a paid plan to use this method, otherwise the `paid_only` error is thrown:",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.accessLogs?token=<string>&before=<string>&count=<string>&page=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.accessLogs"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "before",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "This response demonstrates pagination and two access log entries.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.accessLogs?token=<string>&before=<string>&count=<string>&page=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.accessLogs"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "before",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"logins\": [\n  {\n   \"user_id\": \"<string>\",\n   \"username\": \"<string>\",\n   \"date_first\": \"<integer>\",\n   \"date_last\": \"<integer>\",\n   \"count\": \"<integer>\",\n   \"ip\": \"<string>\",\n   \"user_agent\": \"<string>\",\n   \"isp\": \"<string>\",\n   \"country\": \"<string>\",\n   \"region\": \"<string>\"\n  }\n ],\n \"paging\": {\n  \"page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"count\": \"<integer>\",\n  \"pages\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"spill\": \"<integer>\"\n }\n}"
						}
					]
				},
				{
					"name": "team billable Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/team.billableInfo?user=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"team.billableInfo"
							],
							"query": [
								{
									"key": "user",
									"value": "<string>",
									"description": "A user to retrieve the billable information for. Defaults to all users."
								}
							]
						},
						"description": "Gets billable users information for the current team."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.billableInfo?token=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.billableInfo"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.billableInfo?token=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.billableInfo"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "team info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/team.info?team=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"team.info"
							],
							"query": [
								{
									"key": "team",
									"value": "<string>",
									"description": "Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels"
								}
							]
						},
						"description": "Gets information about the current team."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.info?token=<string>&team=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "team",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"team\": {\n  \"id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"domain\": \"<string>\",\n  \"email_domain\": \"<string>\",\n  \"icon\": {\n   \"image_102\": \"<string>\",\n   \"image_132\": \"<string>\",\n   \"image_230\": \"<string>\",\n   \"image_34\": \"<string>\",\n   \"image_44\": \"<string>\",\n   \"image_68\": \"<string>\",\n   \"image_88\": \"<string>\",\n   \"image_default\": \"<boolean>\"\n  },\n  \"archived\": \"<boolean>\",\n  \"avatar_base_url\": \"<uri>\",\n  \"created\": \"<integer>\",\n  \"date_create\": \"<integer>\",\n  \"deleted\": \"<boolean>\",\n  \"description\": \"<string>\",\n  \"discoverable\": {},\n  \"enterprise_id\": \"<string>\",\n  \"enterprise_name\": \"<string>\",\n  \"external_org_migrations\": {\n   \"date_updated\": \"<integer>\",\n   \"current\": [\n    {\n     \"team_id\": \"<string>\",\n     \"date_started\": \"<integer>\"\n    },\n    {\n     \"team_id\": \"<string>\",\n     \"date_started\": \"<integer>\"\n    }\n   ]\n  },\n  \"has_compliance_export\": \"<boolean>\",\n  \"is_assigned\": \"<boolean>\",\n  \"is_enterprise\": \"<integer>\",\n  \"is_over_storage_limit\": \"<boolean>\",\n  \"limit_ts\": \"<integer>\",\n  \"locale\": \"<string>\",\n  \"messages_count\": \"<integer>\",\n  \"msg_edit_window_mins\": \"<integer>\",\n  \"over_integrations_limit\": \"<boolean>\",\n  \"over_storage_limit\": \"<boolean>\",\n  \"pay_prod_cur\": \"<string>\",\n  \"plan\": \"<string>\",\n  \"primary_owner\": {\n   \"id\": \"<string>\",\n   \"email\": \"<string>\"\n  },\n  \"sso_provider\": {\n   \"label\": \"<string>\",\n   \"name\": \"<string>\",\n   \"type\": \"<string>\"\n  }\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.info?token=<string>&team=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "team",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "usergroups enable",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "usergroup",
									"value": "<string>",
									"description": "The encoded ID of the User Group to enable."
								},
								{
									"key": "include_count",
									"value": "<boolean>",
									"description": "Include the number of users in the User Group."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/usergroups.enable",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usergroups.enable"
							]
						},
						"description": "Enable a User Group"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup",
											"value": "<string>",
											"description": "The encoded ID of the User Group to enable."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in the User Group."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.enable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.enable"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"usergroup\": {\n  \"id\": \"<string>\",\n  \"team_id\": \"<string>\",\n  \"is_usergroup\": \"<boolean>\",\n  \"is_subteam\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"handle\": \"<string>\",\n  \"is_external\": \"<boolean>\",\n  \"date_create\": \"<integer>\",\n  \"date_update\": \"<integer>\",\n  \"date_delete\": \"<integer>\",\n  \"auto_type\": {},\n  \"auto_provision\": \"<boolean>\",\n  \"enterprise_subteam_id\": \"<string>\",\n  \"created_by\": \"<string>\",\n  \"updated_by\": \"<string>\",\n  \"deleted_by\": {},\n  \"prefs\": {\n   \"channels\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"groups\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"channel_count\": \"<integer>\",\n  \"user_count\": \"<integer>\",\n  \"users\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup",
											"value": "<string>",
											"description": "The encoded ID of the User Group to enable."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in the User Group."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.enable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.enable"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "team integration Logs",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/team.integrationLogs?app_id=<string>&change_type=<string>&count=<string>&page=<string>&service_id=<string>&user=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"team.integrationLogs"
							],
							"query": [
								{
									"key": "app_id",
									"value": "<string>",
									"description": "Filter logs to this Slack app. Defaults to all logs."
								},
								{
									"key": "change_type",
									"value": "<string>",
									"description": "Filter logs with this change type. Defaults to all logs."
								},
								{
									"key": "count",
									"value": "<string>"
								},
								{
									"key": "page",
									"value": "<string>"
								},
								{
									"key": "service_id",
									"value": "<string>",
									"description": "Filter logs to this service. Defaults to all logs."
								},
								{
									"key": "user",
									"value": "<string>",
									"description": "Filter logs generated by this user’s actions. Defaults to all logs."
								}
							]
						},
						"description": "Gets the integration logs for the current team."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.integrationLogs?token=<string>&app_id=<string>&change_type=<string>&count=<string>&page=<string>&service_id=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.integrationLogs"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "app_id",
											"value": "<string>"
										},
										{
											"key": "change_type",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										},
										{
											"key": "service_id",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.integrationLogs?token=<string>&app_id=<string>&change_type=<string>&count=<string>&page=<string>&service_id=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.integrationLogs"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "app_id",
											"value": "<string>"
										},
										{
											"key": "change_type",
											"value": "<string>"
										},
										{
											"key": "count",
											"value": "<string>"
										},
										{
											"key": "page",
											"value": "<string>"
										},
										{
											"key": "service_id",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"logs\": [\n  {\n   \"user_id\": \"<string>\",\n   \"user_name\": \"<string>\",\n   \"date\": \"<string>\",\n   \"change_type\": \"<string>\",\n   \"app_type\": \"<string>\",\n   \"app_id\": \"<string>\",\n   \"scope\": \"<string>\",\n   \"admin_app_id\": \"<string>\",\n   \"channel\": \"<string>\",\n   \"service_id\": \"<string>\",\n   \"service_type\": \"<string>\"\n  }\n ],\n \"paging\": {\n  \"page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"count\": \"<integer>\",\n  \"pages\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"spill\": \"<integer>\"\n }\n}"
						}
					]
				},
				{
					"name": "team profile get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/team.profile.get?visibility=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"team.profile.get"
							],
							"query": [
								{
									"key": "visibility",
									"value": "<string>",
									"description": "Filter by visibility."
								}
							]
						},
						"description": "Retrieve a team's profile."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.profile.get?token=<string>&visibility=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.profile.get"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "visibility",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/team.profile.get?token=<string>&visibility=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"team.profile.get"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "visibility",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"profile\": {\n  \"fields\": [\n   {\n    \"id\": \"<string>\",\n    \"ordering\": \"<number>\",\n    \"label\": \"<string>\",\n    \"hint\": \"<string>\",\n    \"type\": \"<string>\",\n    \"field_name\": \"<string>\",\n    \"is_hidden\": \"<boolean>\",\n    \"options\": {},\n    \"possible_values\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   }\n  ]\n }\n}"
						}
					]
				},
				{
					"name": "usergroups create",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "<string>",
									"description": "A name for the User Group. Must be unique among User Groups."
								},
								{
									"key": "channels",
									"value": "<string>",
									"description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
								},
								{
									"key": "description",
									"value": "<string>",
									"description": "A short description of the User Group."
								},
								{
									"key": "handle",
									"value": "<string>",
									"description": "A mention handle. Must be unique among channels, users and User Groups."
								},
								{
									"key": "include_count",
									"value": "<boolean>",
									"description": "Include the number of users in each User Group."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/usergroups.create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usergroups.create"
							]
						},
						"description": "Create a User Group"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "A name for the User Group. Must be unique among User Groups."
										},
										{
											"key": "channels",
											"value": "<string>",
											"description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "A short description of the User Group."
										},
										{
											"key": "handle",
											"value": "<string>",
											"description": "A mention handle. Must be unique among channels, users and User Groups."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in each User Group."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.create"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"usergroup\": {\n  \"id\": \"<string>\",\n  \"team_id\": \"<string>\",\n  \"is_usergroup\": \"<boolean>\",\n  \"is_subteam\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"handle\": \"<string>\",\n  \"is_external\": \"<boolean>\",\n  \"date_create\": \"<integer>\",\n  \"date_update\": \"<integer>\",\n  \"date_delete\": \"<integer>\",\n  \"auto_type\": {},\n  \"auto_provision\": \"<boolean>\",\n  \"enterprise_subteam_id\": \"<string>\",\n  \"created_by\": \"<string>\",\n  \"updated_by\": \"<string>\",\n  \"deleted_by\": {},\n  \"prefs\": {\n   \"channels\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"groups\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"channel_count\": \"<integer>\",\n  \"user_count\": \"<integer>\",\n  \"users\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "A name for the User Group. Must be unique among User Groups."
										},
										{
											"key": "channels",
											"value": "<string>",
											"description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "A short description of the User Group."
										},
										{
											"key": "handle",
											"value": "<string>",
											"description": "A mention handle. Must be unique among channels, users and User Groups."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in each User Group."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.create"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "usergroups disable",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "usergroup",
									"value": "<string>",
									"description": "The encoded ID of the User Group to disable."
								},
								{
									"key": "include_count",
									"value": "<boolean>",
									"description": "Include the number of users in the User Group."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/usergroups.disable",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usergroups.disable"
							]
						},
						"description": "Disable an existing User Group"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup",
											"value": "<string>",
											"description": "The encoded ID of the User Group to disable."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in the User Group."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.disable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.disable"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup",
											"value": "<string>",
											"description": "The encoded ID of the User Group to disable."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in the User Group."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.disable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.disable"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"usergroup\": {\n  \"id\": \"<string>\",\n  \"team_id\": \"<string>\",\n  \"is_usergroup\": \"<boolean>\",\n  \"is_subteam\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"handle\": \"<string>\",\n  \"is_external\": \"<boolean>\",\n  \"date_create\": \"<integer>\",\n  \"date_update\": \"<integer>\",\n  \"date_delete\": \"<integer>\",\n  \"auto_type\": {},\n  \"auto_provision\": \"<boolean>\",\n  \"enterprise_subteam_id\": \"<string>\",\n  \"created_by\": \"<string>\",\n  \"updated_by\": \"<string>\",\n  \"deleted_by\": {},\n  \"prefs\": {\n   \"channels\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"groups\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"channel_count\": \"<integer>\",\n  \"user_count\": \"<integer>\",\n  \"users\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n}"
						}
					]
				},
				{
					"name": "usergroups list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usergroups.list?include_users=<boolean>&include_count=<boolean>&include_disabled=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usergroups.list"
							],
							"query": [
								{
									"key": "include_users",
									"value": "<boolean>",
									"description": "Include the list of users for each User Group."
								},
								{
									"key": "include_count",
									"value": "<boolean>",
									"description": "Include the number of users in each User Group."
								},
								{
									"key": "include_disabled",
									"value": "<boolean>",
									"description": "Include disabled User Groups."
								}
							]
						},
						"description": "List all User Groups for a team"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usergroups.list?include_users=<boolean>&token=<string>&include_count=<boolean>&include_disabled=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.list"
									],
									"query": [
										{
											"key": "include_users",
											"value": "<boolean>"
										},
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "include_count",
											"value": "<boolean>"
										},
										{
											"key": "include_disabled",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usergroups.list?include_users=<boolean>&token=<string>&include_count=<boolean>&include_disabled=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.list"
									],
									"query": [
										{
											"key": "include_users",
											"value": "<boolean>"
										},
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "include_count",
											"value": "<boolean>"
										},
										{
											"key": "include_disabled",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"usergroups\": [\n  {\n   \"id\": \"<string>\",\n   \"team_id\": \"<string>\",\n   \"is_usergroup\": \"<boolean>\",\n   \"is_subteam\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"handle\": \"<string>\",\n   \"is_external\": \"<boolean>\",\n   \"date_create\": \"<integer>\",\n   \"date_update\": \"<integer>\",\n   \"date_delete\": \"<integer>\",\n   \"auto_type\": {},\n   \"auto_provision\": \"<boolean>\",\n   \"enterprise_subteam_id\": \"<string>\",\n   \"created_by\": \"<string>\",\n   \"updated_by\": \"<string>\",\n   \"deleted_by\": {},\n   \"prefs\": {\n    \"channels\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"groups\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   },\n   \"channel_count\": \"<integer>\",\n   \"user_count\": \"<integer>\",\n   \"users\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  {\n   \"id\": \"<string>\",\n   \"team_id\": \"<string>\",\n   \"is_usergroup\": \"<boolean>\",\n   \"is_subteam\": \"<boolean>\",\n   \"name\": \"<string>\",\n   \"description\": \"<string>\",\n   \"handle\": \"<string>\",\n   \"is_external\": \"<boolean>\",\n   \"date_create\": \"<integer>\",\n   \"date_update\": \"<integer>\",\n   \"date_delete\": \"<integer>\",\n   \"auto_type\": {},\n   \"auto_provision\": \"<boolean>\",\n   \"enterprise_subteam_id\": \"<string>\",\n   \"created_by\": \"<string>\",\n   \"updated_by\": \"<string>\",\n   \"deleted_by\": {},\n   \"prefs\": {\n    \"channels\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"groups\": [\n     \"<string>\",\n     \"<string>\"\n    ]\n   },\n   \"channel_count\": \"<integer>\",\n   \"user_count\": \"<integer>\",\n   \"users\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  }\n ]\n}"
						}
					]
				},
				{
					"name": "usergroups users list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usergroups.users.list?include_disabled=<boolean>&usergroup=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usergroups.users.list"
							],
							"query": [
								{
									"key": "include_disabled",
									"value": "<boolean>",
									"description": "Allow results that involve disabled User Groups."
								},
								{
									"key": "usergroup",
									"value": "<string>",
									"description": "(Required) The encoded ID of the User Group to update."
								}
							]
						},
						"description": "List all users in a User Group"
					},
					"response": [
						{
							"name": "Standard success response when used with a user token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usergroups.users.list?token=<string>&include_disabled=<boolean>&usergroup=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.users.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "include_disabled",
											"value": "<boolean>"
										},
										{
											"key": "usergroup",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"users\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
						},
						{
							"name": "Standard failure response when used with an invalid token",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/usergroups.users.list?token=<string>&include_disabled=<boolean>&usergroup=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.users.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "include_disabled",
											"value": "<boolean>"
										},
										{
											"key": "usergroup",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "usergroups update",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "usergroup",
									"value": "<string>",
									"description": "The encoded ID of the User Group to update."
								},
								{
									"key": "handle",
									"value": "<string>",
									"description": "A mention handle. Must be unique among channels, users and User Groups."
								},
								{
									"key": "description",
									"value": "<string>",
									"description": "A short description of the User Group."
								},
								{
									"key": "channels",
									"value": "<string>",
									"description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
								},
								{
									"key": "include_count",
									"value": "<boolean>",
									"description": "Include the number of users in the User Group."
								},
								{
									"key": "name",
									"value": "<string>",
									"description": "A name for the User Group. Must be unique among User Groups."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/usergroups.update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usergroups.update"
							]
						},
						"description": "Update an existing User Group"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup",
											"value": "<string>",
											"description": "The encoded ID of the User Group to update."
										},
										{
											"key": "handle",
											"value": "<string>",
											"description": "A mention handle. Must be unique among channels, users and User Groups."
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "A short description of the User Group."
										},
										{
											"key": "channels",
											"value": "<string>",
											"description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in the User Group."
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "A name for the User Group. Must be unique among User Groups."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.update"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup",
											"value": "<string>",
											"description": "The encoded ID of the User Group to update."
										},
										{
											"key": "handle",
											"value": "<string>",
											"description": "A mention handle. Must be unique among channels, users and User Groups."
										},
										{
											"key": "description",
											"value": "<string>",
											"description": "A short description of the User Group."
										},
										{
											"key": "channels",
											"value": "<string>",
											"description": "A comma separated string of encoded channel IDs for which the User Group uses as a default."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in the User Group."
										},
										{
											"key": "name",
											"value": "<string>",
											"description": "A name for the User Group. Must be unique among User Groups."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.update"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"usergroup\": {\n  \"id\": \"<string>\",\n  \"team_id\": \"<string>\",\n  \"is_usergroup\": \"<boolean>\",\n  \"is_subteam\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"handle\": \"<string>\",\n  \"is_external\": \"<boolean>\",\n  \"date_create\": \"<integer>\",\n  \"date_update\": \"<integer>\",\n  \"date_delete\": \"<integer>\",\n  \"auto_type\": {},\n  \"auto_provision\": \"<boolean>\",\n  \"enterprise_subteam_id\": \"<string>\",\n  \"created_by\": \"<string>\",\n  \"updated_by\": \"<string>\",\n  \"deleted_by\": {},\n  \"prefs\": {\n   \"channels\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"groups\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"channel_count\": \"<integer>\",\n  \"user_count\": \"<integer>\",\n  \"users\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n}"
						}
					]
				},
				{
					"name": "usergroups users update",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "usergroup",
									"value": "<string>",
									"description": "The encoded ID of the User Group to update."
								},
								{
									"key": "users",
									"value": "<string>",
									"description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group."
								},
								{
									"key": "include_count",
									"value": "<boolean>",
									"description": "Include the number of users in the User Group."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/usergroups.users.update",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usergroups.users.update"
							]
						},
						"description": "Update the list of users for a User Group"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup",
											"value": "<string>",
											"description": "The encoded ID of the User Group to update."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in the User Group."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.users.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.users.update"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"usergroup\": {\n  \"id\": \"<string>\",\n  \"team_id\": \"<string>\",\n  \"is_usergroup\": \"<boolean>\",\n  \"is_subteam\": \"<boolean>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"handle\": \"<string>\",\n  \"is_external\": \"<boolean>\",\n  \"date_create\": \"<integer>\",\n  \"date_update\": \"<integer>\",\n  \"date_delete\": \"<integer>\",\n  \"auto_type\": {},\n  \"auto_provision\": \"<boolean>\",\n  \"enterprise_subteam_id\": \"<string>\",\n  \"created_by\": \"<string>\",\n  \"updated_by\": \"<string>\",\n  \"deleted_by\": {},\n  \"prefs\": {\n   \"channels\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"groups\": [\n    \"<string>\",\n    \"<string>\"\n   ]\n  },\n  \"channel_count\": \"<integer>\",\n  \"user_count\": \"<integer>\",\n  \"users\": [\n   \"<string>\",\n   \"<string>\"\n  ]\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `usergroups:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "usergroup",
											"value": "<string>",
											"description": "The encoded ID of the User Group to update."
										},
										{
											"key": "users",
											"value": "<string>",
											"description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group."
										},
										{
											"key": "include_count",
											"value": "<boolean>",
											"description": "Include the number of users in the User Group."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/usergroups.users.update",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"usergroups.users.update"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "users delete Photo",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `users.profile:write`"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users.deletePhoto",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.deletePhoto"
							]
						},
						"description": "Delete the user profile photo"
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `users.profile:write`"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users.deletePhoto",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.deletePhoto"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `users.profile:write`"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users.deletePhoto",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.deletePhoto"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "users get Presence",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users.getPresence?user=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.getPresence"
							],
							"query": [
								{
									"key": "user",
									"value": "<string>",
									"description": "User to get presence info on. Defaults to the authed user."
								}
							]
						},
						"description": "Gets user presence information."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.getPresence?token=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.getPresence"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\"\n}"
						},
						{
							"name": "When requesting information for a different user, this method just returns the current presence (either `active` or `away`).",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.getPresence?token=<string>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.getPresence"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"presence\": \"<string>\",\n \"auto_away\": \"<boolean>\",\n \"connection_count\": \"<integer>\",\n \"last_activity\": \"<integer>\",\n \"manual_away\": \"<boolean>\",\n \"online\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "users conversations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users.conversations?user=<string>&types=<string>&exclude_archived=<boolean>&limit=<integer>&cursor=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.conversations"
							],
							"query": [
								{
									"key": "user",
									"value": "<string>",
									"description": "Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership."
								},
								{
									"key": "types",
									"value": "<string>",
									"description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`"
								},
								{
									"key": "exclude_archived",
									"value": "<boolean>",
									"description": "Set to `true` to exclude archived channels from the list"
								},
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
								}
							]
						},
						"description": "List conversations the calling user may access."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.conversations?token=<string>&user=<string>&types=<string>&exclude_archived=<boolean>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.conversations"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										},
										{
											"key": "types",
											"value": "<string>"
										},
										{
											"key": "exclude_archived",
											"value": "<boolean>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response with only public channels. Note how `num_members` and `is_member` are not returned like typical `conversations` objects.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.conversations?token=<string>&user=<string>&types=<string>&exclude_archived=<boolean>&limit=<integer>&cursor=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.conversations"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "user",
											"value": "<string>"
										},
										{
											"key": "types",
											"value": "<string>"
										},
										{
											"key": "exclude_archived",
											"value": "<boolean>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"channels\": [],\n \"response_metadata\": {\n  \"next_cursor\": \"<string>\"\n }\n}"
						}
					]
				},
				{
					"name": "users info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users.info?include_locale=<boolean>&user=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.info"
							],
							"query": [
								{
									"key": "include_locale",
									"value": "<boolean>",
									"description": "Set this to `true` to receive the locale for this user. Defaults to `false`"
								},
								{
									"key": "user",
									"value": "<string>",
									"description": "User to get info on"
								}
							]
						},
						"description": "Gets information about a user."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.info?token=<string>&include_locale=<boolean>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "include_locale",
											"value": "<boolean>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"user\": {}\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.info?token=<string>&include_locale=<boolean>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.info"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "include_locale",
											"value": "<boolean>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "views open",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `none`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/views.open?trigger_id=<string>&view=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"views.open"
							],
							"query": [
								{
									"key": "trigger_id",
									"value": "<string>",
									"description": "(Required) Exchange a trigger to post to the user."
								},
								{
									"key": "view",
									"value": "<string>",
									"description": "(Required) A [view payload](/reference/surfaces/views). This must be a JSON-encoded string."
								}
							]
						},
						"description": "Open a view for a user."
					},
					"response": [
						{
							"name": "Typical error response, before getting to any possible validation errors.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/views.open?trigger_id=<string>&view=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"views.open"
									],
									"query": [
										{
											"key": "trigger_id",
											"value": "<string>"
										},
										{
											"key": "view",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response includes the opened view payload.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/views.open?trigger_id=<string>&view=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"views.open"
									],
									"query": [
										{
											"key": "trigger_id",
											"value": "<string>"
										},
										{
											"key": "view",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "users identity",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users.identity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.identity"
							]
						},
						"description": "Get a user's identity."
					},
					"response": [
						{
							"name": "You will receive at a minimum the following information:",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.identity?token=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.identity"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.identity",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.identity"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "users list",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users.list?limit=<integer>&cursor=<string>&include_locale=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.list"
							],
							"query": [
								{
									"key": "limit",
									"value": "<integer>",
									"description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors."
								},
								{
									"key": "cursor",
									"value": "<string>",
									"description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail."
								},
								{
									"key": "include_locale",
									"value": "<boolean>",
									"description": "Set this to `true` to receive the locale for users. Defaults to `false`"
								}
							]
						},
						"description": "Lists all users in a Slack team."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.list?token=<string>&limit=<integer>&cursor=<string>&include_locale=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "include_locale",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.list?token=<string>&limit=<integer>&cursor=<string>&include_locale=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.list"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "cursor",
											"value": "<string>"
										},
										{
											"key": "include_locale",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"members\": [],\n \"cache_ts\": \"<integer>\",\n \"response_metadata\": {}\n}"
						}
					]
				},
				{
					"name": "users lookup By Email",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users.lookupByEmail?email=jroche@slack-corp.com",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.lookupByEmail"
							],
							"query": [
								{
									"key": "email",
									"value": "jroche@slack-corp.com",
									"description": "(Required) An email address belonging to a user in the workspace"
								}
							]
						},
						"description": "Find a user with an email address."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.lookupByEmail?token=<string>&email=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.lookupByEmail"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "email",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.lookupByEmail?token=<string>&email=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.lookupByEmail"
									],
									"query": [
										{
											"key": "token",
											"value": "<string>"
										},
										{
											"key": "email",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"user\": {}\n}"
						}
					]
				},
				{
					"name": "users profile set",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `users.profile:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "<string>",
									"description": "Name of a single key to set. Usable only if `profile` is not passed."
								},
								{
									"key": "profile",
									"value": "<string>",
									"description": "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters."
								},
								{
									"key": "user",
									"value": "<string>",
									"description": "ID of user to change. This argument may only be specified by team admins on paid teams."
								},
								{
									"key": "value",
									"value": "<string>",
									"description": "Value to set a single key to. Usable only if `profile` is not passed."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users.profile.set",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.profile.set"
							]
						},
						"description": "Set the profile information for a user."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `users.profile:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "Name of a single key to set. Usable only if `profile` is not passed."
										},
										{
											"key": "profile",
											"value": "<string>",
											"description": "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters."
										},
										{
											"key": "user",
											"value": "<string>",
											"description": "ID of user to change. This argument may only be specified by team admins on paid teams."
										},
										{
											"key": "value",
											"value": "<string>",
											"description": "Value to set a single key to. Usable only if `profile` is not passed."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users.profile.set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.profile.set"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"username\": \"<string>\",\n \"profile\": {\n  \"real_name\": \"<string>\",\n  \"display_name\": \"<string>\",\n  \"avatar_hash\": \"<string>\",\n  \"real_name_normalized\": \"<string>\",\n  \"display_name_normalized\": \"<string>\",\n  \"title\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"skype\": \"<string>\",\n  \"status_text\": \"<string>\",\n  \"status_emoji\": \"<string>\",\n  \"fields\": \"<object>\",\n  \"always_active\": \"<boolean>\",\n  \"api_app_id\": \"<string>\",\n  \"bot_id\": \"<string>\",\n  \"email\": \"<email>\",\n  \"first_name\": \"<string>\",\n  \"guest_expiration_ts\": \"<integer>\",\n  \"guest_invited_by\": \"<string>\",\n  \"image_1024\": \"<uri>\",\n  \"image_192\": \"<uri>\",\n  \"image_24\": \"<uri>\",\n  \"image_32\": \"<uri>\",\n  \"image_48\": \"<uri>\",\n  \"image_512\": \"<uri>\",\n  \"image_72\": \"<uri>\",\n  \"image_original\": \"<uri>\",\n  \"is_app_user\": \"<boolean>\",\n  \"is_custom_image\": \"<boolean>\",\n  \"is_restricted\": \"<boolean>\",\n  \"is_ultra_restricted\": \"<boolean>\",\n  \"last_avatar_image_hash\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"memberships_count\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"pronouns\": \"<string>\",\n  \"status_default_emoji\": \"<string>\",\n  \"status_default_text\": \"<string>\",\n  \"status_default_text_canonical\": \"<string>\",\n  \"status_expiration\": \"<integer>\",\n  \"status_text_canonical\": \"<string>\",\n  \"team\": \"<string>\",\n  \"updated\": \"<integer>\",\n  \"user_id\": \"<string>\",\n  \"username\": \"<string>\"\n },\n \"email_pending\": \"<email>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `users.profile:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "name",
											"value": "<string>",
											"description": "Name of a single key to set. Usable only if `profile` is not passed."
										},
										{
											"key": "profile",
											"value": "<string>",
											"description": "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters."
										},
										{
											"key": "user",
											"value": "<string>",
											"description": "ID of user to change. This argument may only be specified by team admins on paid teams."
										},
										{
											"key": "value",
											"value": "<string>",
											"description": "Value to set a single key to. Usable only if `profile` is not passed."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users.profile.set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.profile.set"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "users profile get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users.profile.get?include_labels=<boolean>&user=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.profile.get"
							],
							"query": [
								{
									"key": "include_labels",
									"value": "<boolean>",
									"description": "Include labels for each ID in custom profile fields"
								},
								{
									"key": "user",
									"value": "<string>",
									"description": "User to retrieve profile info for"
								}
							]
						},
						"description": "Retrieves a user's profile information."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.profile.get?include_labels=<boolean>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.profile.get"
									],
									"query": [
										{
											"key": "include_labels",
											"value": "<boolean>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.profile.get?include_labels=<boolean>&user=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.profile.get"
									],
									"query": [
										{
											"key": "include_labels",
											"value": "<boolean>"
										},
										{
											"key": "user",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"profile\": {\n  \"real_name\": \"<string>\",\n  \"display_name\": \"<string>\",\n  \"avatar_hash\": \"<string>\",\n  \"real_name_normalized\": \"<string>\",\n  \"display_name_normalized\": \"<string>\",\n  \"title\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"skype\": \"<string>\",\n  \"status_text\": \"<string>\",\n  \"status_emoji\": \"<string>\",\n  \"fields\": \"<object>\",\n  \"always_active\": \"<boolean>\",\n  \"api_app_id\": \"<string>\",\n  \"bot_id\": \"<string>\",\n  \"email\": \"<email>\",\n  \"first_name\": \"<string>\",\n  \"guest_expiration_ts\": \"<integer>\",\n  \"guest_invited_by\": \"<string>\",\n  \"image_1024\": \"<uri>\",\n  \"image_192\": \"<uri>\",\n  \"image_24\": \"<uri>\",\n  \"image_32\": \"<uri>\",\n  \"image_48\": \"<uri>\",\n  \"image_512\": \"<uri>\",\n  \"image_72\": \"<uri>\",\n  \"image_original\": \"<uri>\",\n  \"is_app_user\": \"<boolean>\",\n  \"is_custom_image\": \"<boolean>\",\n  \"is_restricted\": \"<boolean>\",\n  \"is_ultra_restricted\": \"<boolean>\",\n  \"last_avatar_image_hash\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"memberships_count\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"pronouns\": \"<string>\",\n  \"status_default_emoji\": \"<string>\",\n  \"status_default_text\": \"<string>\",\n  \"status_default_text_canonical\": \"<string>\",\n  \"status_expiration\": \"<integer>\",\n  \"status_text_canonical\": \"<string>\",\n  \"team\": \"<string>\",\n  \"updated\": \"<integer>\",\n  \"user_id\": \"<string>\",\n  \"username\": \"<string>\"\n }\n}"
						}
					]
				},
				{
					"name": "users set Active",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `users:write`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users.setActive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.setActive"
							]
						},
						"description": "Marked a user as active. Deprecated and non-functional."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.setActive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.setActive"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users.setActive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.setActive"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "users set Photo",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "<string>",
									"description": "Authentication token. Requires scope: `users.profile:write`"
								},
								{
									"key": "crop_w",
									"value": "<string>",
									"description": "Width/height of crop box (always square)"
								},
								{
									"key": "crop_x",
									"value": "<string>",
									"description": "X coordinate of top-left corner of crop box"
								},
								{
									"key": "crop_y",
									"value": "<string>",
									"description": "Y coordinate of top-left corner of crop box"
								},
								{
									"key": "image",
									"value": "<string>",
									"description": "File contents via `multipart/form-data`."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users.setPhoto",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.setPhoto"
							]
						},
						"description": "Set the user profile photo"
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `users.profile:write`"
										},
										{
											"key": "crop_w",
											"value": "<string>",
											"description": "Width/height of crop box (always square)"
										},
										{
											"key": "crop_x",
											"value": "<string>",
											"description": "X coordinate of top-left corner of crop box"
										},
										{
											"key": "crop_y",
											"value": "<string>",
											"description": "Y coordinate of top-left corner of crop box"
										},
										{
											"key": "image",
											"value": "<string>",
											"description": "File contents via `multipart/form-data`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users.setPhoto",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.setPhoto"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"profile\": {\n  \"image_24\": \"<uri>\",\n  \"image_32\": \"<uri>\",\n  \"image_48\": \"<uri>\",\n  \"image_72\": \"<uri>\",\n  \"image_192\": \"<uri>\",\n  \"image_512\": \"<uri>\",\n  \"image_1024\": \"<uri>\",\n  \"image_original\": \"<uri>\",\n  \"avatar_hash\": \"<string>\"\n }\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "Authentication token. Requires scope: `users.profile:write`"
										},
										{
											"key": "crop_w",
											"value": "<string>",
											"description": "Width/height of crop box (always square)"
										},
										{
											"key": "crop_x",
											"value": "<string>",
											"description": "X coordinate of top-left corner of crop box"
										},
										{
											"key": "crop_y",
											"value": "<string>",
											"description": "Y coordinate of top-left corner of crop box"
										},
										{
											"key": "image",
											"value": "<string>",
											"description": "File contents via `multipart/form-data`."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users.setPhoto",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.setPhoto"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\",\n \"debug_step\": \"<string>\",\n \"dims\": \"<string>\",\n \"time_ident\": \"<integer>\"\n}"
						}
					]
				},
				{
					"name": "users set Presence",
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `users:write`",
								"key": "token",
								"value": "<string>"
							},
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "presence",
									"value": "<string>",
									"description": "Either `auto` or `away`"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/users.setPresence",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users.setPresence"
							]
						},
						"description": "Manually sets user presence."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "presence",
											"value": "<string>",
											"description": "Either `auto` or `away`"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users.setPresence",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.setPresence"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `users:write`",
										"key": "token",
										"value": "<string>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "presence",
											"value": "<string>",
											"description": "Either `auto` or `away`"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/users.setPresence",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users.setPresence"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\",\n \"error\": \"<string>\",\n \"callstack\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "views publish",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `none`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/views.publish?user_id=<string>&view=<string>&hash=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"views.publish"
							],
							"query": [
								{
									"key": "user_id",
									"value": "<string>",
									"description": "(Required) `id` of the user you want publish a view to."
								},
								{
									"key": "view",
									"value": "<string>",
									"description": "(Required) A [view payload](/reference/surfaces/views). This must be a JSON-encoded string."
								},
								{
									"key": "hash",
									"value": "<string>",
									"description": "A string that represents view state to protect against possible race conditions."
								}
							]
						},
						"description": "Publish a static view for a User."
					},
					"response": [
						{
							"name": "Typical error response, before getting to any possible validation errors.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/views.publish?user_id=<string>&view=<string>&hash=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"views.publish"
									],
									"query": [
										{
											"key": "user_id",
											"value": "<string>"
										},
										{
											"key": "view",
											"value": "<string>"
										},
										{
											"key": "hash",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response includes the published view payload.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/views.publish?user_id=<string>&view=<string>&hash=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"views.publish"
									],
									"query": [
										{
											"key": "user_id",
											"value": "<string>"
										},
										{
											"key": "view",
											"value": "<string>"
										},
										{
											"key": "hash",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "views push",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `none`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/views.push?trigger_id=<string>&view=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"views.push"
							],
							"query": [
								{
									"key": "trigger_id",
									"value": "<string>",
									"description": "(Required) Exchange a trigger to post to the user."
								},
								{
									"key": "view",
									"value": "<string>",
									"description": "(Required) A [view payload](/reference/surfaces/views). This must be a JSON-encoded string."
								}
							]
						},
						"description": "Push a view onto the stack of a root view."
					},
					"response": [
						{
							"name": "Typical error response.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/views.push?trigger_id=<string>&view=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"views.push"
									],
									"query": [
										{
											"key": "trigger_id",
											"value": "<string>"
										},
										{
											"key": "view",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response includes the pushed view payload.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/views.push?trigger_id=<string>&view=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"views.push"
									],
									"query": [
										{
											"key": "trigger_id",
											"value": "<string>"
										},
										{
											"key": "view",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "views update",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `none`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/views.update?view_id=<string>&external_id=<string>&view=<string>&hash=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"views.update"
							],
							"query": [
								{
									"key": "view_id",
									"value": "<string>",
									"description": "A unique identifier of the view to be updated. Either `view_id` or `external_id` is required."
								},
								{
									"key": "external_id",
									"value": "<string>",
									"description": "A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required."
								},
								{
									"key": "view",
									"value": "<string>",
									"description": "A [view object](/reference/surfaces/views). This must be a JSON-encoded string."
								},
								{
									"key": "hash",
									"value": "<string>",
									"description": "A string that represents view state to protect against possible race conditions."
								}
							]
						},
						"description": "Update an existing view."
					},
					"response": [
						{
							"name": "Typical success response includes the updated view payload.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/views.update?view_id=<string>&external_id=<string>&view=<string>&hash=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"views.update"
									],
									"query": [
										{
											"key": "view_id",
											"value": "<string>"
										},
										{
											"key": "external_id",
											"value": "<string>"
										},
										{
											"key": "view",
											"value": "<string>"
										},
										{
											"key": "hash",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response.",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `none`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/views.update?view_id=<string>&external_id=<string>&view=<string>&hash=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"views.update"
									],
									"query": [
										{
											"key": "view_id",
											"value": "<string>"
										},
										{
											"key": "external_id",
											"value": "<string>"
										},
										{
											"key": "view",
											"value": "<string>"
										},
										{
											"key": "hash",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "workflows step Completed",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `workflow.steps:execute`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/workflows.stepCompleted?workflow_step_execute_id=<string>&outputs=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"workflows.stepCompleted"
							],
							"query": [
								{
									"key": "workflow_step_execute_id",
									"value": "<string>",
									"description": "(Required) Context identifier that maps to the correct workflow step execution."
								},
								{
									"key": "outputs",
									"value": "<string>",
									"description": "Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object."
								}
							]
						},
						"description": "Indicate that an app's step in a workflow completed execution."
					},
					"response": [
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `workflow.steps:execute`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows.stepCompleted?workflow_step_execute_id=<string>&outputs=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows.stepCompleted"
									],
									"query": [
										{
											"key": "workflow_step_execute_id",
											"value": "<string>"
										},
										{
											"key": "outputs",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `workflow.steps:execute`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows.stepCompleted?workflow_step_execute_id=<string>&outputs=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows.stepCompleted"
									],
									"query": [
										{
											"key": "workflow_step_execute_id",
											"value": "<string>"
										},
										{
											"key": "outputs",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "workflows step Failed",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `workflow.steps:execute`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/workflows.stepFailed?workflow_step_execute_id=<string>&error=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"workflows.stepFailed"
							],
							"query": [
								{
									"key": "workflow_step_execute_id",
									"value": "<string>",
									"description": "(Required) Context identifier that maps to the correct workflow step execution."
								},
								{
									"key": "error",
									"value": "<string>",
									"description": "(Required) A JSON-based object with a `message` property that should contain a human readable error message."
								}
							]
						},
						"description": "Indicate that an app's step in a workflow failed to execute."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `workflow.steps:execute`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows.stepFailed?workflow_step_execute_id=<string>&error=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows.stepFailed"
									],
									"query": [
										{
											"key": "workflow_step_execute_id",
											"value": "<string>"
										},
										{
											"key": "error",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `workflow.steps:execute`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows.stepFailed?workflow_step_execute_id=<string>&error=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows.stepFailed"
									],
									"query": [
										{
											"key": "workflow_step_execute_id",
											"value": "<string>"
										},
										{
											"key": "error",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				},
				{
					"name": "workflows update Step",
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) Authentication token. Requires scope: `workflow.steps:execute`",
								"key": "token",
								"value": "<string>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/workflows.updateStep?workflow_step_edit_id=<string>&inputs=<string>&outputs=<string>&step_name=<string>&step_image_url=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"workflows.updateStep"
							],
							"query": [
								{
									"key": "workflow_step_edit_id",
									"value": "<string>",
									"description": "(Required) A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`."
								},
								{
									"key": "inputs",
									"value": "<string>",
									"description": "A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables)."
								},
								{
									"key": "outputs",
									"value": "<string>",
									"description": "An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed."
								},
								{
									"key": "step_name",
									"value": "<string>",
									"description": "An optional field that can be used to override the step name that is shown in the Workflow Builder."
								},
								{
									"key": "step_image_url",
									"value": "<string>",
									"description": "An optional field that can be used to override app image that is shown in the Workflow Builder."
								}
							]
						},
						"description": "Update the configuration for a workflow extension step."
					},
					"response": [
						{
							"name": "Typical success response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `workflow.steps:execute`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows.updateStep?workflow_step_edit_id=<string>&inputs=<string>&outputs=<string>&step_name=<string>&step_image_url=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows.updateStep"
									],
									"query": [
										{
											"key": "workflow_step_edit_id",
											"value": "<string>"
										},
										{
											"key": "inputs",
											"value": "<string>"
										},
										{
											"key": "outputs",
											"value": "<string>"
										},
										{
											"key": "step_name",
											"value": "<string>"
										},
										{
											"key": "step_image_url",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						},
						{
							"name": "Typical error response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									},
									{
										"description": "(Required) Authentication token. Requires scope: `workflow.steps:execute`",
										"key": "token",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows.updateStep?workflow_step_edit_id=<string>&inputs=<string>&outputs=<string>&step_name=<string>&step_image_url=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows.updateStep"
									],
									"query": [
										{
											"key": "workflow_step_edit_id",
											"value": "<string>"
										},
										{
											"key": "inputs",
											"value": "<string>"
										},
										{
											"key": "outputs",
											"value": "<string>"
										},
										{
											"key": "step_name",
											"value": "<string>"
										},
										{
											"key": "step_image_url",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ok\": \"<boolean>\"\n}"
						}
					]
				}
			],
			"description": "The Slack Web API is an interface for querying information from and enacting change in a Slack workspace.\n\nUse it on the fly for ad-hoc queries, or as part of a more complex tapestry of platform features in a [Slack app](https://api.slack.com/start/overview).\n\nWhat can you do with the Web API? [Find out](https://api.slack.com/methods)\n\n\n[Web API basics](https://api.slack.com/web#basics)\n\n[Evaluating responses](https://api.slack.com/web#responses)\n\n[Authentication](https://api.slack.com/web#authentication)\n\n[HTTPS, SSL, and TLS](https://api.slack.com/web#ssl)\n\n[OpenAPI specification](https://api.slack.com/web#spec)\n\n[Methods](https://api.slack.com/web#methods)\n"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bot_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://slack.com/api"
		}
	]
}