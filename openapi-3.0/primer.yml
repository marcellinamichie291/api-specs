openapi: 3.0.2
servers:
  - url: https://api.sandbox.primer.io
  - url: https://api.primer.io
info:
  x-logo:
    url: https://apidocs.primer.io/docs/assets/images/primer-logo.svg
  title: Primer API
  version: "2.2"

x-readme:
  explorer-enabled: true
  samples-languages: ["curl", "javascript", "python", "kotlin", "swift"]
  headers: [{ "key": "X-API-VERSION", "value": "2.2" }]
security:
  - ApiKeyAuth: []

paths:
  /client-session:
    post:
      tags:
        - Client Session
      summary: Create a client session
      description: |
        Creating a client session generates a client token: a temporary key used to initialize [Universal Checkout](https://primer.io/docs/accept-payments/setup-universal-checkout/installation/web) and authenticate it against your account.

        Universal Checkout automatically retrieves all the settings from the client session and the Dashboard to configure the payment methods and the checkout experience.

        <b>Note:</b>
        When creating a Client Session, please make sure to provide `currencyCode`, `orderId`, and at least one of `amount` or `lineItems`. 
        If any of these are not yet available, you can provide them when making the payment request.
        
        <code>POST /client-session</code> does not have required fields as all fields are not always known when a client session is created. 
        Use <code>PATCH /client-session</code> to update the parameters throughout the checkout session.

        Client tokens expire after 24 hours.

      operationId: create_client_side_token_client_session_post
      requestBody:
        content:
          application/json:
            schema:
              title: Request
              allOf:
                - $ref: "#/components/schemas/ClientSessionAPIRequest"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientSessionWithTokenAPIResponse"
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: ClientSessionValidationError
                  description: The client token is invalid.
                  recoverySuggestion: Please provide a valid client token.
                  diagnosticsId: "1234567898"
        "422":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422ErrorResponse"
              example:
                error:
                  errorId: RequestValidationError
                  description: We were unable to validate your request, please check your payload against https://primer.io/docs/api
                  diagnosticsId: "1234567898"
                  validationErrors:
                    [
                      {
                        model: "ClientSessionAPIRequest",
                        errors:
                          [
                            {
                              path: "$.customerId",
                              description: "Value must be a valid string",
                            },
                          ],
                      },
                    ]
    get:
      tags:
        - Client Session
      summary: Retrieve a client session
      description: |
        This API call retrieves all the details associated with the client session corresponding to the client token that is provided in the request. The fields with empty values are excluded from the response.

      operationId: retrieve_client_side_token_client_session_get
      parameters:
        - description: Client token corresponding to the client session to retrieve
          schema:
            title: Client Token
            type: string
            description: Client token
          name: clientToken
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientSessionAPIResponse"
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
        "422":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422ErrorResponse"
    patch:
      tags:
        - Client Session
      summary: Update client session
      description: |
        You can update a clients session created earlier with the `PATCH /client-session` [API call](#operation/create_client_side_token_client_session_post).

        The only required field for the request is `clientToken`. Other supported request fields are same as for the `POST /client-session` [API call](#operation/create_client_side_token_client_session_post).

        You need to specify only the fields you wish to update. However, if the items that are to be updated are of type `array`, then you need to provide the complete array along with modified items.

        If you wish to update nested fields on the client session, such as the customer `emailAddress` field, you can pass the `customer` object with only one field, `emailAddress`, to update.

        If you simply wish to clear the value of the field, pass `null` as your input.

        You can update `paymentMethod.vaultOnSuccess` field but updating of the `paymentMethod.options` field through `PATCH /client-session` is not supported.

        The response will contain all the fields of the client session including the ones that were changed.

      operationId: update_client_side_token_client_session_patch
      requestBody:
        content:
          application/json:
            schema:
              title: Request
              allOf:
                - $ref: "#/components/schemas/ClientSessionUpdateAPIRequest"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientSessionAPIResponse"
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
        "422":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422ErrorResponse"

  /payments:
    get:
      tags:
        - Payments API
      summary: Search & list payments
      description: |
        <p/>

        Retrieve a list of your payments.

        Results are paginated, they will only return up to 100 payments maximum.
        To access the next page of result, set the `cursor` query parameter to the value of `nextCursor` in
        your current result payload. Use `prevCursor` to go back to the previous page.

        **Note:** this endpoint returns a list of
        summarized payments. Not all payments attributes are present. You can use
        the query parameters to filter payments. You can separate multiple query parameters with the `&` symbol.
        Query parameters with types of the form "Array of strings" (such as the status parameter) can be specified as a comma-separated list.

        For example, if you wanted to get both `FAILED`  and `CANCELLED` payments, for customer `john-123`, you would use:
        ```bash
        curl --location --request GET 'https://api.primer.io/payments?status=FAILED,CANCELLED&customer_id=john-123' \
        --header 'X-Api-Key: <YOUR_API_KEY>'
        ```

        You can alternatively specify a list by repeating the parameter multiple times.
        
        **Note:** payments will be available within a minute from being created.

      operationId: list_payments_payments_get
      parameters:
        - description: Filter payments by their status.
          required: false
          schema:
            title: Payment status
            type: array
            items:
              $ref: "#/components/schemas/PaymentStatus"
            description: Filter payments by their status.
          name: status
          in: query
        - description: Filter payments by their payment method type.
          required: false
          schema:
            title: Payment method type
            type: array
            items:
              $ref: "#/components/schemas/PaymentMethodTypeEnum"
            description: Filter payments by their payment method type.
          name: payment_method_type
          in: query
        - description: Filter payments by their payment processor.
          required: false
          schema:
            title: Payment processor
            type: array
            items:
              type: string
            description: Filter payments by their payment processor.
          name: processor
          in: query
        - description: |
            Filter payments by their payment currency.
            e.g. use `USD` for US dollars.
          required: false
          schema:
            title: Payment currency
            type: array
            items:
              type: string
            description: |
              Filter payments by their payment currency.

              Use the 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).
              e.g. use `USD` for US dollars."
          name: currency_code
          in: query
        - description: Return only payments from this date (inclusive).
          required: false
          schema:
            title: Payment date
            type: string
            description: Return only payments from this date (inclusive).
            format: date-time
          name: from_date
          in: query
        - description: Return only payments up to this date (inclusive).
          required: false
          schema:
            title: Payment date
            type: string
            description: Return only payments up to this date (inclusive).
            format: date-time
          name: to_date
          in: query
        - description: Return payments related to this order ID.
          required: false
          schema:
            title: Payment order ID
            type: string
            description: Return payments related to this order ID.
          name: order_id
          in: query
        - description: Return payments of this amount minimum (inclusive).
          required: false
          schema:
            title: Payment amount
            type: integer
            description: Return payments of this amount minimum (inclusive).
          name: min_amount
          in: query
        - description: Return payments of this amount max (inclusive).
          required: false
          schema:
            title: Payment amount
            type: integer
            description: Return payments of this amount max (inclusive).
          name: max_amount
          in: query
        - description: ID of the customer that has made the payment.
          required: false
          schema:
            title: Customer ID
            type: array
            items:
              type: string
            description: ID of the customer that has made the payment.
          name: customer_id
          in: query
        - description: ID of the merchant involved in the payment.
          required: false
          schema:
            title: Merchant ID
            type: array
            items:
              type: string
            description: ID of the merchant involved in the payment.
          name: merchant_id
          in: query
        - description: Email of the customer that has made the payment.
          required: false
          schema:
            title: Customer email address
            type: array
            items:
              type: string
            description: Email of the customer that has made the payment.
          name: customer_email_address
          in: query
        - description: Last 4 digits of the card used for the payment.
          required: false
          schema:
            title: Last 4 digits
            type: array
            items:
              type: string
            description: Last 4 digits of the card used for the payment.
          name: last_4_digits
          in: query
        - description: Paypal email address associated with the payment.
          required: false
          schema:
            title: Paypal email
            type: array
            items:
              type: string
            description: Paypal email address associated with the payment.
          name: paypal_email
          in: query
        - description: Klarna email address associated with the payment.
          required: false
          schema:
            title: Klarna email
            type: array
            items:
              type: string
            description: Klarna email address associated with the payment.
          name: klarna_email
          in: query
        - description: Maximum number of payments to return per page.
          required: false
          schema:
            title: Limit result set
            maximum: 100.0
            minimum: 1.0
            type: integer
            description: Maximum number of payments to return per page.
            default: 100
          name: limit
          in: query
        - description:
            If results are paginated, pass the `nextCursor` to access next
            page.
          required: false
          schema:
            title: Page cursor
            type: string
            description:
              If results are paginated, pass the `nextCursor` to access next
              page.
          name: cursor
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentListAPIResponse"
        "422":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422ErrorResponse"
              example:
                error:
                  errorId: RequestValidationError
                  description: Invalid type for `currencyCode`
                  recoverySuggestion: The currency code must be a valid value
                  diagnosticsId: "1234567898"
    post:
      tags:
        - Payments API
      summary: Create a payment
      description: |
        <p/>

        Create and authorize a payment for a given customer order. You
        should provide a payment method token here to avoid PCI implications.

        If only a payment method token is passed, the values passed with the Client Session is used to determine the amount, currency etc.
        Note: `amount`, `currencyCode` and `orderId` are required during payment creation. Make sure to pass these fields when creating a client session, or if not yet available, when creating a payment.
        
        All fields provided on this request will take preference over any field on the `order` associated with the client session. E.g. if you pass `amount` on this request, it will override the `amount` on the `order` associated with the Client Session.

      operationId: create_payment_payments_post
      parameters:
        - required: false
          schema:
            title: X-Idempotency-Key
            type: string
          name: X-Idempotency-Key
          description: Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).
          in: header
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentCreationAPIRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentAPIResponse"
              example:
                id: kHdEw9EG
                date: "2021-02-21T15:36:16.367687"
                status: AUTHORIZED
                orderId: order-abc
                currencyCode: EUR
                amount: 42
                customerId: customer-123
                customer:
                  email: customer123@gmail.com
                paymentMethod:
                  paymentMethodToken: heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4
                  isVaulted: true
                  descriptor: "Purchase: Socks"
                  analyticsId: VtkMDAxZW5isH0HsbbNxZ3lo
                  paymentMethodType: PAYMENT_CARD
                  paymentMethodData:
                    first6Digits: "411111"
                    last4Digits: "1111"
                    expirationMonth: "12"
                    expirationYear: "2030"
                    cardholderName: John Biggins
                    network: Visa
                    isNetworkTokenized: false
                    binData:
                      network: VISA
                      regionalRestriction: UNKNOWN
                      accountNumberType: UNKNOWN
                      accountFundingType: UNKNOWN
                      prepaidReloadableIndicator: NOT_APPLICABLE
                      productUsageType: UNKNOWN
                      productCode: VISA
                      productName: VISA
                processor:
                  name: STRIPE
                  processor_merchant_id: acct_stripe_1234
                  amountCaptured: 0
                  amountRefunded: 0
                transactions:
                  - type: SALE
                    processorStatus: AUTHORIZED
                    processorName: STRIPE
                    processorMerchantId: acct_stripe_1234
                    processorTransactionId: 54c4eb5b3ef8a
                metadata:
                  productId: 123
                  merchantId: a13bsd62s
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: PaymentError
                  description: The payment could not be created.
                  diagnosticsId: "1234567898"
        "422":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422ErrorResponse"
              example:
                error:
                  errorId: RequestValidationError
                  description: Missing fields for payment.
                  recoverySuggestion: When creating a payment `amount` must either be provided via the Client Session or the Payment request.
                  diagnosticsId: "1234567898"
  /payments/{id}/capture:
    post:
      tags:
        - Payments API
      summary: Capture a payment
      description: |
        <p/>

        If you have successfully authorized a payment, you can now
        fully capture, or partially capture funds from the authorized payment, depending
        on whether your selected payment processor supports it. The payment will
        be updated to `SETTLED` or `SETTLING`, depending on the payment method type.

        The payload sent in this capture request is completely optional. If you don't
        send a payload with the capture request, the full amount that was authorized
        will be sent for capture. Below are the available payload attributes, which
        give you more granular control when capturing funds, if you require it.

      operationId: capture_payment_payments__id__capture_post
      parameters:
        - required: true
          schema:
            title: Payment ID
            type: string
          name: id
          description: ID of the payment to capture.
          in: path
        - required: false
          schema:
            title: X-Idempotency-Key
            type: string
          name: X-Idempotency-Key
          description: Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).
          in: header
      requestBody:
        content:
          application/json:
            schema:
              title: Data
              allOf:
                - $ref: "#/components/schemas/PaymentCaptureAPIRequest"
              default:
                final: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentAPIResponse"
              example:
                id: kHdEw9EG
                date: "2021-02-21T15:36:16.367687"
                status: SETTLED
                orderId: order-abc
                customerId: customer-123
                currencyCode: EUR
                amount: 42
                paymentMethod:
                  paymentMethodToken: heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4
                  isVaulted: true
                  descriptor: "Purchase: Socks"
                  analyticsId: VtkMDAxZW5isH0HsbbNxZ3lo
                  paymentMethodType: PAYMENT_CARD
                  paymentMethodData:
                    first6Digits: "411111"
                    last4Digits: "1111"
                    expirationMonth: "12"
                    expirationYear: "2030"
                    cardholderName: John Biggins
                    network: Visa
                    isNetworkTokenized: false
                    binData:
                      network: VISA
                      regionalRestriction: UNKNOWN
                      accountNumberType: UNKNOWN
                      accountFundingType: UNKNOWN
                      prepaidReloadableIndicator: NOT_APPLICABLE
                      productUsageType: UNKNOWN
                      productCode: VISA
                      productName: VISA
                processor:
                  name: STRIPE
                  processor_merchant_id: acct_stripe_1234
                  amountCaptured: 42
                  amountRefunded: 0
                transactions:
                  - type: SALE
                    processorStatus: SETTLED
                    processorName: STRIPE
                    processorMerchantId: acct_stripe_1234
                    processorTransactionId: 54c4eb5b3ef8a
                customer:
                  email: customer123@gmail.com
                metadata:
                  productId: 123
                  merchantId: a13bsd62s
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: PaymentError
                  description: The payment could not be found
                  diagnosticsId: "1234567898"
        "422":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422ErrorResponse"
              example:
                error:
                  errorId: RequestValidationError
                  description: We were unable to validate your request, please check your payload against https://primer.io/docs/api
                  diagnosticsId: "1234567898"
                  validationErrors:
                    [
                      {
                        model: "PaymentCaptureAPIRequest",
                        errors:
                          [
                            {
                              path: "$.amount",
                              description: "Value must be a valid integer",
                            },
                          ],
                      },
                    ]
  /payments/{id}/cancel:
    post:
      tags:
        - Payments API
      summary: Cancel a payment
      description: |
        <p/>

        Provided the payment has not reached `SETTLED` status, Primer will
        send a "void" request to the payment processor, thereby cancelling the payment
        and releasing the hold on customer funds. Upon success, the payment will transition
        to `CANCELLED`. The payload is optional.

      operationId: cancel_payment_payments__id__cancel_post
      parameters:
        - required: true
          schema:
            title: Payment ID
            type: string
          name: id
          description: ID of payment to cancel.
          in: path
        - required: false
          schema:
            title: X-Idempotency-Key
            type: string
          name: X-Idempotency-Key
          description: Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).
          in: header
      requestBody:
        content:
          application/json:
            schema:
              title: Data
              allOf:
                - $ref: "#/components/schemas/PaymentCancelAPIRequest"
              default: {}
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentAPIResponse"
              example:
                id: kHdEw9EG
                date: "2021-02-21T15:36:16.367687"
                status: CANCELLED
                orderId: order-abc
                customerId: customer-123
                currencyCode: EUR
                amount: 42
                paymentMethod:
                  paymentMethodToken: heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4
                  isVaulted: true
                  descriptor: "Purchase: Socks"
                  analyticsId: VtkMDAxZW5isH0HsbbNxZ3lo
                  paymentMethodType: PAYMENT_CARD
                  paymentMethodData:
                    first6Digits: "411111"
                    last4Digits: "1111"
                    expirationMonth: "12"
                    expirationYear: "2030"
                    cardholderName: John Biggins
                    network: Visa
                    isNetworkTokenized: false
                    binData:
                      network: VISA
                      regionalRestriction: UNKNOWN
                      accountNumberType: UNKNOWN
                      accountFundingType: UNKNOWN
                      prepaidReloadableIndicator: NOT_APPLICABLE
                      productUsageType: UNKNOWN
                      productCode: VISA
                      productName: VISA
                processor:
                  name: STRIPE
                  processor_merchant_id: acct_stripe_1234
                  amountCaptured: 0
                  amountRefunded: 0
                transactions:
                  - type: SALE
                    processorStatus: CANCELLED
                    processorName: STRIPE
                    processorMerchantId: acct_stripe_1234
                    processorTransactionId: 54c4eb5b3ef8a
                customer:
                  email: customer123@gmail.com
                metadata:
                  productId: 123
                  merchantId: a13bsd62s
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: PaymentError
                  description: The payment could not be found
                  diagnosticsId: "1234567898"
  /payments/{id}/refund:
    post:
      tags:
        - Payments API
      summary: Refund a payment
      description: |
        <p/>

        By default, this request will refund the full amount.

        Optionally, pass in a lesser amount for a partial refund.

      operationId: refund_payment_payments__id__refund_post
      parameters:
        - required: true
          schema:
            title: Payment ID
            type: string
          name: id
          description: ID of payment to refund.
          in: path
        - required: false
          schema:
            title: X-Idempotency-Key
            type: string
          name: X-Idempotency-Key
          description: Optional key to make the request idempotent. Learn more in the [Idempotency Key guide](../docs#idempotency-key).
          in: header
      requestBody:
        content:
          application/json:
            schema:
              title: Data
              allOf:
                - $ref: "#/components/schemas/PaymentRefundAPIRequest"
              default: {}
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentAPIResponse"
              example:
                id: kHdEw9EG
                date: "2021-02-21T15:36:16.367687"
                status: SETTLED
                orderId: order-abc
                customerId: customer-123
                currencyCode: EUR
                amount: 42
                paymentMethod:
                  paymentMethodToken: heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4
                  isVaulted: true
                  descriptor: "Purchase: Socks"
                  analyticsId: VtkMDAxZW5isH0HsbbNxZ3lo
                  paymentMethodType: PAYMENT_CARD
                  paymentMethodData:
                    first6Digits: "411111"
                    last4Digits: "1111"
                    expirationMonth: "12"
                    expirationYear: "2030"
                    cardholderName: John Biggins
                    network: Visa
                    isNetworkTokenized: false
                    binData:
                      network: VISA
                      regionalRestriction: UNKNOWN
                      accountNumberType: UNKNOWN
                      accountFundingType: UNKNOWN
                      prepaidReloadableIndicator: NOT_APPLICABLE
                      productUsageType: UNKNOWN
                      productCode: VISA
                      productName: VISA
                processor:
                  name: STRIPE
                  processor_merchant_id: acct_stripe_1234
                  amountCaptured: 42
                  amountRefunded: 42
                transactions:
                  - type: SALE
                    processorStatus: SETTLED
                    processorName: STRIPE
                    processorMerchantId: acct_stripe_1234
                    processorTransactionId: 54c4eb5b3ef8a
                  - type: REFUND
                    processorStatus: SETTLED
                    processorName: STRIPE
                    processorMerchantId: acct_stripe_1234
                    processorTransactionId: 54c4eb5b3ef8a
                customer:
                  email: customer123@gmail.com
                metadata:
                  productId: 123
                  merchantId: a13bsd62s
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: PaymentError
                  description: The payment could not be found
                  diagnosticsId: "1234567898"
        "422":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422ErrorResponse"
              example:
                error:
                  errorId: RequestValidationError
                  description: We were unable to validate your request, please check your payload against https://primer.io/docs/api
                  diagnosticsId: "1234567898"
                  validationErrors:
                    [
                      {
                        model: "PaymentCaptureAPIRequest",
                        errors:
                          [
                            {
                              path: "$.amount",
                              description: "Value must be a valid integer",
                            },
                          ],
                      },
                    ]
  /payments/{id}/resume:
    post:
      tags:
        - Payments API
      summary: Resume a payment
      description: |
        <p/>

        Resume a payment's workflow execution from a paused state. This
        is usually required when a Workflow was paused in order to get further information
        from the customer, or when waiting for an asynchronous response from a third
        party connection.

      operationId: resume_payment_payments__id__resume_post
      parameters:
        - required: true
          schema:
            title: Payment ID
            type: string
          name: id
          description: ID of payment to resume.
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentResumeAPIRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentAPIResponse"
              example:
                id: kHdEw9EG
                date: "2021-02-21T15:36:16.367687"
                status: AUTHORIZED
                orderId: order-abc
                customerId: customer-123
                currencyCode: EUR
                amount: 42
                paymentMethod:
                  paymentMethodToken: heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4
                  isVaulted: true
                  descriptor: "Purchase: Socks"
                  analyticsId: VtkMDAxZW5isH0HsbbNxZ3lo
                  paymentMethodType: PAYMENT_CARD
                  paymentMethodData:
                    first6Digits: "411111"
                    last4Digits: "1111"
                    expirationMonth: "12"
                    expirationYear: "2030"
                    cardholderName: John Biggins
                    network: Visa
                    isNetworkTokenized: false
                    binData:
                      network: VISA
                      regionalRestriction: UNKNOWN
                      accountNumberType: UNKNOWN
                      accountFundingType: UNKNOWN
                      prepaidReloadableIndicator: NOT_APPLICABLE
                      productUsageType: UNKNOWN
                      productCode: VISA
                      productName: VISA
                processor:
                  name: STRIPE
                  processor_merchant_id: acct_stripe_1234
                  amountCaptured: 0
                  amountRefunded: 0
                transactions:
                  - type: SALE
                    processorStatus: AUTHORIZED
                    processorName: STRIPE
                    processorMerchantId: acct_stripe_1234
                    processorTransactionId: 54c4eb5b3ef8a
                customer:
                  email: customer123@gmail.com
                metadata:
                  productId: 123
                  merchantId: a13bsd62s
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: PaymentError
                  description: The payment could not be found
                  diagnosticsId: "1234567898"
  /payments/{id}:
    get:
      tags:
        - Payments API
      summary: Get a payment
      description: |
        <p/>

        Retrieve a payment by its ID.

      operationId: get_payment_by_id_payments__id__get
      parameters:
        - required: true
          schema:
            title: Payment ID
            type: string
          name: id
          description: ID of payment to retrieve.
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentAPIResponse"
              example:
                id: kHdEw9EG
                date: "2021-02-21T15:36:16.367687"
                status: AUTHORIZED
                orderId: order-abc
                customerId: customer-123
                currencyCode: EUR
                amount: 42
                paymentMethod:
                  paymentMethodToken: heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4
                  isVaulted: true
                  descriptor: "Purchase: Socks"
                  analyticsId: VtkMDAxZW5isH0HsbbNxZ3lo
                  paymentMethodType: PAYMENT_CARD
                  paymentMethodData:
                    first6Digits: "411111"
                    last4Digits: "1111"
                    expirationMonth: "12"
                    expirationYear: "2030"
                    cardholderName: John Biggins
                    network: Visa
                    isNetworkTokenized: false
                    binData:
                      network: VISA
                      regionalRestriction: UNKNOWN
                      accountNumberType: UNKNOWN
                      accountFundingType: UNKNOWN
                      prepaidReloadableIndicator: NOT_APPLICABLE
                      productUsageType: UNKNOWN
                      productCode: VISA
                      productName: VISA
                processor:
                  name: STRIPE
                  processor_merchant_id: acct_stripe_1234
                  amountCaptured: 0
                  amountRefunded: 0
                transactions:
                  - type: SALE
                    processorStatus: AUTHORIZED
                    processorName: STRIPE
                    processorMerchantId: acct_stripe_1234
                    processorTransactionId: 54c4eb5b3ef8a
                customer:
                  email: customer123@gmail.com
                metadata:
                  productId: 123
                  merchantId: a13bsd62s
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: PaymentError
                  description: The payment could not be found
                  diagnosticsId: "1234567898"
  /payment-instruments/{paymentMethodToken}/vault:
    post:
      tags:
        - Payment Methods API
      summary: Save a payment method token
      description: |
        <p/>

        Save a `SINGLE_USE` payment method token so it can be used
        again later. You can optionally choose to verify the payment method
        before vaulting. If verification fails, no payment method data will
        be vaulted. Verification can minimise fraud and boost subscription
        rates for recurring payments.

        If you try to vault an already vaulted token, you will get the existing vaulted token back.

      operationId: vault_payment_method_payment_methods__token__vault_post
      parameters:
        - description: Payment method token to store.
          required: true
          schema:
            title: Payment Method Token
            type: string
            description: Payment method token
          name: paymentMethodToken
          in: path
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VaultPaymentMethodAPIRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifiedMerchantPaymentMethodTokenAPIResponse"
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: FailedVerification
                  description: Payment method could not be verified
                  diagnosticsId: "1234567898"
        "422":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/422ErrorResponse"
              example:
                error:
                  errorId: RequestValidationError
                  description: We were unable to validate your request, please check your payload against https://primer.io/docs/api
                  diagnosticsId: "1234567898"
                  validationErrors:
                    [
                      {
                        model: "VaultPaymentInstrumentAPIRequest",
                        errors:
                          [
                            {
                              path: "$.customerId",
                              description: "Ensure this value has at least 1 characters",
                            },
                          ],
                      },
                    ]
  /payment-instruments:
    get:
      tags:
        - Payment Methods API
      summary: List saved payment methods
      description: Retrieve a list of stored payment methods for a customer.
      operationId: get_payment_methods_payment_methods_get
      parameters:
        - description: Return payment methods for this customer ID.
          required: true
          schema:
            title: Customer ID
            type: string
            description: Return payment methods for this customer ID.
          name: customer_id
          in: query
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifiedMerchantPaymentMethodTokenListAPIResponse"
  /payment-instruments/{paymentMethodToken}:
    delete:
      tags:
        - Payment Methods API
      summary: Delete a saved payment method
      description: Delete a saved payment method.
      operationId: delete_payment_method_payment_methods__token__delete
      parameters:
        - description: Saved payment method token to delete.
          required: true
          schema:
            title: Payment Method Token
            type: string
            description: Payment method token
          name: paymentMethodToken
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifiedMerchantPaymentMethodTokenAPIResponse"
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: InvalidPaymentInstrumentToken
                  description: Invalid payment instrument.
                  diagnosticsId: "1234567898"

  /payment-instruments/{paymentMethodToken}/default:
    post:
      tags:
        - Payment Methods API
      summary: Update the default saved payment method
      description:
        Update a saved payment method to be the default stored payment
        method for a customer.
      operationId: set_payment_method_default_payment_methods__token__default_post
      parameters:
        - description: Saved payment method token to set to default.
          required: true
          schema:
            title: Token
            type: string
            description: Payment method token
          name: paymentMethodToken
          in: path
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantPaymentMethodTokenAPIResponse"
        "400":
          description: Error Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400ErrorResponse"
              example:
                error:
                  errorId: InvalidPaymentInstrumentToken
                  description: Invalid payment instrument.
                  diagnosticsId: "1234567898"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:
    AccountFundingTypeEnum:
      title: AccountFundingTypeEnum
      enum:
        - CREDIT
        - DEBIT
        - PREPAID
        - CHARGE
        - DEFERRED_DEBIT
        - UNKNOWN
      type: string
      description: An enumeration.

    ApayaCustomerTokenAPISchema:
      title: ApayaCustomerTokenAPISchema
      required:
        - mx
      type: object
      properties:
        mx:
          title: Mx
          type: string
        mnc:
          title: Mnc
          type: integer
        mcc:
          title: Mcc
          type: integer

    BinDataOptionalAPISchema:
      title: BinDataAPISchema
      type: object
      properties:
        network:
          $ref: "#/components/schemas/CardNetworkEnum"

    BinDataAPISchema:
      title: BinDataAPISchema
      required:
        - network
        - regionalRestriction
        - accountNumberType
        - accountFundingType
        - prepaidReloadableIndicator
        - productUsageType
        - productCode
        - productName
      type: object
      properties:
        network:
          $ref: "#/components/schemas/CardNetworkEnum"
        issuerCountryCode:
          $ref: "#/components/schemas/CountryCodeEnum"
        issuerName:
          title: Issuername
          type: string
        issuerCurrencyCode:
          $ref: "#/components/schemas/Currency"
        regionalRestriction:
          $ref: "#/components/schemas/CardRegionRestrictionEnum"
        accountNumberType:
          $ref: "#/components/schemas/CardAccountNumberTypeEnum"
        accountFundingType:
          $ref: "#/components/schemas/AccountFundingTypeEnum"
        prepaidReloadableIndicator:
          $ref: "#/components/schemas/PrepaidReloadableEnum"
        productUsageType:
          $ref: "#/components/schemas/CardProductTypeEnum"
        productCode:
          title: Productcode
          type: string
        productName:
          title: Productname
          type: string

    BlockingPaymentActionTypeEnum:
      title: BlockingPaymentActionTypeEnum
      enum:
        - 3DS_AUTHENTICATION
        - USE_PRIMER_SDK
      type: string
      description: An enumeration.

    CardAccountNumberTypeEnum:
      title: CardAccountNumberTypeEnum
      enum:
        - PRIMARY_ACCOUNT_NUMBER
        - NETWORK_TOKEN
        - UNKNOWN
      type: string
      description: An enumeration.

    CardNetworkEnum:
      title: CardNetworkEnum
      type: string
      description: |
        [The list of available card networks and their `CARD_NETWORK_TYPE` can be found here.](https://www.notion.so/primerio/Payment-Method-Types-2b971a8c54c3452cae0b2fffe9167d72)

    CardProductTypeEnum:
      title: CardProductTypeEnum
      enum:
        - CONSUMER
        - BUSINESS
        - GOVERNMENT
        - UNKNOWN
      type: string
      description: An enumeration.

    CardRegionRestrictionEnum:
      title: CardRegionRestrictionEnum
      enum:
        - DOMESTIC_USE_ONLY
        - NONE
        - UNKNOWN
      type: string
      description: An enumeration.

    ClientSessionUpdateAPIRequest:
      title: ClientSessionUpdateAPIRequest
      type: object
      properties:
        clientToken:
          title: Client token
          type: string
          description: Client token for use in the Primer-JS SDK obtained via `POST` /client-session API call.
        customerId:
          title: The ID of the customer using the checkout.
          type: string
          description: A unique identifier for your customer.
        orderId:
          title: Order ID
          type: string
          description: Your reference for the order.
        currencyCode:
          title: Currency
          type: string
          description: |

            The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).
            e.g. use `USD` for US dollars.
        amount:
          title: Payment amount
          minimum: 0.0
          type: integer
          description:
            "The amount you would like to charge the customer, in minor\
            \ units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese\
            \ Yen, do not have minor units. In this case you should use the value\
            \ as it is, without any formatting. For example for \xA5100, use `100`.\n\n\
            If the amount is provided on this level, it would override any amount \
            calculated from the provided line items, shipping and other amounts."
        metadata:
          title: Payment Metadata
          type: object
          description: |
            Additional data to be used throughout the payment lifecycle.

            Provide the entire object to update it. Anything provided previously will be overwritten.
        customer:
          title: Customer Details
          allOf:
            - $ref: "#/components/schemas/CheckoutCustomerDetailsAPISchema"
          description: |
            More information associated with the customer.

            Each of the fields in this object must be updated in its entirety, i.e. provide the entire object to update it. Anything provided previously will be overwritten.
        order:
          title: Order Details
          allOf:
            - $ref: "#/components/schemas/OrderDetailsAPISchema"
          description: |
            More information associated with the order.

            Each of the fields in this object must be updated in its entirety, i.e. provide the entire object to update it. Anything provided previously will be overwritten.

        paymentMethod:
          title: Payment Method Options
          allOf:
            - $ref: "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema"
          description: Enable certain options associated with the payment method. Provide the entire object to update it. Anything provided previously will be overwritten.
      additionalProperties: false
      example:
        clientToken: client-session-token
        customerId: customer-123
        orderId: order-abc
        customer: { emailAddress: john@primer.io }
        amount: 500
        order:
          {
            lineItems:
              [
                {
                  itemId: "shoe-123",
                  description: "Blue Shoe",
                  amount: 100,
                  quantity: 10,
                },
              ],
            countryCode: FR,
          }

    ClientSessionAPIRequest:
      title: ClientSessionAPIRequest
      type: object
      properties:
        orderId:
          title: Order identifier
          type: string
          description: Your reference for the payment.
        currencyCode:
          title: Currency
          type: string
          description: |
            The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).
            e.g. use `USD` for US dollars.
        amount:
          title: Payment amount
          minimum: 0.0
          type: integer
          description:
            "The amount you would like to charge the customer, in minor\
            \ units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese\
            \ Yen, do not have minor units. In this case you should use the value\
            \ as it is, without any formatting. For example for \xA5100, use `100`.\n\n\
            If the amount is provided on this level, it would override any amount \
            calculated from the provided line items, shipping and other amounts."
        order:
          title: Order Details
          allOf:
            - $ref: "#/components/schemas/OrderDetailsAPISchema"
          description: More information associated with the order.
        customerId:
          title: The ID of the customer using the checkout
          type: string
          description: A unique identifier for your customer.

            Create a client session token with a `customerId` to enable the client-side
            SDK to retrieve and manage your customer's saved payment methods. A client session token also enables
            saving payment methods against this customer id.
        customer:
          title: Customer Details
          allOf:
            - $ref: "#/components/schemas/CheckoutCustomerDetailsAPISchema"
          description: More information associated with the customer.
        metadata:
          title: Payment Metadata
          type: object
          description: |
            Additional data to be used throughout the payment lifecycle.

            A dictionary of key-value pairs where the values can only be strings or
            integers.

            e.g. `{"productId": 1001, "merchantId": "a13bsd62s"}`
        paymentMethod:
          title: Payment Method Options
          allOf:
            - $ref: "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema"
          description: Enable certain options associated with the payment method.
      additionalProperties: false
      example:
        orderId: order-abc
        currencyCode: GBP
        amount: 1000
        order:
          {
            lineItems:
              [
                {
                  itemId: "shoe-123",
                  description: "Blue Shoe",
                  amount: 100,
                  quantity: 10,
                },
              ],
            countryCode: FR,
          }
        customerId: customer-123
        customer: { emailAddress: john@primer.io }
        metadata: { "productType": "Shoes" }
        paymentMethod:
          descriptor: "Purchase: Shoes"
          paymentMethodType: PAYMENT_CARD
          vaultOnSuccess: True
          options:
            PAYMENT_CARD:
              networks:
                VISA:
                  surcharge:
                    amount: 10
            GOOGLE_PAY:
              surcharge:
                amount: 20

    OrderDetailsAPISchema:
      title: OrderDetailsAPISchema
      type: object
      properties:
        lineItems:
          title: Line Items
          type: array
          items:
            $ref: "#/components/schemas/OrderLineItemsAPISchema"
          description: The details of the line items of the order.
        countryCode:
          title: Country Code
          allOf:
            - $ref: "#/components/schemas/CountryCodeEnum"
          description: The country in which the order is created
        fees:
          title: Fee Details
          type: array
          items:
            $ref: "#/components/schemas/OrderFeesAPISchema"
          description: The details of fees charged.
        shipping:
          title: Shipping Details
          allOf:
            - $ref: "#/components/schemas/OrderShippingAPISchema"
          description: The details of shipping charged.

    OrderFeesAPISchema:
      title: OrderFeesAPISchema
      type: object
      required:
        - amount
      properties:
        amount:
          minimum: 0.0
          type: integer
          description: The fee amount charged to the customer, in minor  units. e.g. for $7, use `700`.
        type:
          type: string
          description: The type of fee.
        description:
          type: string
          description: A description of the fee, e.g. "Currency Conversion Fee".

    OrderLineItemsAPISchema:
      title: OrderLineItemsAPISchema
      description: |
        The details of the line items of the order.

        The total amount of a line item is calculated like so: 
        ````
          totalAmount = (amount * quantity) - discountAmount + taxAmount
        ```
      type: object
      required:
        - amount
      properties:
        itemId:
          title: Item ID
          type: string
          description: A unique identifier for the line item.
        name:
          title: Name
          type: string
          description: A name of the item.
        description:
          title: Item ID
          type: string
          description: A description of the item.
        amount:
          minimum: 0.0
          type: integer
          description: The amount charged to the customer, in minor units.
        quantity:
          type: integer
          description: The number of the particular line item that is being ordered.
        discountAmount:
          title: Discount Amount
          minimum: 0.0
          type: integer
          description: Any discount applicable to this item, in minor units. This discount is applied for the entire line item, and not per `quantity`.
        taxAmount:
          title: Tax Amount
          type: integer
          description: The tax charged on this item, in minor units. This tax amount is applied for the entire line item, and not per `quantity`.
        taxCode:
          title: Tax Code
          type: string
          description: The tax code associated with this item, in minor units. This is required for Primer-initiated tax calculations.
        productType:
          title: Product Type
          allOf:
            - $ref: "#/components/schemas/ProductTypeEnum"
          description: An identifier for the product type.
        productData:
          title: Product Data
          allOf:
            - $ref: "#/components/schemas/OrderLineItemsProductDataAPISchema"
          description: Details related to the product

    OrderLineItemsProductDataAPISchema:
      title: OrderLineItemsAPISchema
      description: Details related to the product
      type: object
      properties:
        sku:
          title: SKU
          type: string
          description: The product SKU
        brand:
          title: Brand
          type: string
          description: The product brand
        color:
          title: Color
          type: string
          description: The product color
        globalTradeItemNumber:
          title: Global Trade Item Number
          type: string
          description: The product Global Trade Item Number (e.g. ISBN)
        manufacturerPartNumber:
          title: Manufacturer Part Number
          type: string
          description: The product Manufacturer Part Number
        weight:
          title: Weight
          type: number
          description: The product weight
        weightUnit:
          title: SKU
          type: string
          description: The product weight unit (e.g. kg, g)

    OrderShippingAPISchema:
      title: OrderShippingAPISchema
      type: object
      properties:
        amount:
          minimum: 0.0
          type: integer
          description: The shipping amount charged to the customer, in minor units. e.g. for $7, use `700`.

    CheckoutPaymentMethodOptionsAPISchema:
      title: PaymentMethodOptionsAPISchema
      type: object
      properties:
        vaultOnSuccess:
          type: boolean
          description: Whether the payment method should be vaulted on a successful payment or not.
        descriptor:
          title: Payment descriptor
          type: string
          description:
            A description of the payment, as it would typically appear
            on a bank statement.
        paymentType:
          title: Recurring Payment Type
          allOf:
            - $ref: "#/components/schemas/RecurringTransactionTypeEnum"
          description:
            "Payment types, primarily to be used for recurring payments.

            Note: If you successfully vault a `SINGLE_USE` token on payment
            creation, then there's no need to set a value for this field and it will
            be flagged as `FIRST_PAYMENT`. Otherwise, see the table below for all
            possible values.


            | paymentType | Use case |

            | --- | --- |

            | `FIRST_PAYMENT` | a customer-initiated payment which is the first in
            a series of recurring payments or subscription, or a card on file scenario.

            | `ECOMMERCE` | a customer-initiated payment using stored payment details
            where the cardholder is present.

            | `SUBSCRIPTION` | a merchant-initiated payment as part of a series of
            payments on a fixed schedule and a set amount.

            | `UNSCHEDULED` | a merchant-initiated payment using stored payment details
            with no fixed schedule or amount."
        options:
          title: Payment Method Options
          type: object
          description: |
            Additional options for the payment methods.
          properties:
            <PAYMENT_METHOD_TYPE>:
              type: object
              allOf:
                - $ref: "#/components/schemas/CheckoutPaymentMethodOptionAPISchema"
            PAYMENT_CARD:
              type: object
              allOf:
                - $ref: "#/components/schemas/CheckoutPaymentMethodCardOptionAPISchema"

    CheckoutPaymentMethodOptionAPISchema:
      title: PaymentMethodOptionAPISchema
      type: object
      description: |
        Options for the payment method of type `PAYMENT_METHOD_TYPE`.

        [The list of available payment methods and their `PAYMENT_METHOD_TYPE` can be found here.](https://www.notion.so/primerio/Payment-Method-Types-2b971a8c54c3452cae0b2fffe9167d72)
      required:
        - type
      properties:
        surcharge:
          title: Surcharge
          description: Surcharge information
          allOf:
            - $ref: "#/components/schemas/CheckoutPaymentMethodOptionSurchargeAPISchema"

    CheckoutPaymentMethodCardOptionAPISchema:
      title: Payment Method Card Option
      type: object
      properties:
        networks:
          title: Card networks
          allOf:
            - $ref: "#/components/schemas/CheckoutPaymentMethodOptionCardNetworkAPISchema"

    CheckoutPaymentMethodOptionCardNetworkAPISchema:
      title: Payment Method Card Network Option
      type: object
      properties:
        <CARD_NETWORK_TYPE>:
          type: object
          description: |
            Options for the card network `CARD_NETWORK_TYPE`.

            [The list of available card networks and their `CARD_NETWORK_TYPE` can be found here.](https://www.notion.so/primerio/Payment-Method-Types-2b971a8c54c3452cae0b2fffe9167d72)

          properties:
            surcharge:
              title: Surcharge
              description: Surcharge information
              allOf:
                - $ref: "#/components/schemas/CheckoutPaymentMethodOptionSurchargeAPISchema"

    CheckoutPaymentMethodOptionSurchargeAPISchema:
      title: CheckoutPaymentMethodOptionSurchargeAPISchema
      type: object
      properties:
        amount:
          type: integer
          description: The surcharge amount, in minor units. Surcharge amount must be used in conjunction with line item amounts, if a top level amount is passed then surcharge will not be calculated.

    PaymentRequestPaymentMethodOptionsAPISchema:
      title: PaymentRequestPaymentMethodOptionsAPISchema
      type: object
      properties:
        vaultOnSuccess:
          type: boolean
          description: Whether the payment method should be vaulted on a successful payment or not.
        descriptor:
          title: Payment descriptor
          type: string
          description:
            A description of the payment, as it would typically appear
            on a bank statement.
        paymentType:
          title: Recurring Payment Type
          allOf:
            - $ref: "#/components/schemas/RecurringTransactionTypeEnum"
          description:
            "Payment types, primarily to be used for recurring payments.

            Note: If you successfully vault a `SINGLE_USE` token on payment
            creation, then there's no need to set a value for this field and it will
            be flagged as `FIRST_PAYMENT`. Otherwise, see the table below for all
            possible values.


            | paymentType | Use case |

            | --- | --- |

            | `FIRST_PAYMENT` | a customer-initiated payment which is the first in
            a series of recurring payments or subscription, or a card on file scenario.

            | `ECOMMERCE` | a customer-initiated payment using stored payment details
            where the cardholder is present.

            | `SUBSCRIPTION` | a merchant-initiated payment as part of a series of
            payments on a fixed schedule and a set amount.

            | `UNSCHEDULED` | a merchant-initiated payment using stored payment details
            with no fixed schedule or amount."

    PaymentResponsePaymentMethodOptionsAPISchema:
      title: PaymentResponsePaymentMethodOptionsAPISchema
      type: object
      properties:
        descriptor:
          title: Payment descriptor
          type: string
          description:
            The description of the payment, as it would typically appear
            on a bank statement.

        paymentMethodToken:
          title: Payment method token
          type: string
          description: The payment method token used to authorize the transaction.
        isVaulted:
          title: Is Vaulted flag
          type: boolean
          description: Whether the payment method token represents a vaulted payment method and can be used for future payments.
        analyticsId:
          title: Unique analytics ID
          type: string
          description: Unique analytics identifier corresponding to a payment method
        paymentMethodType:
          title: Payment method type
          allOf:
            - $ref: "#/components/schemas/PaymentMethodTypeEnum"
          description: Payment method type
        paymentMethodData:
          title: Payment method data
          anyOf:
            - $ref: "#/components/schemas/PaymentCardTokenAPISchema"
            - $ref: "#/components/schemas/PayPalOrderTokenAPISchema"
            - $ref: "#/components/schemas/PayPalBillingAgreementAPISchema"
            - $ref: "#/components/schemas/GoCardlessMandateAPISchema"
            - $ref: "#/components/schemas/KlarnaPaymentSessionAPISchema"
            - $ref: "#/components/schemas/KlarnaCustomerTokenAPISchema"
            - $ref: "#/components/schemas/IdealPayNLTokenAPISchema"
            - $ref: "#/components/schemas/ApayaCustomerTokenAPISchema"
          description: Payment method data
        threeDSecureAuthentication:
          title: Threedsecureauthentication
          allOf:
            - $ref: "#/components/schemas/ThreeDSecureAuthenticationAPISchema"
          default:
            response_code: NOT_PERFORMED

    CheckoutCustomerDetailsAPISchema:
      title: CustomerDetailsAPISchema
      type: object
      properties:
        emailAddress:
          title: Email Address
          type: string
          description: |
            Customer email address.
          format: email
        mobileNumber:
          title: Mobile Number
          type: string
          description: The customer's mobile number
        firstName:
          title: First Name
          type: string
          description: The customer's first name
        lastName:
          title: Last Name
          type: string
          description: The customer's last name
        billingAddress:
          title: Billing Address
          allOf:
            - $ref: "#/components/schemas/core_api__api__commons__schemas__addess__AddressAPISchema"
          description: |
            Customer billing address.
        shippingAddress:
          title: Shipping Address
          allOf:
            - $ref: "#/components/schemas/core_api__api__commons__schemas__addess__AddressAPISchema"
          description: Customer shipping address
        taxId:
          title: Tax ID
          type: string
          description: The customer's tax id number for tax exemptions
        nationalDocumentId:
          title: National Document ID
          type: string
          description: The customer's national identification number

    CustomerDetailsAPISchema:
      title: CustomerDetailsAPISchema
      type: object
      properties:
        emailAddress:
          title: Email Address
          type: string
          description: |
            Customer email address.

            Note: It is recommended to include this field if a 3DS check will be performed
          format: email
        mobileNumber:
          title: Mobile Number
          type: string
          description: The customer's mobile number
        firstName:
          title: First Name
          type: string
          description: The customer's first name
        lastName:
          title: Last Name
          type: string
          description: The customer's last name
        billingAddress:
          title: Billing Address
          allOf:
            - $ref: "#/components/schemas/core_api__api__commons__schemas__addess__AddressAPISchema"
          description: |
            Customer billing address.

            Note: It is recommended to include this field if a 3DS check will be performed
        shippingAddress:
          title: Shipping Address
          allOf:
            - $ref: "#/components/schemas/core_api__api__commons__schemas__addess__AddressAPISchema"
          description: Customer shipping address
        taxId:
          title: Tax ID
          type: string
          description: The customer's tax id number for tax exemptions
        nationalDocumentId:
          title: National Document ID
          type: string
          description: The customer's national identification number

    ClientSessionWithTokenAPIResponse:
      title: ClientSessionWithTokenAPIResponse
      type: object
      properties:
        clientToken:
          title: Client token
          type: string
          description: Client token used to initialize the SDK on all platforms.
        clientTokenExpirationDate:
          title: Expiration Date
          type: string
          description: Expiration date & time of the client token (UTC with no timezoneinfo).
          format: date-time
        orderId:
          title: Order ID
          type: string
          description: Your reference for the payment.
        currencyCode:
          title: Currency
          type: string
          description: |
            The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).
            e.g. use `USD` for US dollars.
        amount:
          title: Payment amount
          minimum: 0.0
          type: integer
          description:
            "The amount you would like to charge the customer, in minor\
            \ units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese\
            \ Yen, do not have minor units. In this case you should use the value\
            \ as it is, without any formatting. For example for \xA5100, use `100`.\n\n\
            If the amount is provided on this level, it would override any amount \
            calculated from the provided line items, shipping and other amounts."
        order:
          title: Order Details
          allOf:
            - $ref: "#/components/schemas/OrderDetailsAPISchema"
          description: More information associated with the order.
        customerId:
          title: The ID of the customer using the checkout
          type: string
          description: A unique identifier for your customer.
        customer:
          title: Customer Details
          allOf:
            - $ref: "#/components/schemas/CustomerDetailsAPISchema"
          description: More information associated with the customer.
        metadata:
          title: Payment Metadata
          type: object
          description: |
            Additional data to be used throughout the payment lifecycle.
        paymentMethod:
          title: Payment Method Options
          allOf:
            - $ref: "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema"
          description: Enable certain options associated with the payment methods.
        warnings:
          allOf:
            - $ref: "#/components/schemas/ClientSessionWarningsAPIResponse"
          description: Warning messages to indicate missing information that are required for payment methods, checkout modules and other features; or when third-party services are unavailable.
      example:
        clientToken: client-session-token
        clientExpirationDate: "2019-08-24T14:15:22Z"
        customerId: customer-123
        orderId: order-abc
        currencyCode: GBP
        metadata: { "productType": "Shoe" }
        customer: { emailAddress: john@primer.io }
        amount: 20
        order: { countryCode: FR, fees: [{ type: "SURCHARGE", amount: 20 }] }
        paymentMethod:
          vaultOnSuccess: True
          options:
            PAYMENT_CARD:
              networks:
                VISA:
                  surcharge:
                    amount: 10
            GOOGLE_PAY:
              surcharge:
                amount: 20
        warnings:
          [
            {
              type: TAXJAR,
              code: MISSING_DATA,
              message: Shipping details are required for calculating tax.,
            },
          ]

    ClientSessionAPIResponse:
      title: ClientSessionAPIResponse
      type: object
      properties:
        customerId:
          title: The ID of the customer using the checkout
          type: string
          description: A unique identifier for your customer.
        orderId:
          title: Order ID
          type: string
          description: Your reference for the payment.
        currencyCode:
          title: Currency
          type: string
          description: |
            The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).
            e.g. use `USD` for US dollars.
        amount:
          title: Payment amount
          minimum: 0.0
          type: integer
          description:
            "The amount you are going to charge the customer, in minor\
            \ units. This amount is calculated from the line items, shipping \
            and other amounts provided in the `order`. \n\
            If a top-level amount is provided, it would override any calculated amount."
        metadata:
          title: Payment Metadata
          type: object
          description: |
            Additional data to be used throughout the payment lifecycle.
        customer:
          title: Customer Details
          allOf:
            - $ref: "#/components/schemas/CustomerDetailsAPISchema"
          description: More information associated with the customer.
        order:
          title: Order Details
          allOf:
            - $ref: "#/components/schemas/OrderDetailsAPISchema"
          description: More information associated with the order.
        paymentMethod:
          title: Payment Method Options
          allOf:
            - $ref: "#/components/schemas/CheckoutPaymentMethodOptionsAPISchema"
          description: Enable certain options associated with the payment methods.
      example:
        customerId: customer-123
        orderId: order-abc
        currencyCode: GBP
        amount: 650
        metadata: { "productType": "Clothing" }
        customer: { emailAddress: john@primer.io }
        order:
          lineItems:
            - itemId: t-shirt-1
              description: White T-Shirt
              amount: 500
              quantity: 1
          fees:
            - type: SURCHARGE
              amount: 100
          shipping:
            amount: 50
          paymentMethod:
            vaultOnSuccess: false
            options:
              GOOGLE_PAY:
                surcharge:
                  amount: 100
              PAYMENT_CARD:
                networks:
                  VISA:
                    surcharge:
                      amount: 10
                  MASTERCARD:
                    surcharge:
                      amount: 20
              PAY_NL_IDEAL:
                surcharge:
                  amount: 50

    ClientSessionWarningsAPIResponse:
      title: ClientSessionWarningsAPIResponse
      type: object
      properties:
        type:
          type: string
          description: The type of the connection involved
          example: TAXJAR
        code:
          type: string
          description: A unique code describing the particular issue
          example: MISSING_DATA
        message:
          type: string
          description: More information as to the reason for the warning

    CountryCodeEnum:
      title: CountryCodeEnum
      enum:
        - AW
        - AF
        - AO
        - AI
        - AX
        - AL
        - AD
        - AE
        - AR
        - AM
        - AS
        - AQ
        - TF
        - AG
        - AU
        - AT
        - AZ
        - BI
        - BE
        - BJ
        - BQ
        - BF
        - BD
        - BG
        - BH
        - BS
        - BA
        - BL
        - BY
        - BZ
        - BM
        - BO
        - BR
        - BB
        - BN
        - BT
        - BV
        - BW
        - CF
        - CA
        - CC
        - CH
        - CL
        - CN
        - CI
        - CM
        - CD
        - CG
        - CK
        - CO
        - KM
        - CV
        - CR
        - CU
        - CW
        - CX
        - KY
        - CY
        - CZ
        - DE
        - DJ
        - DM
        - DK
        - DO
        - DZ
        - EC
        - EG
        - ER
        - EH
        - ES
        - EE
        - ET
        - FI
        - FJ
        - FK
        - FR
        - FO
        - FM
        - GA
        - GB
        - GE
        - GG
        - GH
        - GI
        - GN
        - GP
        - GM
        - GW
        - GQ
        - GR
        - GD
        - GL
        - GT
        - GF
        - GU
        - GY
        - HK
        - HM
        - HN
        - HR
        - HT
        - HU
        - ID
        - IM
        - IN
        - IO
        - IE
        - IR
        - IQ
        - IS
        - IL
        - IT
        - JM
        - JE
        - JO
        - JP
        - KZ
        - KE
        - KG
        - KH
        - KI
        - KN
        - KR
        - KW
        - LA
        - LB
        - LR
        - LY
        - LC
        - LI
        - LK
        - LS
        - LT
        - LU
        - LV
        - MO
        - MF
        - MA
        - MC
        - MD
        - MG
        - MV
        - MX
        - MH
        - MK
        - ML
        - MT
        - MM
        - ME
        - MN
        - MP
        - MZ
        - MR
        - MS
        - MQ
        - MU
        - MW
        - MY
        - YT
        - NA
        - NC
        - NE
        - NF
        - NG
        - NI
        - NU
        - NL
        - "NO"
        - NP
        - NR
        - NZ
        - OM
        - PK
        - PA
        - PN
        - PE
        - PH
        - PW
        - PG
        - PL
        - PR
        - KP
        - PT
        - PY
        - PS
        - PF
        - QA
        - RE
        - RO
        - RU
        - RW
        - SA
        - SD
        - SN
        - SG
        - GS
        - SH
        - SJ
        - SB
        - SL
        - SV
        - SM
        - SO
        - PM
        - RS
        - SS
        - ST
        - SR
        - SK
        - SI
        - SE
        - SZ
        - SX
        - SC
        - SY
        - TC
        - TD
        - TG
        - TH
        - TJ
        - TK
        - TM
        - TL
        - TO
        - TT
        - TN
        - TR
        - TV
        - TW
        - TZ
        - UG
        - UA
        - UM
        - UY
        - US
        - UZ
        - VA
        - VC
        - VE
        - VG
        - VI
        - VN
        - VU
        - WF
        - WS
        - YE
        - ZA
        - ZM
        - ZW
      description: An enumeration.

    Currency:
      title: Currency
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BOV
        - BRL
        - BSD
        - BTN
        - BWP
        - BYR
        - BYN
        - BZD
        - CAD
        - CDF
        - CHE
        - CHF
        - CHW
        - CLF
        - CLP
        - CNY
        - COP
        - COU
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - INR
        - IQD
        - IRR
        - ISK
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LTL
        - LVL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MXV
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SRD
        - SSP
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - USN
        - USS
        - UYI
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XAG
        - XAU
        - XBA
        - XBB
        - XBC
        - XBD
        - XCD
        - XDR
        - XFU
        - XOF
        - XPD
        - XPF
        - XPT
        - XSU
        - XTS
        - XUA
        - YER
        - ZAR
        - ZMW
        - ZWL
      description: Enumerates all supported currencies

    PaymentResponseProcessorAPISchema:
      title: PaymentResponseProcessorAPISchema
      type: object
      properties:
        name:
          title: Processor Name
          type: string
          description: The payment processor used for this payment.
        processorMerchantId:
          title: Processor Merchant ID
          type: string
          description: The merchant ID registered at the payment processor used for this payment.
        amountCaptured:
          title: Amount captured
          type: integer
          description: |
            If no capture was performed, this value will be set to `0`.

            If one or more partial captures were performed, this value will be a sum
            of all partial capture amounts.
        amountRefunded:
          title: Amount refunded
          type: integer
          description: |
            If no refund was performed, this value will be set to `0`.

            If one or more partial refunds were performed, this value will be a sum
            of all partial refund amounts.

    GoCardlessMandateAPISchema:
      title: GoCardlessMandateAPISchema
      required:
        - gocardlessMandateId
      type: object
      properties:
        gocardlessMandateId:
          title: Mandate agreement ID
          type: string
          description: Unique identifier of a GoCardless mandate agreement
    IdealPayNLTokenAPISchema:
      title: IdealPayNLTokenAPISchema
      required:
        - paymentMethodConfigId
      type: object
      properties:
        paymentMethodConfigId:
          title: Paymentmethodconfigid
          type: string
          format: uuid
    KlarnaAddressAPISchema:
      title: KlarnaAddressAPISchema
      type: object
      properties:
        title:
          title: Title
          type: string
        firstName:
          title: Firstname
          type: string
        lastName:
          title: Lastname
          type: string
        email:
          title: Email
          type: string
        phoneNumber:
          title: Phonenumber
          type: string
        addressLine1:
          title: Addressline1
          type: string
        addressLine2:
          title: Addressline2
          type: string
        addressLine3:
          title: Addressline3
          type: string
        city:
          title: City
          type: string
        state:
          title: State
          type: string
        countryCode:
          $ref: "#/components/schemas/CountryCodeEnum"
        postalCode:
          title: Postalcode
          type: string
    KlarnaCustomerTokenAPISchema:
      title: KlarnaCustomerTokenAPISchema
      required:
        - klarnaCustomerToken
        - sessionData
      type: object
      properties:
        klarnaCustomerToken:
          title: Klarnacustomertoken
          type: string
        sessionData:
          $ref: "#/components/schemas/KlarnaSessionDetailsAPISchema"
    KlarnaPaymentSessionAPISchema:
      title: KlarnaPaymentSessionAPISchema
      required:
        - klarnaAuthorizationToken
        - sessionData
      type: object
      properties:
        klarnaAuthorizationToken:
          title: Klarnaauthorizationtoken
          type: string
        sessionData:
          $ref: "#/components/schemas/KlarnaSessionDetailsAPISchema"
    KlarnaSessionDetailsAPISchema:
      title: KlarnaSessionDetailsAPISchema
      required:
        - billingAddress
        - purchaseCountry
        - purchaseCurrency
        - locale
        - orderLines
      type: object
      properties:
        recurringDescription:
          title: Recurringdescription
          type: string
        billingAddress:
          $ref: "#/components/schemas/KlarnaAddressAPISchema"
        shippingAddress:
          $ref: "#/components/schemas/KlarnaAddressAPISchema"
        purchaseCountry:
          title: Purchasecountry
          type: string
        purchaseCurrency:
          title: Purchasecurrency
          type: string
        locale:
          title: Locale
          type: string
        orderLines:
          title: Orderlines
          type: array
          items: {}
        tokenDetails:
          $ref: "#/components/schemas/KlarnaTokenDetails"
    KlarnaTokenDetails:
      title: KlarnaTokenDetails
      required:
        - type
      type: object
      properties:
        type:
          title: Type
          type: string
        brand:
          title: Brand
          type: string
        masked_number:
          title: Masked Number
          type: string
        expiry_date:
          title: Expiry Date
          type: string
    PayPalBillingAgreementAPISchema:
      title: PayPalBillingAgreementAPISchema
      required:
        - paypalBillingAgreementId
      type: object
      properties:
        paypalBillingAgreementId:
          title: Paypalbillingagreementid
          type: string
        externalPayerInfo:
          title: Payer Info
          allOf:
            - $ref: "#/components/schemas/PayPalExternalPayerInfoAPISchema"
          description: Information about the PayPal customer
        shippingAddress:
          title: Shipping address
          allOf:
            - $ref: "#/components/schemas/AddressAPISchema"
          description: The PayPal customer's shipping address
        paypalStatus:
          title: PayPal order status
          type: string
    PayPalExternalPayerInfoAPISchema:
      title: PayPalExternalPayerInfoAPISchema
      type: object
      properties:
        externalPayerId:
          title: Externalpayerid
          type: string
        email:
          title: Email
          type: string
        firstName:
          title: Firstname
          type: string
        lastName:
          title: Lastname
          type: string
    PayPalOrderTokenAPISchema:
      title: PayPalOrderTokenAPISchema
      required:
        - paypalOrderId
      type: object
      properties:
        paypalOrderId:
          title: PayPal order identifier
          type: string
        externalPayerInfo:
          title: Payer Info
          allOf:
            - $ref: "#/components/schemas/PayPalExternalPayerInfoAPISchema"
          description: Information about the PayPal customer
        paypalStatus:
          title: PayPal order status
          type: string

    PaymentAPIResponse:
      title: PaymentAPIResponse
      type: object
      properties:
        id:
          title: Payment identifier
          type: string
          description: |
            The unique payment ID.

            You can use this ID to retrieve the payment details, or perform downstream
            operations.
        date:
          title: Payment date
          type: string
          description: The date and time at which the payment was created in UTC format.
          format: date-time
        status:
          title: Current status
          allOf:
            - $ref: "#/components/schemas/PaymentStatus"
          description: See the payment [status table](../docs#payment-status)
            for more information.
        orderId:
          title: Order ID
          type: string
          description: Your reference for the payment.
        currencyCode:
          title: Currency
          type: string
          description: |
            The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).
            e.g. use `USD` for US dollars.
        amount:
          title: Payment amount
          minimum: 0.0
          type: integer
          description: The amount you charged the customer, in minor units.
        order:
          title: Order Details
          allOf:
            - $ref: "#/components/schemas/OrderDetailsAPISchema"
          description: More information associated with the order.
        customerId:
          title: The ID of the customer using the checkout
          type: string
          description: The unique identifier for your customer.
        customer:
          title: Customer Details
          allOf:
            - $ref: "#/components/schemas/CustomerDetailsAPISchema"
          description: More information associated with the customer.
        metadata:
          title: Payment Metadata
          type: object
          description: |
            Additional data to be used throughout the payment lifecycle.
        paymentMethod:
          title: Payment Method Options
          allOf:
            - $ref: "#/components/schemas/PaymentResponsePaymentMethodOptionsAPISchema"
          description: The payment method options provided in the request, as well as the token used to process the payment.
        processor:
          title: Processor Information
          allOf:
            - $ref: "#/components/schemas/PaymentResponseProcessorAPISchema"
          description: More information associated with the payment processor, including the processor name.
        requiredAction:
          title: Required action
          allOf:
            - $ref: "#/components/schemas/PaymentRequiredActionAPISchema"
          description:
            Required action to perform in order to resume the payment workflow.
            This can be requiring a 3DS check from the customer for instance.
        statusReason:
          title: Status Reason
          allOf:
            - $ref: "#/components/schemas/StatusReasonAPISchema"
          description: |
            Check this field for more information regarding the payment's status. This is especially useful when the status is `DECLINED` or `FAILED`.
        transactions:
          title: Transactions
          type: array
          items:
            $ref: "#/components/schemas/TransactionOverviewAPISchema"
          description:
            "A list summarizing the transactions that occurred while processing
            the payment.


            Note: a refund is a separate transaction and so will appear in
            this `transactions` list if a refund was performed."

    PaymentCancelAPIRequest:
      title: PaymentCancelAPIRequest
      type: object
      properties:
        reason:
          title: Cancellation reason
          type: string
          description:
            You can optionally specify a reason for the cancellation. This
            is for your own records.
      additionalProperties: false
      example:
        reason: "Customer returned order #1234."

    PaymentCaptureAPIRequest:
      title: PaymentCaptureAPIRequest
      type: object
      properties:
        amount:
          title: Amount to capture
          minimum: 0.0
          type: integer
          description:
            "The amount you would like to capture, in minor units. The currency used on authorization
            is assumed.


            If no amount is specified it defaults to the full amount."
        final:
          title: Final capture
          type: boolean
          description:
            "Indicates whether the capture request is the final capture
            request.


            After a final capture, no subsequent captures are allowed."
          default: true
      additionalProperties: false
      example:
        amount: 42

    PaymentCardTokenAPISchema:
      title: PaymentCardTokenAPISchema
      required:
        - last4Digits
        - expirationMonth
        - expirationYear
      type: object
      properties:
        first6Digits:
          title: Payment card's first six digits
          maxLength: 6
          minLength: 6
          type: string
        last4Digits:
          title: Payment card's last four digits
          maxLength: 4
          minLength: 4
          type: string
        expirationMonth:
          title: Expiration month
          maxLength: 2
          minLength: 2
          type: string
        expirationYear:
          title: Expiration year
          maxLength: 4
          minLength: 4
          type: string
        cardholderName:
          title: Cardholder's name
          type: string
        network:
          title: Card network
          type: string
        isNetworkTokenized:
          title: Is represented by a digital PAN
          type: boolean
          default: false
        binData:
          $ref: "#/components/schemas/BinDataAPISchema"

    PaymentCreationAPIRequest:
      title: PaymentCreationAPIRequest
      required:
        - paymentMethodToken
      type: object
      properties:
        orderId:
          title: Order ID
          type: string
          description: Your reference for the payment.
        currencyCode:
          title: Currency
          type: string
          description: |
            The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).
            e.g. use `USD` for US dollars.
        amount:
          title: Payment amount
          minimum: 0.0
          type: integer
          description:
            "The amount you would like to charge the customer, in minor\
            \ units. e.g. for $7, use `700`.\n\nSome currencies, such as Japanese\
            \ Yen, do not have minor units. In this case you should use the value\
            \ as it is, without any formatting. For example for \xA5100, use `100`."
        order:
          title: Order Details
          allOf:
            - $ref: "#/components/schemas/OrderDetailsAPISchema"
          description: More information associated with the order.
        paymentMethodToken:
          title: Payment method token
          type: string
          description: |
            The payment method token used to authorize the payment.
        customerId:
          title: The ID of the customer using the checkout
          type: string
          description: A unique identifier for your customer.

            This attribute is required if `paymentMethod.vaultOnSuccess` is set to `True`.
        customer:
          title: Customer Details
          allOf:
            - $ref: "#/components/schemas/CustomerDetailsAPISchema"
          description: |
            More information associated with the customer.
        metadata:
          title: Payment Metadata
          type: object
          description: |
            Additional data to be used throughout the payment lifecycle.

            A dictionary of key-value pairs where the values can only be strings or
            integers.

            e.g. `{"productId": 1001, "merchantId": "a13bsd62s"}`
        paymentMethod:
          title: Payment Method Options
          allOf:
            - $ref: "#/components/schemas/PaymentRequestPaymentMethodOptionsAPISchema"
          description: Enable certain options associated with the payment method.

      additionalProperties: false
      example:
        orderId: order-abc
        currencyCode: EUR
        amount: 42
        paymentMethodToken: heNwnqaeRiqvY1UcslfQc3wxNjEzOTIxNjc4
        customerId: customer-123
        customer:
          emailAddress: customer123@gmail.com
        metadata:
          productId: 123
          merchantId: a13bsd62s
        paymentMethod:
          vaultOnSuccess: True

    StatusReasonAPISchema:
      title: StatusReasonAPISchema
      required:
        - type
      type: object
      properties:
        type:
          title: Payment status type
          allOf:
            - $ref: "#/components/schemas/PaymentStatusTypeEnum"
          description: Type of the status.
        declineType:
          title: Decline Type
          allOf:
            - $ref: "#/components/schemas/DeclineTypeEnum"
          description: |
            If the error is of type `ISSUER_DECLINED` this will be returned.

            Declines of type `SOFT_DECLINE` may be retried,
            whereas declines of type `HARD_DECLINE` should not be retried.
        code:
          title: Payment status code
          allOf:
            - $ref: "#/components/schemas/TransactionDeclineReasonV2Enum"
          description: If the error is of type `ISSUER_DECLINED`, this will be returned.
        message:
          title: Processor message
          type: string
          description:
            In case of an error on the processor's part, we will return
            the message returned by the processor. This is usually a human readable
            error.

    PaymentMethodTypeEnum:
      title: PaymentMethodTypeEnum

      type: string
      description: |
        [The list of available payment methods and their `PAYMENT_METHOD_TYPE` can be found here.](https://www.notion.so/primerio/Payment-Method-Types-2b971a8c54c3452cae0b2fffe9167d72)

    PaymentListAPIResponse:
      title: PaymentListAPIResponse
      type: object
      properties:
        data:
          title: Data
          type: array
          items:
            $ref: "#/components/schemas/PaymentSummaryAPISchema"
        nextCursor:
          title: Nextcursor
          type: string
        prevCursor:
          title: Prevcursor
          type: string

    PaymentRefundAPIRequest:
      title: PaymentRefundAPIRequest
      type: object
      properties:
        amount:
          title: Amount to refund
          minimum: 0.0
          type: integer
          description:
            "The amount you would like to refund the customer, in minor
            units. e.g. for $7, use `700`.


            Defaults to remaining non-refunded amount."
        orderId:
          title: Order ID
          type: string
          description:
            "Optionally you can pass a specific order ID for the refund.


            By default this will be set to the original `orderId` given on payment
            creation."
        reason:
          title: Refund reason
          type: string
          description:
            You can optionally specify a reason for the refund. This is
            for your own records.
      additionalProperties: false
      example:
        amount: 42
        orderId: order-1234-refund

    PaymentRequiredActionAPISchema:
      title: PaymentRequiredActionAPISchema
      required:
        - name
        - description
      type: object
      properties:
        name:
          title: Name
          allOf:
            - $ref: "#/components/schemas/BlockingPaymentActionTypeEnum"
          description: Action name
        description:
          title: Description
          type: string
          description: Human description of the required action to perform.
        clientToken:
          title: Client token
          type: string
          description:
            If the action requires customer data, instantiate the checkout
            SDK with this client session token to resume the session.

    PaymentResumeAPIRequest:
      title: PaymentResumeAPIRequest
      required:
        - resumeToken
      type: object
      properties:
        resumeToken:
          title: Resume token
          type: string
          description:
            A token containing any information that is sent back from the
            checkout to complete a blocked payment flow.
          format: uuid
      additionalProperties: false

    PaymentSummaryAPISchema:
      title: PaymentSummaryAPISchema
      required:
        - id
        - date
        - status
        - orderId
        - currencyCode
        - amount
      type: object
      properties:
        id:
          title: Payment identifier
          type: string
          description: |
            The unique payment ID.

            You can use this ID to retrieve the payment details, or perform downstream
            operations.
        date:
          title: Payment date
          type: string
          description: The date and time at which the payment was created in UTC format.
          format: date-time
        status:
          title: Current status
          allOf:
            - $ref: "#/components/schemas/PaymentStatus"
          description: See the payment [status table](../docs#payment-status)
            for more information.
        orderId:
          title: Order ID
          type: string
          description: Your reference for the payment.
        processor:
          title: Processor
          type: string
          description: The payment processor used for this payment.
          allOf:
            - $ref: "#/components/schemas/PaymentSummaryProcessorAPISchema"
        currencyCode:
          title: Currency
          type: string
          description: |
            The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).
            e.g. use `USD` for US dollars.
        amount:
          title: Payment amount
          type: integer
          description: The payment amount, in minor units. e.g. $7 would show as `700`.
        metadata:
          title: Payment Metadata
          type: object
          description: |
            Additional data to be used throughout the payment lifecycle.

            A dictionary of key-value pairs where the values can only be strings or
            integers.

            e.g. `{"productId": 1001, "merchantId": "a13bsd62s"}`
      example:
        id: IHQlakKC
        date: "2021-03-24T14:56:56.869248"
        status: SETTLED
        orderId: my-order-123
        currencyCode: EUR
        amount: 700
        processor:
          name: STRIPE
          processorMerchantId: acct_stripe_1234
        metadata:
          productId: 123
          merchantId: a13bsd62s

    PaymentSummaryProcessorAPISchema:
      title: PaymentSummaryProcessorAPISchema
      required:
        - name
      type: object
      properties:
        name:
          title: Processor Name
          type: string
          description: The payment processor used for this payment.
        processorMerchantId:
          title: Processor Merchant ID
          type: string
          description: The merchant ID registered at the payment processor used for this payment.

    PrepaidReloadableEnum:
      title: PrepaidReloadableEnum
      enum:
        - RELOADABLE
        - NON_RELOADABLE
        - NOT_APPLICABLE
        - UNKNOWN
      type: string
      description: An enumeration.

    RecurringTransactionTypeEnum:
      title: RecurringTransactionTypeEnum
      enum:
        - FIRST_PAYMENT
        - ECOMMERCE
        - SUBSCRIPTION
        - UNSCHEDULED
      type: string
      description: An enumeration.

    ProductTypeEnum:
      title: ProductTypeEnum
      enum:
        - PHYSICAL
        - DIGITAL
      type: string
      description: An enumeration

    ThreeDSecureAuthResponseCodeEnum:
      title: ThreeDSecureAuthResponseCodeEnum
      enum:
        - NOT_PERFORMED
        - SKIPPED
        - AUTH_SUCCESS
        - AUTH_FAILED
        - CHALLENGE
        - METHOD
      type: string
      description: An enumeration.

    ThreeDSecureAuthenticationAPISchema:
      title: ThreeDSecureAuthenticationAPISchema
      required:
        - responseCode
      type: object
      properties:
        responseCode:
          $ref: "#/components/schemas/ThreeDSecureAuthResponseCodeEnum"
        reasonCode:
          title: Reasoncode
          anyOf:
            - $ref: "#/components/schemas/ThreeDSecureSkippedReasonCodeEnum"
            - $ref: "#/components/schemas/ThreeDSecureFailedReasonCodeEnum"
        reasonText:
          title: Reasontext
          type: string
        protocolVersion:
          title: Protocolversion
          type: string
        challengeIssued:
          title: Challengeissued
          type: boolean

    ThreeDSecureFailedReasonCodeEnum:
      title: ThreeDSecureFailedReasonCodeEnum
      enum:
        - UNKNOWN
        - REJECTED_BY_ISSUER
        - CARD_AUTHENTICATION_FAILED
        - UNKNOWN_DEVICE
        - UNSUPPORTED_DEVICE
        - EXCEEDS_AUTHENTICATION_FREQUENCY_LIMIT
        - EXPIRED_CARD
        - INVALID_CARD_NUMBER
        - INVALID_TRANSACTION
        - NO_CARD_RECORD
        - SECURITY_FAILURE
        - STOLEN_CARD
        - SUSPECTED_FRAUD
        - TRANSACTION_NOT_PERMITTED_TO_CARDHOLDER
        - CARDHOLDER_NOT_ENROLLED_IN_SERVICE
        - TRANSACTION_TIMED_OUT_AT_THE_ACS
        - LOW_CONFIDENCE
        - MEDIUM_CONFIDENCE
        - HIGH_CONFIDENCE
        - VERY_HIGH_CONFIDENCE
        - EXCEEDS_ACS_MAXIMUM_CHALLENGES
        - NON_PAYMENT_NOT_SUPPORTED
        - THREE_RI_NOT_SUPPORTED
        - ACS_TECHNICAL_ISSUE
        - DECOUPLED_REQUIRED_BY_ACS
        - DECOUPLED_MAX_EXPIRY_EXCEEDED
        - DECOUPLED_AUTHENTICATION_INSUFFICIENT_TIME
        - AUTHENTICATION_ATTEMPTED_BUT_NOT_PERFORMED_BY_CARDHOLDER
        - ACS_TIMED_OUT
        - INVALID_ACS_RESPONSE
        - ACS_SYSTEM_ERROR_RESPONSE
        - ERROR_GENERATING_CAVV
        - PROTOCOL_VERSION_NOT_SUPPORTED
        - TRANSACTION_EXCLUDED_FROM_ATTEMPTS_PROCESSING
        - REQUESTED_PROGRAM_NOT_SUPPORTED
      type: string
      description:
        "This enum is derived from the `transStatusReason` on page 218
        of the

        [EMV Co 3DS protocol specification](https://www.emvco.com/terms-of-use/?u=/wp-content/uploads/documents/EMVCo_3DS_Spec_v220_122018.pdf)


        | Code | Description                             |

        |------|-----------------------------------------|

        | 01   | Card authentication failed              |

        | 02   | Unknown Device                          |

        | 03   | Unsupported Device                      |

        | 04   | Exceeds authentication frequency limit  |

        | 05   | Expired card                            |

        | 06   | Invalid card number                     |

        | 07   | Invalid transaction                     |

        | 08   | No Card record                          |

        | 09   | Security failure                        |

        | 10   | Stolen card                             |

        | 11   | Suspected fraud                         |

        | 12   | Transaction not permitted to cardholder |

        | 13   | Cardholder not enrolled in service      |

        | 14   | Transaction timed out at the ACS        |

        | 15   | Low confidence                          |

        | 16   | Medium confidence                       |"

    ThreeDSecureSkippedReasonCodeEnum:
      title: ThreeDSecureSkippedReasonCodeEnum
      enum:
        - GATEWAY_UNAVAILABLE
        - DISABLED_BY_MERCHANT
        - NOT_SUPPORTED_BY_ISSUER
        - FAILED_TO_NEGOTIATE
        - UNKNOWN_ACS_RESPONSE
        - 3DS_SERVER_ERROR
        - ACQUIRER_NOT_CONFIGURED
        - ACQUIRER_NOT_PARTICIPATING
      type: string
      description: An enumeration.

    TokenTypeEnum:
      title: TokenTypeEnum
      enum:
        - MULTI_USE
        - SINGLE_USE
      type: string
      description: An enumeration.

    DeclineTypeEnum:
      title: DeclineTypeEnum
      enum:
        - SOFT_DECLINE
        - HARD_DECLINE
      type: string
      description: An enumeration.

    TransactionDeclineReasonV2Enum:
      title: TransactionDeclineReasonV2Enum
      enum:
        - ERROR
        - INVALID_CARD_NUMBER
        - EXPIRED_CARD
        - LOST_OR_STOLEN_CARD
        - SUSPECTED_FRAUD
        - UNKNOWN
        - DECLINED
        - REFER_TO_CARD_ISSUER
        - DO_NOT_HONOR
        - INSUFFICIENT_FUNDS
        - WITHDRAWAL_LIMIT_EXCEEDED
        - ISSUER_TEMPORARILY_UNAVAILABLE
        - AUTHENTICATION_REQUIRED
      type: string
      description: An enumeration.

    TransactionOverviewAPISchema:
      title: TransactionOverviewAPISchema
      required:
        - id
        - processor
        - processorMerchantId
        - type
        - status
        - date
        - amount
        - currencyCode
      type: object
      properties:
        date:
          title: Creation date
          type: string
          description: Date & time of the transaction (UTC)
        amount:
          minimum: 0.0
          type: integer
          description: Transaction amount in minor units
        currencyCode:
          title: Currency
          type: string
          description: |
            
            The 3-letter currency code in [ISO 4217 format](https://en.wikipedia.org/wiki/ISO_4217#Active_codes).
            e.g. use `USD` for US dollars.
        transactionType:
          title: Transaction type
          allOf:
            - $ref: "#/components/schemas/TransactionTypeEnum"
        processorTransactionId:
          title: Processor's transaction ID
          type: string
          description: Processor's unique identifier for the transaction
        processorName:
          title: Processor Name
          type: string
          description: An identifier of a processor.
        processorMerchantId:
          title: Processor master account identifier
          type: string
          description: |
            Processor's main account identifier.

            * Adyen: Account code
            * Braintree: Merchant ID
            * Stripe: Account ID"
        processorStatus:
          title: Processor Transaction status
          allOf:
            - $ref: "#/components/schemas/PaymentStatus"
          description:
            Transaction status, please refer to the [Transaction Status
            Codes](#section/API-Usage-Guide/Payment-Status) table for more information
        processorStatusReason:
          title: Payment error
          allOf:
            - $ref: "#/components/schemas/StatusReasonAPISchema"
          description: |
            If the transaction has a declined or failed status.

            Only if the status is `DECLINED` or `FAILED`, otherwise `null`.

    PaymentStatus:
      title: PaymentStatus
      enum:
        - PENDING
        - FAILED
        - AUTHORIZED
        - SETTLING
        - PARTIALLY_SETTLED
        - SETTLED
        - DECLINED
        - CANCELLED
      type: string
      description: An enumeration.

    PaymentStatusTypeEnum:
      title: PaymentStatusTypeEnum
      enum:
        - APPLICATION_ERROR
        - GATEWAY_REJECTED
        - ISSUER_DECLINED
      type: string
      description: An enumeration.

    TransactionTypeEnum:
      title: TransactionTypeEnum
      enum:
        - SALE
        - REFUND
      type: string
      description: An enumeration.

    core_api__api__commons__schemas__addess__AddressAPISchema:
      title: AddressAPISchema
      type: object
      properties:
        firstName:
          title: Firstname
          type: string
        lastName:
          title: Lastname
          type: string
        addressLine1:
          title: Addressline1
          type: string
        addressLine2:
          title: Addressline2
          type: string
        city:
          title: City
          type: string
        state:
          title: State
          type: string
        countryCode:
          $ref: "#/components/schemas/CountryCodeEnum"
        postalCode:
          title: Postalcode
          type: string

    AddressAPISchema:
      title: AddressAPISchema
      required:
        - addressLine1
        - city
        - countryCode
      type: object
      properties:
        firstName:
          title: First Name
          type: string
        lastName:
          title: Last Name
          type: string
        addressLine1:
          title: Address Line 1
          type: string
          description: Street name, Company name or PO Box
        addressLine2:
          title: Address Line 2
          type: string
          description: Apartment, Unit or Building number
        city:
          title: City
          type: string
          description: Name of the city, district, town or village
        state:
          title: State
          type: string
          description: State, County or Province
        countryCode:
          title: Country Code
          allOf:
            - $ref: "#/components/schemas/CountryCodeEnum"
          description: Two letter ISO country code
        postalCode:
          title: Postal Code
          type: string
          description: Postal or ZIP code

    MerchantPaymentMethodTokenAPIResponse:
      title: MerchantPaymentMethodTokenAPIResponse
      type: object
      properties:
        createdAt:
          title: Creation date
          type: string
          description: Creation date & time of the object (UTC)
          format: date-time
        deletedAt:
          title: Revocation date
          type: string
          description: Date & time when this object was revoked. (UTC)
          format: date-time
        deleted:
          title: Revoked
          type: boolean
          description: Whether or not this object has been revoked.
        token:
          title: Token
          type: string
          description: The vaulted payment method token.
        tokenType:
          title: Token type
          type: string
          description:
            "* `MULTI_USE` a vaulted token that can be re-used with subsequent
            payments"
        analyticsId:
          title: Unique analytics ID
          type: string
          description: Unique analytics identifier corresponding to a payment method
        paymentMethodType:
          title: Payment method type
          enum:
            - PAYMENT_CARD
            - PAYPAL_BILLING_AGREEMENT
            - GOCARDLESS_MANDATE
            - KLARNA_CUSTOMER_TOKEN
            - APPLE_PAY
            - GOOGLE_PAY
          type: string
          description: Payment method type
        paymentMethodData:
          title: Payment method data
          anyOf:
            - $ref: "#/components/schemas/PaymentCardTokenAPISchemaPaymentMethodsAPI"
            - $ref: "#/components/schemas/PayPalBillingAgreementAPISchema"
            - $ref: "#/components/schemas/GoCardlessMandateAPISchema"
            - $ref: "#/components/schemas/KlarnaCustomerTokenAPISchema"
            - $ref: "#/components/schemas/ApayaCustomerTokenAPISchema"
          description: Payment method data
        customerId:
          title: Customer ID
          type: string
          description: The ID representing the customer
        description:
          title: Description
          type: string
          description: A friendly description given by the user
        default:
          title: Default
          type: boolean
          description: Whether or not this payment method is the default
          default: false
      example:
        createdAt: "2021-03-01T12:00:00.123456"
        token: _xlXlmBcTnuFxc2N3HAI73wxNjE1NTU5ODY5
        tokenType: MULTI_USE
        analyticsId: vuXhpZouWxaZpRZ-x_brZmtT
        paymentMethodType: PAYMENT_CARD
        payment_method_data:
          last4Digits: "1111"
          expirationMonth: "12"
          expirationYear: "2030"
          cardholderName: John Biggins
          network: Visa
          networkTransactionId: 020210628190752
          accountFundingType: DEBIT
        customerId: customer-123
        description: My first card
        deleted: false
        default: true

    VerifiedMerchantPaymentMethodTokenAPIResponse:
      title: VerifiedMerchantPaymentMethodTokenAPIResponse
      allOf:
        - $ref: "#/components/schemas/MerchantPaymentMethodTokenAPIResponse"
        - properties:
            isVerified:
              title: Payment method verified
              type: boolean
              description: Whether or not this payment method was verified
        - example:
            isVerified: false

    MerchantPaymentMethodTokenListAPIResponse:
      title: MerchantPaymentMethodTokenListAPIResponse
      type: object
      properties:
        data:
          title: Data
          type: array
          items:
            $ref: "#/components/schemas/MerchantPaymentMethodTokenAPIResponse"

    VerifiedMerchantPaymentMethodTokenListAPIResponse:
      title: MerchantPaymentMethodTokenListAPIResponse
      type: object
      properties:
        data:
          title: Data
          type: array
          items:
            $ref: "#/components/schemas/VerifiedMerchantPaymentMethodTokenAPIResponse"

    PaymentCardTokenAPISchemaPaymentMethodsAPI:
      title: Payment Card Token API Schema Payment Methods API
      required:
        - last4Digits
        - expirationMonth
        - expirationYear
      type: object
      properties:
        last4Digits:
          title: Payment card's last four digits
          maxLength: 4
          minLength: 4
          type: string
        expirationMonth:
          title: Expiration month
          maxLength: 2
          minLength: 2
          type: string
        expirationYear:
          title: Expiration year
          maxLength: 4
          minLength: 4
          type: string
        cardholderName:
          title: Cardholder's name
          type: string
        network:
          title: Card network
          type: string
        networkTransactionId:
          title: Network Transaction ID
          type: string
          description:
            An ID for the transaction assigned by the card network. Used
            to correlate recurring payments.
        accountFundingType:
          title: Account Funding Type
          allOf:
            - $ref: "#/components/schemas/AccountFundingTypeEnum"
          description: The type of card, e.g. Debit, Credit
      description: Used exclusively by the Payment Methods API

    VaultPaymentMethodAPIRequest:
      title: VaultPaymentMethodAPIRequest
      required:
        - customerId
      type: object
      properties:
        customerId:
          title: Customer ID
          minLength: 1
          type: string
          description: The ID representing the customer
        verify:
          type: boolean
          default: false
          description: Whether the payment method should be verified before vaulting or not
      additionalProperties: false

    ErrorObject:
      title: ErrorObject
      type: object
      properties:
        errorId:
          title: Error ID
          type: string
          description: An error ID
        description:
          title: Error description
          type: string
          description: A human description of the error
        diagnosticsId:
          title: Error diagnostics ID
          type: string
          description: An ID that you can quote when contacting the support team (support@primer.io).
        validationErrors:
          title: Validation Errors
          type: array
          items:
            type: object
          description: Returned in case of a badly formed request

    400ErrorResponse:
      title: 400ErrorResponse
      allOf:
        - $ref: "#/components/schemas/ErrorObject"

    422ErrorResponse:
      title: 422ErrorResponse
      allOf:
        - $ref: "#/components/schemas/ErrorObject"
